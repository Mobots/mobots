"""autogenerated by genpy from mobots_msgs/FeatureSetWithDeltaPose.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mobots_msgs.msg

class FeatureSetWithDeltaPose(genpy.Message):
  _md5sum = "7d7b3aa8083e80c6f87d078b3a1264d2"
  _type = "mobots_msgs/FeatureSetWithDeltaPose"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """mobots_msgs/ImageFeatures features
geometry_msgs/Pose2D deltaPose

================================================================================
MSG: mobots_msgs/ImageFeatures
mobots_msgs/CvKeyPoint[] keyPoints
mobots_msgs/CvMat descriptors

================================================================================
MSG: mobots_msgs/CvKeyPoint
mobots_msgs/Point2f pt
float32 size
float32 angle
float32 response
int32 octave
int32 class_id

================================================================================
MSG: mobots_msgs/Point2f
float32 x
float32 y

================================================================================
MSG: mobots_msgs/CvMat
uint32 rows
uint32 cols
int32 type
uint32 elemSize
uint8[] data

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['features','deltaPose']
  _slot_types = ['mobots_msgs/ImageFeatures','geometry_msgs/Pose2D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       features,deltaPose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FeatureSetWithDeltaPose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.features is None:
        self.features = mobots_msgs.msg.ImageFeatures()
      if self.deltaPose is None:
        self.deltaPose = geometry_msgs.msg.Pose2D()
    else:
      self.features = mobots_msgs.msg.ImageFeatures()
      self.deltaPose = geometry_msgs.msg.Pose2D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.features.keyPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.features.keyPoints:
        _v1 = val1.pt
        _x = _v1
        buff.write(_struct_2f.pack(_x.x, _x.y))
        _x = val1
        buff.write(_struct_3f2i.pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_struct_2IiI.pack(_x.features.descriptors.rows, _x.features.descriptors.cols, _x.features.descriptors.type, _x.features.descriptors.elemSize))
      _x = self.features.descriptors.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.deltaPose.x, _x.deltaPose.y, _x.deltaPose.theta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.features is None:
        self.features = mobots_msgs.msg.ImageFeatures()
      if self.deltaPose is None:
        self.deltaPose = geometry_msgs.msg.Pose2D()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.features.keyPoints = []
      for i in range(0, length):
        val1 = mobots_msgs.msg.CvKeyPoint()
        _v2 = val1.pt
        _x = _v2
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2f.unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _struct_3f2i.unpack(str[start:end])
        self.features.keyPoints.append(val1)
      _x = self
      start = end
      end += 16
      (_x.features.descriptors.rows, _x.features.descriptors.cols, _x.features.descriptors.type, _x.features.descriptors.elemSize,) = _struct_2IiI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.features.descriptors.data = str[start:end].decode('utf-8')
      else:
        self.features.descriptors.data = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.deltaPose.x, _x.deltaPose.y, _x.deltaPose.theta,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.features.keyPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.features.keyPoints:
        _v3 = val1.pt
        _x = _v3
        buff.write(_struct_2f.pack(_x.x, _x.y))
        _x = val1
        buff.write(_struct_3f2i.pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_struct_2IiI.pack(_x.features.descriptors.rows, _x.features.descriptors.cols, _x.features.descriptors.type, _x.features.descriptors.elemSize))
      _x = self.features.descriptors.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.deltaPose.x, _x.deltaPose.y, _x.deltaPose.theta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.features is None:
        self.features = mobots_msgs.msg.ImageFeatures()
      if self.deltaPose is None:
        self.deltaPose = geometry_msgs.msg.Pose2D()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.features.keyPoints = []
      for i in range(0, length):
        val1 = mobots_msgs.msg.CvKeyPoint()
        _v4 = val1.pt
        _x = _v4
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2f.unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _struct_3f2i.unpack(str[start:end])
        self.features.keyPoints.append(val1)
      _x = self
      start = end
      end += 16
      (_x.features.descriptors.rows, _x.features.descriptors.cols, _x.features.descriptors.type, _x.features.descriptors.elemSize,) = _struct_2IiI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.features.descriptors.data = str[start:end].decode('utf-8')
      else:
        self.features.descriptors.data = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.deltaPose.x, _x.deltaPose.y, _x.deltaPose.theta,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f2i = struct.Struct("<3f2i")
_struct_2IiI = struct.Struct("<2IiI")
_struct_2f = struct.Struct("<2f")
_struct_3d = struct.Struct("<3d")
