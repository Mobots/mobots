   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_spi.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	SPI_I2S_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	SPI_I2S_DeInit:
  24              	.LFB29:
  25              		.file 1 "../stm32_lib/src/stm32f10x_spi.c"
   1:../stm32_lib/src/stm32f10x_spi.c **** /**
   2:../stm32_lib/src/stm32f10x_spi.c ****   ******************************************************************************
   3:../stm32_lib/src/stm32f10x_spi.c ****   * @file    stm32f10x_spi.c
   4:../stm32_lib/src/stm32f10x_spi.c ****   * @author  MCD Application Team
   5:../stm32_lib/src/stm32f10x_spi.c ****   * @version V3.3.0
   6:../stm32_lib/src/stm32f10x_spi.c ****   * @date    04/16/2010
   7:../stm32_lib/src/stm32f10x_spi.c ****   * @brief   This file provides all the SPI firmware functions.
   8:../stm32_lib/src/stm32f10x_spi.c ****   ******************************************************************************
   9:../stm32_lib/src/stm32f10x_spi.c ****   * @copy
  10:../stm32_lib/src/stm32f10x_spi.c ****   *
  11:../stm32_lib/src/stm32f10x_spi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../stm32_lib/src/stm32f10x_spi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../stm32_lib/src/stm32f10x_spi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../stm32_lib/src/stm32f10x_spi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../stm32_lib/src/stm32f10x_spi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../stm32_lib/src/stm32f10x_spi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../stm32_lib/src/stm32f10x_spi.c ****   *
  18:../stm32_lib/src/stm32f10x_spi.c ****   * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
  19:../stm32_lib/src/stm32f10x_spi.c ****   */ 
  20:../stm32_lib/src/stm32f10x_spi.c **** 
  21:../stm32_lib/src/stm32f10x_spi.c **** /* Includes ------------------------------------------------------------------*/
  22:../stm32_lib/src/stm32f10x_spi.c **** #include "stm32f10x_spi.h"
  23:../stm32_lib/src/stm32f10x_spi.c **** #include "stm32f10x_rcc.h"
  24:../stm32_lib/src/stm32f10x_spi.c **** 
  25:../stm32_lib/src/stm32f10x_spi.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../stm32_lib/src/stm32f10x_spi.c ****   * @{
  27:../stm32_lib/src/stm32f10x_spi.c ****   */
  28:../stm32_lib/src/stm32f10x_spi.c **** 
  29:../stm32_lib/src/stm32f10x_spi.c **** /** @defgroup SPI 
  30:../stm32_lib/src/stm32f10x_spi.c ****   * @brief SPI driver modules
  31:../stm32_lib/src/stm32f10x_spi.c ****   * @{
  32:../stm32_lib/src/stm32f10x_spi.c ****   */ 
  33:../stm32_lib/src/stm32f10x_spi.c **** 
  34:../stm32_lib/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_TypesDefinitions
  35:../stm32_lib/src/stm32f10x_spi.c ****   * @{
  36:../stm32_lib/src/stm32f10x_spi.c ****   */
  37:../stm32_lib/src/stm32f10x_spi.c **** 
  38:../stm32_lib/src/stm32f10x_spi.c **** /**
  39:../stm32_lib/src/stm32f10x_spi.c ****   * @}
  40:../stm32_lib/src/stm32f10x_spi.c ****   */ 
  41:../stm32_lib/src/stm32f10x_spi.c **** 
  42:../stm32_lib/src/stm32f10x_spi.c **** 
  43:../stm32_lib/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Defines
  44:../stm32_lib/src/stm32f10x_spi.c ****   * @{
  45:../stm32_lib/src/stm32f10x_spi.c ****   */
  46:../stm32_lib/src/stm32f10x_spi.c **** 
  47:../stm32_lib/src/stm32f10x_spi.c **** /* SPI SPE mask */
  48:../stm32_lib/src/stm32f10x_spi.c **** #define CR1_SPE_Set          ((uint16_t)0x0040)
  49:../stm32_lib/src/stm32f10x_spi.c **** #define CR1_SPE_Reset        ((uint16_t)0xFFBF)
  50:../stm32_lib/src/stm32f10x_spi.c **** 
  51:../stm32_lib/src/stm32f10x_spi.c **** /* I2S I2SE mask */
  52:../stm32_lib/src/stm32f10x_spi.c **** #define I2SCFGR_I2SE_Set     ((uint16_t)0x0400)
  53:../stm32_lib/src/stm32f10x_spi.c **** #define I2SCFGR_I2SE_Reset   ((uint16_t)0xFBFF)
  54:../stm32_lib/src/stm32f10x_spi.c **** 
  55:../stm32_lib/src/stm32f10x_spi.c **** /* SPI CRCNext mask */
  56:../stm32_lib/src/stm32f10x_spi.c **** #define CR1_CRCNext_Set      ((uint16_t)0x1000)
  57:../stm32_lib/src/stm32f10x_spi.c **** 
  58:../stm32_lib/src/stm32f10x_spi.c **** /* SPI CRCEN mask */
  59:../stm32_lib/src/stm32f10x_spi.c **** #define CR1_CRCEN_Set        ((uint16_t)0x2000)
  60:../stm32_lib/src/stm32f10x_spi.c **** #define CR1_CRCEN_Reset      ((uint16_t)0xDFFF)
  61:../stm32_lib/src/stm32f10x_spi.c **** 
  62:../stm32_lib/src/stm32f10x_spi.c **** /* SPI SSOE mask */
  63:../stm32_lib/src/stm32f10x_spi.c **** #define CR2_SSOE_Set         ((uint16_t)0x0004)
  64:../stm32_lib/src/stm32f10x_spi.c **** #define CR2_SSOE_Reset       ((uint16_t)0xFFFB)
  65:../stm32_lib/src/stm32f10x_spi.c **** 
  66:../stm32_lib/src/stm32f10x_spi.c **** /* SPI registers Masks */
  67:../stm32_lib/src/stm32f10x_spi.c **** #define CR1_CLEAR_Mask       ((uint16_t)0x3040)
  68:../stm32_lib/src/stm32f10x_spi.c **** #define I2SCFGR_CLEAR_Mask   ((uint16_t)0xF040)
  69:../stm32_lib/src/stm32f10x_spi.c **** 
  70:../stm32_lib/src/stm32f10x_spi.c **** /* SPI or I2S mode selection masks */
  71:../stm32_lib/src/stm32f10x_spi.c **** #define SPI_Mode_Select      ((uint16_t)0xF7FF)
  72:../stm32_lib/src/stm32f10x_spi.c **** #define I2S_Mode_Select      ((uint16_t)0x0800) 
  73:../stm32_lib/src/stm32f10x_spi.c **** 
  74:../stm32_lib/src/stm32f10x_spi.c **** /* I2S clock source selection masks */
  75:../stm32_lib/src/stm32f10x_spi.c **** #define I2S2_CLOCK_SRC       ((uint32_t)(0x00020000))
  76:../stm32_lib/src/stm32f10x_spi.c **** #define I2S3_CLOCK_SRC       ((uint32_t)(0x00040000))
  77:../stm32_lib/src/stm32f10x_spi.c **** #define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
  78:../stm32_lib/src/stm32f10x_spi.c **** #define I2S_DIV_MASK         ((uint32_t)(0x000000F0))
  79:../stm32_lib/src/stm32f10x_spi.c **** 
  80:../stm32_lib/src/stm32f10x_spi.c **** /**
  81:../stm32_lib/src/stm32f10x_spi.c ****   * @}
  82:../stm32_lib/src/stm32f10x_spi.c ****   */
  83:../stm32_lib/src/stm32f10x_spi.c **** 
  84:../stm32_lib/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Macros
  85:../stm32_lib/src/stm32f10x_spi.c ****   * @{
  86:../stm32_lib/src/stm32f10x_spi.c ****   */
  87:../stm32_lib/src/stm32f10x_spi.c **** 
  88:../stm32_lib/src/stm32f10x_spi.c **** /**
  89:../stm32_lib/src/stm32f10x_spi.c ****   * @}
  90:../stm32_lib/src/stm32f10x_spi.c ****   */
  91:../stm32_lib/src/stm32f10x_spi.c **** 
  92:../stm32_lib/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Variables
  93:../stm32_lib/src/stm32f10x_spi.c ****   * @{
  94:../stm32_lib/src/stm32f10x_spi.c ****   */
  95:../stm32_lib/src/stm32f10x_spi.c **** 
  96:../stm32_lib/src/stm32f10x_spi.c **** /**
  97:../stm32_lib/src/stm32f10x_spi.c ****   * @}
  98:../stm32_lib/src/stm32f10x_spi.c ****   */
  99:../stm32_lib/src/stm32f10x_spi.c **** 
 100:../stm32_lib/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_FunctionPrototypes
 101:../stm32_lib/src/stm32f10x_spi.c ****   * @{
 102:../stm32_lib/src/stm32f10x_spi.c ****   */
 103:../stm32_lib/src/stm32f10x_spi.c **** 
 104:../stm32_lib/src/stm32f10x_spi.c **** /**
 105:../stm32_lib/src/stm32f10x_spi.c ****   * @}
 106:../stm32_lib/src/stm32f10x_spi.c ****   */
 107:../stm32_lib/src/stm32f10x_spi.c **** 
 108:../stm32_lib/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Functions
 109:../stm32_lib/src/stm32f10x_spi.c ****   * @{
 110:../stm32_lib/src/stm32f10x_spi.c ****   */
 111:../stm32_lib/src/stm32f10x_spi.c **** 
 112:../stm32_lib/src/stm32f10x_spi.c **** /**
 113:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Deinitializes the SPIx peripheral registers to their default
 114:../stm32_lib/src/stm32f10x_spi.c ****   *   reset values (Affects also the I2Ss).
 115:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 116:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 117:../stm32_lib/src/stm32f10x_spi.c ****   */
 118:../stm32_lib/src/stm32f10x_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 119:../stm32_lib/src/stm32f10x_spi.c **** {
  26              		.loc 1 119 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 120:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 121:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 122:../stm32_lib/src/stm32f10x_spi.c **** 
 123:../stm32_lib/src/stm32f10x_spi.c ****   if (SPIx == SPI1)
  42              		.loc 1 123 0
  43 0008 7A68     		ldr	r2, [r7, #4]
  44 000a 4FF44053 		mov	r3, #12288
  45 000e C4F20103 		movt	r3, 16385
  46 0012 9A42     		cmp	r2, r3
  47 0014 0CD1     		bne	.L2
 124:../stm32_lib/src/stm32f10x_spi.c ****   {
 125:../stm32_lib/src/stm32f10x_spi.c ****     /* Enable SPI1 reset state */
 126:../stm32_lib/src/stm32f10x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  48              		.loc 1 126 0
  49 0016 4FF48050 		mov	r0, #4096
  50 001a 4FF00101 		mov	r1, #1
  51 001e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 127:../stm32_lib/src/stm32f10x_spi.c ****     /* Release SPI1 from reset state */
 128:../stm32_lib/src/stm32f10x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  52              		.loc 1 128 0
  53 0022 4FF48050 		mov	r0, #4096
  54 0026 4FF00001 		mov	r1, #0
  55 002a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  56 002e 26E0     		b	.L1
  57              	.L2:
 129:../stm32_lib/src/stm32f10x_spi.c ****   }
 130:../stm32_lib/src/stm32f10x_spi.c ****   else if (SPIx == SPI2)
  58              		.loc 1 130 0
  59 0030 7A68     		ldr	r2, [r7, #4]
  60 0032 4FF46053 		mov	r3, #14336
  61 0036 C4F20003 		movt	r3, 16384
  62 003a 9A42     		cmp	r2, r3
  63 003c 0CD1     		bne	.L4
 131:../stm32_lib/src/stm32f10x_spi.c ****   {
 132:../stm32_lib/src/stm32f10x_spi.c ****     /* Enable SPI2 reset state */
 133:../stm32_lib/src/stm32f10x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  64              		.loc 1 133 0
  65 003e 4FF48040 		mov	r0, #16384
  66 0042 4FF00101 		mov	r1, #1
  67 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 134:../stm32_lib/src/stm32f10x_spi.c ****     /* Release SPI2 from reset state */
 135:../stm32_lib/src/stm32f10x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  68              		.loc 1 135 0
  69 004a 4FF48040 		mov	r0, #16384
  70 004e 4FF00001 		mov	r1, #0
  71 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  72 0056 12E0     		b	.L1
  73              	.L4:
 136:../stm32_lib/src/stm32f10x_spi.c ****   }
 137:../stm32_lib/src/stm32f10x_spi.c ****   else
 138:../stm32_lib/src/stm32f10x_spi.c ****   {
 139:../stm32_lib/src/stm32f10x_spi.c ****     if (SPIx == SPI3)
  74              		.loc 1 139 0
  75 0058 7A68     		ldr	r2, [r7, #4]
  76 005a 4FF47053 		mov	r3, #15360
  77 005e C4F20003 		movt	r3, 16384
  78 0062 9A42     		cmp	r2, r3
  79 0064 0BD1     		bne	.L1
 140:../stm32_lib/src/stm32f10x_spi.c ****     {
 141:../stm32_lib/src/stm32f10x_spi.c ****       /* Enable SPI3 reset state */
 142:../stm32_lib/src/stm32f10x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  80              		.loc 1 142 0
  81 0066 4FF40040 		mov	r0, #32768
  82 006a 4FF00101 		mov	r1, #1
  83 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 143:../stm32_lib/src/stm32f10x_spi.c ****       /* Release SPI3 from reset state */
 144:../stm32_lib/src/stm32f10x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  84              		.loc 1 144 0
  85 0072 4FF40040 		mov	r0, #32768
  86 0076 4FF00001 		mov	r1, #0
  87 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  88              	.L1:
 145:../stm32_lib/src/stm32f10x_spi.c ****     }
 146:../stm32_lib/src/stm32f10x_spi.c ****   }
 147:../stm32_lib/src/stm32f10x_spi.c **** }
  89              		.loc 1 147 0
  90 007e 07F10807 		add	r7, r7, #8
  91 0082 BD46     		mov	sp, r7
  92 0084 80BD     		pop	{r7, pc}
  93              		.cfi_endproc
  94              	.LFE29:
  96 0086 00BF     		.align	2
  97              		.global	SPI_Init
  98              		.thumb
  99              		.thumb_func
 101              	SPI_Init:
 102              	.LFB30:
 148:../stm32_lib/src/stm32f10x_spi.c **** 
 149:../stm32_lib/src/stm32f10x_spi.c **** /**
 150:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 151:../stm32_lib/src/stm32f10x_spi.c ****   *   parameters in the SPI_InitStruct.
 152:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 153:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 154:../stm32_lib/src/stm32f10x_spi.c ****   *   contains the configuration information for the specified SPI peripheral.
 155:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 156:../stm32_lib/src/stm32f10x_spi.c ****   */
 157:../stm32_lib/src/stm32f10x_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 158:../stm32_lib/src/stm32f10x_spi.c **** {
 103              		.loc 1 158 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 16
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108 0088 80B4     		push	{r7}
 109              	.LCFI3:
 110              		.cfi_def_cfa_offset 4
 111              		.cfi_offset 7, -4
 112 008a 85B0     		sub	sp, sp, #20
 113              	.LCFI4:
 114              		.cfi_def_cfa_offset 24
 115 008c 00AF     		add	r7, sp, #0
 116              	.LCFI5:
 117              		.cfi_def_cfa_register 7
 118 008e 7860     		str	r0, [r7, #4]
 119 0090 3960     		str	r1, [r7, #0]
 159:../stm32_lib/src/stm32f10x_spi.c ****   uint16_t tmpreg = 0;
 120              		.loc 1 159 0
 121 0092 4FF00003 		mov	r3, #0
 122 0096 FB81     		strh	r3, [r7, #14]	@ movhi
 160:../stm32_lib/src/stm32f10x_spi.c ****   
 161:../stm32_lib/src/stm32f10x_spi.c ****   /* check the parameters */
 162:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));   
 163:../stm32_lib/src/stm32f10x_spi.c ****   
 164:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the SPI parameters */
 165:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 166:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 167:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 168:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 169:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 170:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 171:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 172:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 173:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 174:../stm32_lib/src/stm32f10x_spi.c **** 
 175:../stm32_lib/src/stm32f10x_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 176:../stm32_lib/src/stm32f10x_spi.c ****   /* Get the SPIx CR1 value */
 177:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg = SPIx->CR1;
 123              		.loc 1 177 0
 124 0098 7B68     		ldr	r3, [r7, #4]
 125 009a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 126 009c FB81     		strh	r3, [r7, #14]	@ movhi
 178:../stm32_lib/src/stm32f10x_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 179:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg &= CR1_CLEAR_Mask;
 127              		.loc 1 179 0
 128 009e FB89     		ldrh	r3, [r7, #14]	@ movhi
 129 00a0 03F44153 		and	r3, r3, #12352
 130 00a4 FB81     		strh	r3, [r7, #14]	@ movhi
 180:../stm32_lib/src/stm32f10x_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 181:../stm32_lib/src/stm32f10x_spi.c ****      master/salve mode, CPOL and CPHA */
 182:../stm32_lib/src/stm32f10x_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 183:../stm32_lib/src/stm32f10x_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 184:../stm32_lib/src/stm32f10x_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 185:../stm32_lib/src/stm32f10x_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 186:../stm32_lib/src/stm32f10x_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 187:../stm32_lib/src/stm32f10x_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 188:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 131              		.loc 1 188 0
 132 00a6 3B68     		ldr	r3, [r7, #0]
 133 00a8 1A88     		ldrh	r2, [r3, #0]
 134 00aa 3B68     		ldr	r3, [r7, #0]
 135 00ac 5B88     		ldrh	r3, [r3, #2]
 136 00ae 1343     		orrs	r3, r3, r2
 137 00b0 9AB2     		uxth	r2, r3
 189:../stm32_lib/src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 138              		.loc 1 189 0
 139 00b2 3B68     		ldr	r3, [r7, #0]
 140 00b4 9B88     		ldrh	r3, [r3, #4]
 188:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 141              		.loc 1 188 0
 142 00b6 1343     		orrs	r3, r3, r2
 143 00b8 9AB2     		uxth	r2, r3
 144              		.loc 1 189 0
 145 00ba 3B68     		ldr	r3, [r7, #0]
 146 00bc DB88     		ldrh	r3, [r3, #6]
 188:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 147              		.loc 1 188 0
 148 00be 1343     		orrs	r3, r3, r2
 149 00c0 9AB2     		uxth	r2, r3
 190:../stm32_lib/src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 150              		.loc 1 190 0
 151 00c2 3B68     		ldr	r3, [r7, #0]
 152 00c4 1B89     		ldrh	r3, [r3, #8]
 188:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 153              		.loc 1 188 0
 154 00c6 1343     		orrs	r3, r3, r2
 155 00c8 9AB2     		uxth	r2, r3
 156              		.loc 1 190 0
 157 00ca 3B68     		ldr	r3, [r7, #0]
 158 00cc 5B89     		ldrh	r3, [r3, #10]
 188:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 159              		.loc 1 188 0
 160 00ce 1343     		orrs	r3, r3, r2
 161 00d0 9AB2     		uxth	r2, r3
 191:../stm32_lib/src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 162              		.loc 1 191 0
 163 00d2 3B68     		ldr	r3, [r7, #0]
 164 00d4 9B89     		ldrh	r3, [r3, #12]
 188:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 165              		.loc 1 188 0
 166 00d6 1343     		orrs	r3, r3, r2
 167 00d8 9AB2     		uxth	r2, r3
 168              		.loc 1 191 0
 169 00da 3B68     		ldr	r3, [r7, #0]
 170 00dc DB89     		ldrh	r3, [r3, #14]
 188:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 171              		.loc 1 188 0
 172 00de 1343     		orrs	r3, r3, r2
 173 00e0 9AB2     		uxth	r2, r3
 174 00e2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 175 00e4 1343     		orrs	r3, r3, r2
 176 00e6 FB81     		strh	r3, [r7, #14]	@ movhi
 192:../stm32_lib/src/stm32f10x_spi.c ****   /* Write to SPIx CR1 */
 193:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->CR1 = tmpreg;
 177              		.loc 1 193 0
 178 00e8 7B68     		ldr	r3, [r7, #4]
 179 00ea FA89     		ldrh	r2, [r7, #14]	@ movhi
 180 00ec 1A80     		strh	r2, [r3, #0]	@ movhi
 194:../stm32_lib/src/stm32f10x_spi.c ****   
 195:../stm32_lib/src/stm32f10x_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 196:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->I2SCFGR &= SPI_Mode_Select;		
 181              		.loc 1 196 0
 182 00ee 7B68     		ldr	r3, [r7, #4]
 183 00f0 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 184 00f2 9BB2     		uxth	r3, r3
 185 00f4 23F40063 		bic	r3, r3, #2048
 186 00f8 9AB2     		uxth	r2, r3
 187 00fa 7B68     		ldr	r3, [r7, #4]
 188 00fc 9A83     		strh	r2, [r3, #28]	@ movhi
 197:../stm32_lib/src/stm32f10x_spi.c **** 
 198:../stm32_lib/src/stm32f10x_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 199:../stm32_lib/src/stm32f10x_spi.c ****   /* Write to SPIx CRCPOLY */
 200:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 189              		.loc 1 200 0
 190 00fe 3B68     		ldr	r3, [r7, #0]
 191 0100 1A8A     		ldrh	r2, [r3, #16]
 192 0102 7B68     		ldr	r3, [r7, #4]
 193 0104 1A82     		strh	r2, [r3, #16]	@ movhi
 201:../stm32_lib/src/stm32f10x_spi.c **** }
 194              		.loc 1 201 0
 195 0106 07F11407 		add	r7, r7, #20
 196 010a BD46     		mov	sp, r7
 197 010c 80BC     		pop	{r7}
 198 010e 7047     		bx	lr
 199              		.cfi_endproc
 200              	.LFE30:
 202              		.align	2
 203              		.global	I2S_Init
 204              		.thumb
 205              		.thumb_func
 207              	I2S_Init:
 208              	.LFB31:
 202:../stm32_lib/src/stm32f10x_spi.c **** 
 203:../stm32_lib/src/stm32f10x_spi.c **** /**
 204:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 205:../stm32_lib/src/stm32f10x_spi.c ****   *   parameters in the I2S_InitStruct.
 206:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral
 207:../stm32_lib/src/stm32f10x_spi.c ****   *   (configured in I2S mode).
 208:../stm32_lib/src/stm32f10x_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 209:../stm32_lib/src/stm32f10x_spi.c ****   *   contains the configuration information for the specified SPI peripheral
 210:../stm32_lib/src/stm32f10x_spi.c ****   *   configured in I2S mode.
 211:../stm32_lib/src/stm32f10x_spi.c ****   * @note
 212:../stm32_lib/src/stm32f10x_spi.c ****   *  The function calculates the optimal prescaler needed to obtain the most 
 213:../stm32_lib/src/stm32f10x_spi.c ****   *  accurate audio frequency (depending on the I2S clock source, the PLL values 
 214:../stm32_lib/src/stm32f10x_spi.c ****   *  and the product configuration). But in case the prescaler value is greater 
 215:../stm32_lib/src/stm32f10x_spi.c ****   *  than 511, the default value (0x02) will be configured instead.  *   
 216:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 217:../stm32_lib/src/stm32f10x_spi.c ****   */
 218:../stm32_lib/src/stm32f10x_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 219:../stm32_lib/src/stm32f10x_spi.c **** {
 209              		.loc 1 219 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 48
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213 0110 80B5     		push	{r7, lr}
 214              	.LCFI6:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 14, -4
 217              		.cfi_offset 7, -8
 218 0112 8CB0     		sub	sp, sp, #48
 219              	.LCFI7:
 220              		.cfi_def_cfa_offset 56
 221 0114 00AF     		add	r7, sp, #0
 222              	.LCFI8:
 223              		.cfi_def_cfa_register 7
 224 0116 7860     		str	r0, [r7, #4]
 225 0118 3960     		str	r1, [r7, #0]
 220:../stm32_lib/src/stm32f10x_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 226              		.loc 1 220 0
 227 011a 4FF00003 		mov	r3, #0
 228 011e 7B84     		strh	r3, [r7, #34]	@ movhi
 229 0120 4FF00203 		mov	r3, #2
 230 0124 FB85     		strh	r3, [r7, #46]	@ movhi
 231 0126 4FF00003 		mov	r3, #0
 232 012a BB85     		strh	r3, [r7, #44]	@ movhi
 233 012c 4FF00103 		mov	r3, #1
 234 0130 7B85     		strh	r3, [r7, #42]	@ movhi
 221:../stm32_lib/src/stm32f10x_spi.c ****   uint32_t tmp = 0;
 235              		.loc 1 221 0
 236 0132 4FF00003 		mov	r3, #0
 237 0136 7B62     		str	r3, [r7, #36]
 222:../stm32_lib/src/stm32f10x_spi.c ****   RCC_ClocksTypeDef RCC_Clocks;
 223:../stm32_lib/src/stm32f10x_spi.c ****   uint32_t sourceclock = 0;
 238              		.loc 1 223 0
 239 0138 4FF00003 		mov	r3, #0
 240 013c FB61     		str	r3, [r7, #28]
 224:../stm32_lib/src/stm32f10x_spi.c ****   
 225:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the I2S parameters */
 226:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 227:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 228:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 229:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 230:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 231:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 232:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 233:../stm32_lib/src/stm32f10x_spi.c **** 
 234:../stm32_lib/src/stm32f10x_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 235:../stm32_lib/src/stm32f10x_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 236:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 241              		.loc 1 236 0
 242 013e 7B68     		ldr	r3, [r7, #4]
 243 0140 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 244 0142 9BB2     		uxth	r3, r3
 245 0144 23F47A63 		bic	r3, r3, #4000
 246 0148 23F01F03 		bic	r3, r3, #31
 247 014c 9AB2     		uxth	r2, r3
 248 014e 7B68     		ldr	r3, [r7, #4]
 249 0150 9A83     		strh	r2, [r3, #28]	@ movhi
 237:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->I2SPR = 0x0002;
 250              		.loc 1 237 0
 251 0152 7B68     		ldr	r3, [r7, #4]
 252 0154 4FF00202 		mov	r2, #2
 253 0158 1A84     		strh	r2, [r3, #32]	@ movhi
 238:../stm32_lib/src/stm32f10x_spi.c ****   
 239:../stm32_lib/src/stm32f10x_spi.c ****   /* Get the I2SCFGR register value */
 240:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg = SPIx->I2SCFGR;
 254              		.loc 1 240 0
 255 015a 7B68     		ldr	r3, [r7, #4]
 256 015c 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 257 015e 7B84     		strh	r3, [r7, #34]	@ movhi
 241:../stm32_lib/src/stm32f10x_spi.c ****   
 242:../stm32_lib/src/stm32f10x_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 243:../stm32_lib/src/stm32f10x_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 258              		.loc 1 243 0
 259 0160 3B68     		ldr	r3, [r7, #0]
 260 0162 9B68     		ldr	r3, [r3, #8]
 261 0164 022B     		cmp	r3, #2
 262 0166 06D1     		bne	.L7
 244:../stm32_lib/src/stm32f10x_spi.c ****   {
 245:../stm32_lib/src/stm32f10x_spi.c ****     i2sodd = (uint16_t)0;
 263              		.loc 1 245 0
 264 0168 4FF00003 		mov	r3, #0
 265 016c BB85     		strh	r3, [r7, #44]	@ movhi
 246:../stm32_lib/src/stm32f10x_spi.c ****     i2sdiv = (uint16_t)2;   
 266              		.loc 1 246 0
 267 016e 4FF00203 		mov	r3, #2
 268 0172 FB85     		strh	r3, [r7, #46]	@ movhi
 269 0174 67E0     		b	.L8
 270              	.L7:
 247:../stm32_lib/src/stm32f10x_spi.c ****   }
 248:../stm32_lib/src/stm32f10x_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 249:../stm32_lib/src/stm32f10x_spi.c ****   else
 250:../stm32_lib/src/stm32f10x_spi.c ****   {
 251:../stm32_lib/src/stm32f10x_spi.c ****     /* Check the frame length (For the Prescaler computing) */
 252:../stm32_lib/src/stm32f10x_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 271              		.loc 1 252 0
 272 0176 3B68     		ldr	r3, [r7, #0]
 273 0178 9B88     		ldrh	r3, [r3, #4]
 274 017a 002B     		cmp	r3, #0
 275 017c 03D1     		bne	.L9
 253:../stm32_lib/src/stm32f10x_spi.c ****     {
 254:../stm32_lib/src/stm32f10x_spi.c ****       /* Packet length is 16 bits */
 255:../stm32_lib/src/stm32f10x_spi.c ****       packetlength = 1;
 276              		.loc 1 255 0
 277 017e 4FF00103 		mov	r3, #1
 278 0182 7B85     		strh	r3, [r7, #42]	@ movhi
 279 0184 02E0     		b	.L10
 280              	.L9:
 256:../stm32_lib/src/stm32f10x_spi.c ****     }
 257:../stm32_lib/src/stm32f10x_spi.c ****     else
 258:../stm32_lib/src/stm32f10x_spi.c ****     {
 259:../stm32_lib/src/stm32f10x_spi.c ****       /* Packet length is 32 bits */
 260:../stm32_lib/src/stm32f10x_spi.c ****       packetlength = 2;
 281              		.loc 1 260 0
 282 0186 4FF00203 		mov	r3, #2
 283 018a 7B85     		strh	r3, [r7, #42]	@ movhi
 284              	.L10:
 261:../stm32_lib/src/stm32f10x_spi.c ****     }
 262:../stm32_lib/src/stm32f10x_spi.c **** 
 263:../stm32_lib/src/stm32f10x_spi.c ****     /* Get the I2S clock source mask depending on the peripheral number */
 264:../stm32_lib/src/stm32f10x_spi.c ****     if(((uint32_t)SPIx) == SPI2_BASE)
 285              		.loc 1 264 0
 286 018c 7A68     		ldr	r2, [r7, #4]
 287 018e 4FF46053 		mov	r3, #14336
 288 0192 C4F20003 		movt	r3, 16384
 289 0196 9A42     		cmp	r2, r3
 290 0198 03D1     		bne	.L11
 265:../stm32_lib/src/stm32f10x_spi.c ****     {
 266:../stm32_lib/src/stm32f10x_spi.c ****       /* The mask is relative to I2S2 */
 267:../stm32_lib/src/stm32f10x_spi.c ****       tmp = I2S2_CLOCK_SRC;
 291              		.loc 1 267 0
 292 019a 4FF40033 		mov	r3, #131072
 293 019e 7B62     		str	r3, [r7, #36]
 294 01a0 02E0     		b	.L12
 295              	.L11:
 268:../stm32_lib/src/stm32f10x_spi.c ****     }
 269:../stm32_lib/src/stm32f10x_spi.c ****     else 
 270:../stm32_lib/src/stm32f10x_spi.c ****     {
 271:../stm32_lib/src/stm32f10x_spi.c ****       /* The mask is relative to I2S3 */      
 272:../stm32_lib/src/stm32f10x_spi.c ****       tmp = I2S3_CLOCK_SRC;
 296              		.loc 1 272 0
 297 01a2 4FF48023 		mov	r3, #262144
 298 01a6 7B62     		str	r3, [r7, #36]
 299              	.L12:
 273:../stm32_lib/src/stm32f10x_spi.c ****     }
 274:../stm32_lib/src/stm32f10x_spi.c **** 
 275:../stm32_lib/src/stm32f10x_spi.c ****     /* Check the I2S clock source configuration depending on the Device:
 276:../stm32_lib/src/stm32f10x_spi.c ****        Only Connectivity line devices have the PLL3 VCO clock */
 277:../stm32_lib/src/stm32f10x_spi.c **** #ifdef STM32F10X_CL
 278:../stm32_lib/src/stm32f10x_spi.c ****     if((RCC->CFGR2 & tmp) != 0)
 279:../stm32_lib/src/stm32f10x_spi.c ****     {
 280:../stm32_lib/src/stm32f10x_spi.c ****       /* Get the configuration bits of RCC PLL3 multiplier */
 281:../stm32_lib/src/stm32f10x_spi.c ****       tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
 282:../stm32_lib/src/stm32f10x_spi.c **** 
 283:../stm32_lib/src/stm32f10x_spi.c ****       /* Get the value of the PLL3 multiplier */      
 284:../stm32_lib/src/stm32f10x_spi.c ****       if((tmp > 5) && (tmp < 15))
 285:../stm32_lib/src/stm32f10x_spi.c ****       {
 286:../stm32_lib/src/stm32f10x_spi.c ****         /* Multplier is between 8 and 14 (value 15 is forbidden) */
 287:../stm32_lib/src/stm32f10x_spi.c ****         tmp += 2;
 288:../stm32_lib/src/stm32f10x_spi.c ****       }
 289:../stm32_lib/src/stm32f10x_spi.c ****       else
 290:../stm32_lib/src/stm32f10x_spi.c ****       {
 291:../stm32_lib/src/stm32f10x_spi.c ****         if (tmp == 15)
 292:../stm32_lib/src/stm32f10x_spi.c ****         {
 293:../stm32_lib/src/stm32f10x_spi.c ****           /* Multiplier is 20 */
 294:../stm32_lib/src/stm32f10x_spi.c ****           tmp = 20;
 295:../stm32_lib/src/stm32f10x_spi.c ****         }
 296:../stm32_lib/src/stm32f10x_spi.c ****       }      
 297:../stm32_lib/src/stm32f10x_spi.c ****       /* Get the PREDIV2 value */
 298:../stm32_lib/src/stm32f10x_spi.c ****       sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
 299:../stm32_lib/src/stm32f10x_spi.c ****       
 300:../stm32_lib/src/stm32f10x_spi.c ****       /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
 301:../stm32_lib/src/stm32f10x_spi.c ****       sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
 302:../stm32_lib/src/stm32f10x_spi.c ****     }
 303:../stm32_lib/src/stm32f10x_spi.c ****     else
 304:../stm32_lib/src/stm32f10x_spi.c ****     {
 305:../stm32_lib/src/stm32f10x_spi.c ****       /* I2S Clock source is System clock: Get System Clock frequency */
 306:../stm32_lib/src/stm32f10x_spi.c ****       RCC_GetClocksFreq(&RCC_Clocks);      
 307:../stm32_lib/src/stm32f10x_spi.c ****       
 308:../stm32_lib/src/stm32f10x_spi.c ****       /* Get the source clock value: based on System Clock value */
 309:../stm32_lib/src/stm32f10x_spi.c ****       sourceclock = RCC_Clocks.SYSCLK_Frequency;
 310:../stm32_lib/src/stm32f10x_spi.c ****     }        
 311:../stm32_lib/src/stm32f10x_spi.c **** #else /* STM32F10X_HD */
 312:../stm32_lib/src/stm32f10x_spi.c ****     /* I2S Clock source is System clock: Get System Clock frequency */
 313:../stm32_lib/src/stm32f10x_spi.c ****     RCC_GetClocksFreq(&RCC_Clocks);      
 300              		.loc 1 313 0
 301 01a8 07F10803 		add	r3, r7, #8
 302 01ac 1846     		mov	r0, r3
 303 01ae FFF7FEFF 		bl	RCC_GetClocksFreq
 314:../stm32_lib/src/stm32f10x_spi.c ****       
 315:../stm32_lib/src/stm32f10x_spi.c ****     /* Get the source clock value: based on System Clock value */
 316:../stm32_lib/src/stm32f10x_spi.c ****     sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 304              		.loc 1 316 0
 305 01b2 BB68     		ldr	r3, [r7, #8]
 306 01b4 FB61     		str	r3, [r7, #28]
 317:../stm32_lib/src/stm32f10x_spi.c **** #endif /* STM32F10X_CL */    
 318:../stm32_lib/src/stm32f10x_spi.c **** 
 319:../stm32_lib/src/stm32f10x_spi.c ****     /* Compute the Real divider depending on the MCLK output state with a flaoting point */
 320:../stm32_lib/src/stm32f10x_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 307              		.loc 1 320 0
 308 01b6 3B68     		ldr	r3, [r7, #0]
 309 01b8 DB88     		ldrh	r3, [r3, #6]
 310 01ba B3F5007F 		cmp	r3, #512
 311 01be 13D1     		bne	.L13
 321:../stm32_lib/src/stm32f10x_spi.c ****     {
 322:../stm32_lib/src/stm32f10x_spi.c ****       /* MCLK output is enabled */
 323:../stm32_lib/src/stm32f10x_spi.c ****       tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 312              		.loc 1 323 0
 313 01c0 FB69     		ldr	r3, [r7, #28]
 314 01c2 4FEA1322 		lsr	r2, r3, #8
 315 01c6 1346     		mov	r3, r2
 316 01c8 4FEA8303 		lsl	r3, r3, #2
 317 01cc 9B18     		adds	r3, r3, r2
 318 01ce 4FEA4303 		lsl	r3, r3, #1
 319 01d2 1A46     		mov	r2, r3
 320 01d4 3B68     		ldr	r3, [r7, #0]
 321 01d6 9B68     		ldr	r3, [r3, #8]
 322 01d8 B2FBF3F3 		udiv	r3, r2, r3
 323 01dc 9BB2     		uxth	r3, r3
 324 01de 03F10503 		add	r3, r3, #5
 325 01e2 9BB2     		uxth	r3, r3
 326 01e4 7B62     		str	r3, [r7, #36]
 327 01e6 15E0     		b	.L14
 328              	.L13:
 324:../stm32_lib/src/stm32f10x_spi.c ****     }
 325:../stm32_lib/src/stm32f10x_spi.c ****     else
 326:../stm32_lib/src/stm32f10x_spi.c ****     {
 327:../stm32_lib/src/stm32f10x_spi.c ****       /* MCLK output is disabled */
 328:../stm32_lib/src/stm32f10x_spi.c ****       tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq
 329              		.loc 1 328 0
 330 01e8 7B8D     		ldrh	r3, [r7, #42]
 331 01ea 4FEA4313 		lsl	r3, r3, #5
 332 01ee FA69     		ldr	r2, [r7, #28]
 333 01f0 B2FBF3F2 		udiv	r2, r2, r3
 334 01f4 1346     		mov	r3, r2
 335 01f6 4FEA8303 		lsl	r3, r3, #2
 336 01fa 9B18     		adds	r3, r3, r2
 337 01fc 4FEA4303 		lsl	r3, r3, #1
 338 0200 1A46     		mov	r2, r3
 339 0202 3B68     		ldr	r3, [r7, #0]
 340 0204 9B68     		ldr	r3, [r3, #8]
 341 0206 B2FBF3F3 		udiv	r3, r2, r3
 342 020a 9BB2     		uxth	r3, r3
 343 020c 03F10503 		add	r3, r3, #5
 344 0210 9BB2     		uxth	r3, r3
 345 0212 7B62     		str	r3, [r7, #36]
 346              	.L14:
 329:../stm32_lib/src/stm32f10x_spi.c ****     }
 330:../stm32_lib/src/stm32f10x_spi.c ****     
 331:../stm32_lib/src/stm32f10x_spi.c ****     /* Remove the flaoting point */
 332:../stm32_lib/src/stm32f10x_spi.c ****     tmp = tmp / 10;  
 347              		.loc 1 332 0
 348 0214 7A6A     		ldr	r2, [r7, #36]
 349 0216 4CF6CD43 		movw	r3, #52429
 350 021a CCF6CC43 		movt	r3, 52428
 351 021e A3FB0213 		umull	r1, r3, r3, r2
 352 0222 4FEAD303 		lsr	r3, r3, #3
 353 0226 7B62     		str	r3, [r7, #36]
 333:../stm32_lib/src/stm32f10x_spi.c ****       
 334:../stm32_lib/src/stm32f10x_spi.c ****     /* Check the parity of the divider */
 335:../stm32_lib/src/stm32f10x_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 354              		.loc 1 335 0
 355 0228 7B6A     		ldr	r3, [r7, #36]
 356 022a 9BB2     		uxth	r3, r3
 357 022c 03F00103 		and	r3, r3, #1
 358 0230 BB85     		strh	r3, [r7, #44]	@ movhi
 336:../stm32_lib/src/stm32f10x_spi.c ****    
 337:../stm32_lib/src/stm32f10x_spi.c ****     /* Compute the i2sdiv prescaler */
 338:../stm32_lib/src/stm32f10x_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 359              		.loc 1 338 0
 360 0232 BB8D     		ldrh	r3, [r7, #44]
 361 0234 7A6A     		ldr	r2, [r7, #36]
 362 0236 D31A     		subs	r3, r2, r3
 363 0238 4FEA5303 		lsr	r3, r3, #1
 364 023c FB85     		strh	r3, [r7, #46]	@ movhi
 339:../stm32_lib/src/stm32f10x_spi.c ****    
 340:../stm32_lib/src/stm32f10x_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 341:../stm32_lib/src/stm32f10x_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 365              		.loc 1 341 0
 366 023e BB8D     		ldrh	r3, [r7, #44]	@ movhi
 367 0240 4FEA0323 		lsl	r3, r3, #8
 368 0244 BB85     		strh	r3, [r7, #44]	@ movhi
 369              	.L8:
 342:../stm32_lib/src/stm32f10x_spi.c ****   }
 343:../stm32_lib/src/stm32f10x_spi.c ****   
 344:../stm32_lib/src/stm32f10x_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 345:../stm32_lib/src/stm32f10x_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 370              		.loc 1 345 0
 371 0246 FB8D     		ldrh	r3, [r7, #46]
 372 0248 012B     		cmp	r3, #1
 373 024a 02D9     		bls	.L15
 374              		.loc 1 345 0 is_stmt 0 discriminator 1
 375 024c FB8D     		ldrh	r3, [r7, #46]
 376 024e FF2B     		cmp	r3, #255
 377 0250 05D9     		bls	.L16
 378              	.L15:
 346:../stm32_lib/src/stm32f10x_spi.c ****   {
 347:../stm32_lib/src/stm32f10x_spi.c ****     /* Set the default values */
 348:../stm32_lib/src/stm32f10x_spi.c ****     i2sdiv = 2;
 379              		.loc 1 348 0 is_stmt 1
 380 0252 4FF00203 		mov	r3, #2
 381 0256 FB85     		strh	r3, [r7, #46]	@ movhi
 349:../stm32_lib/src/stm32f10x_spi.c ****     i2sodd = 0;
 382              		.loc 1 349 0
 383 0258 4FF00003 		mov	r3, #0
 384 025c BB85     		strh	r3, [r7, #44]	@ movhi
 385              	.L16:
 350:../stm32_lib/src/stm32f10x_spi.c ****   }
 351:../stm32_lib/src/stm32f10x_spi.c **** 
 352:../stm32_lib/src/stm32f10x_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 353:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 386              		.loc 1 353 0
 387 025e 3B68     		ldr	r3, [r7, #0]
 388 0260 DA88     		ldrh	r2, [r3, #6]
 389 0262 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 390 0264 1343     		orrs	r3, r3, r2
 391 0266 9AB2     		uxth	r2, r3
 392 0268 FB8D     		ldrh	r3, [r7, #46]	@ movhi
 393 026a 1343     		orrs	r3, r3, r2
 394 026c 9AB2     		uxth	r2, r3
 395 026e 7B68     		ldr	r3, [r7, #4]
 396 0270 1A84     		strh	r2, [r3, #32]	@ movhi
 354:../stm32_lib/src/stm32f10x_spi.c ****  
 355:../stm32_lib/src/stm32f10x_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 356:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 397              		.loc 1 356 0
 398 0272 3B68     		ldr	r3, [r7, #0]
 399 0274 1A88     		ldrh	r2, [r3, #0]
 357:../stm32_lib/src/stm32f10x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 400              		.loc 1 357 0
 401 0276 3B68     		ldr	r3, [r7, #0]
 402 0278 5988     		ldrh	r1, [r3, #2]
 403 027a 3B68     		ldr	r3, [r7, #0]
 404 027c 9888     		ldrh	r0, [r3, #4]
 358:../stm32_lib/src/stm32f10x_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 405              		.loc 1 358 0
 406 027e 3B68     		ldr	r3, [r7, #0]
 407 0280 9B89     		ldrh	r3, [r3, #12]
 357:../stm32_lib/src/stm32f10x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 408              		.loc 1 357 0
 409 0282 0343     		orrs	r3, r3, r0
 410 0284 9BB2     		uxth	r3, r3
 411 0286 0B43     		orrs	r3, r3, r1
 412 0288 9BB2     		uxth	r3, r3
 356:../stm32_lib/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 413              		.loc 1 356 0
 414 028a 1343     		orrs	r3, r3, r2
 415 028c 9AB2     		uxth	r2, r3
 416 028e 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 417 0290 1343     		orrs	r3, r3, r2
 418 0292 9BB2     		uxth	r3, r3
 419 0294 43F40063 		orr	r3, r3, #2048
 420 0298 7B84     		strh	r3, [r7, #34]	@ movhi
 359:../stm32_lib/src/stm32f10x_spi.c ****  
 360:../stm32_lib/src/stm32f10x_spi.c ****   /* Write to SPIx I2SCFGR */  
 361:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->I2SCFGR = tmpreg;   
 421              		.loc 1 361 0
 422 029a 7B68     		ldr	r3, [r7, #4]
 423 029c 7A8C     		ldrh	r2, [r7, #34]	@ movhi
 424 029e 9A83     		strh	r2, [r3, #28]	@ movhi
 362:../stm32_lib/src/stm32f10x_spi.c **** }
 425              		.loc 1 362 0
 426 02a0 07F13007 		add	r7, r7, #48
 427 02a4 BD46     		mov	sp, r7
 428 02a6 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE31:
 432              		.align	2
 433              		.global	SPI_StructInit
 434              		.thumb
 435              		.thumb_func
 437              	SPI_StructInit:
 438              	.LFB32:
 363:../stm32_lib/src/stm32f10x_spi.c **** 
 364:../stm32_lib/src/stm32f10x_spi.c **** /**
 365:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 366:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
 367:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 368:../stm32_lib/src/stm32f10x_spi.c ****   */
 369:../stm32_lib/src/stm32f10x_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 370:../stm32_lib/src/stm32f10x_spi.c **** {
 439              		.loc 1 370 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 8
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444 02a8 80B4     		push	{r7}
 445              	.LCFI9:
 446              		.cfi_def_cfa_offset 4
 447              		.cfi_offset 7, -4
 448 02aa 83B0     		sub	sp, sp, #12
 449              	.LCFI10:
 450              		.cfi_def_cfa_offset 16
 451 02ac 00AF     		add	r7, sp, #0
 452              	.LCFI11:
 453              		.cfi_def_cfa_register 7
 454 02ae 7860     		str	r0, [r7, #4]
 371:../stm32_lib/src/stm32f10x_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 372:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the SPI_Direction member */
 373:../stm32_lib/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 455              		.loc 1 373 0
 456 02b0 7B68     		ldr	r3, [r7, #4]
 457 02b2 4FF00002 		mov	r2, #0
 458 02b6 1A80     		strh	r2, [r3, #0]	@ movhi
 374:../stm32_lib/src/stm32f10x_spi.c ****   /* initialize the SPI_Mode member */
 375:../stm32_lib/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 459              		.loc 1 375 0
 460 02b8 7B68     		ldr	r3, [r7, #4]
 461 02ba 4FF00002 		mov	r2, #0
 462 02be 5A80     		strh	r2, [r3, #2]	@ movhi
 376:../stm32_lib/src/stm32f10x_spi.c ****   /* initialize the SPI_DataSize member */
 377:../stm32_lib/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 463              		.loc 1 377 0
 464 02c0 7B68     		ldr	r3, [r7, #4]
 465 02c2 4FF00002 		mov	r2, #0
 466 02c6 9A80     		strh	r2, [r3, #4]	@ movhi
 378:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the SPI_CPOL member */
 379:../stm32_lib/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 467              		.loc 1 379 0
 468 02c8 7B68     		ldr	r3, [r7, #4]
 469 02ca 4FF00002 		mov	r2, #0
 470 02ce DA80     		strh	r2, [r3, #6]	@ movhi
 380:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the SPI_CPHA member */
 381:../stm32_lib/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 471              		.loc 1 381 0
 472 02d0 7B68     		ldr	r3, [r7, #4]
 473 02d2 4FF00002 		mov	r2, #0
 474 02d6 1A81     		strh	r2, [r3, #8]	@ movhi
 382:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the SPI_NSS member */
 383:../stm32_lib/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 475              		.loc 1 383 0
 476 02d8 7B68     		ldr	r3, [r7, #4]
 477 02da 4FF00002 		mov	r2, #0
 478 02de 5A81     		strh	r2, [r3, #10]	@ movhi
 384:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 385:../stm32_lib/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 479              		.loc 1 385 0
 480 02e0 7B68     		ldr	r3, [r7, #4]
 481 02e2 4FF00002 		mov	r2, #0
 482 02e6 9A81     		strh	r2, [r3, #12]	@ movhi
 386:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the SPI_FirstBit member */
 387:../stm32_lib/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 483              		.loc 1 387 0
 484 02e8 7B68     		ldr	r3, [r7, #4]
 485 02ea 4FF00002 		mov	r2, #0
 486 02ee DA81     		strh	r2, [r3, #14]	@ movhi
 388:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 389:../stm32_lib/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 487              		.loc 1 389 0
 488 02f0 7B68     		ldr	r3, [r7, #4]
 489 02f2 4FF00702 		mov	r2, #7
 490 02f6 1A82     		strh	r2, [r3, #16]	@ movhi
 390:../stm32_lib/src/stm32f10x_spi.c **** }
 491              		.loc 1 390 0
 492 02f8 07F10C07 		add	r7, r7, #12
 493 02fc BD46     		mov	sp, r7
 494 02fe 80BC     		pop	{r7}
 495 0300 7047     		bx	lr
 496              		.cfi_endproc
 497              	.LFE32:
 499 0302 00BF     		.align	2
 500              		.global	I2S_StructInit
 501              		.thumb
 502              		.thumb_func
 504              	I2S_StructInit:
 505              	.LFB33:
 391:../stm32_lib/src/stm32f10x_spi.c **** 
 392:../stm32_lib/src/stm32f10x_spi.c **** /**
 393:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 394:../stm32_lib/src/stm32f10x_spi.c ****   * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
 395:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 396:../stm32_lib/src/stm32f10x_spi.c ****   */
 397:../stm32_lib/src/stm32f10x_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 398:../stm32_lib/src/stm32f10x_spi.c **** {
 506              		.loc 1 398 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 8
 509              		@ frame_needed = 1, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 511 0304 80B4     		push	{r7}
 512              	.LCFI12:
 513              		.cfi_def_cfa_offset 4
 514              		.cfi_offset 7, -4
 515 0306 83B0     		sub	sp, sp, #12
 516              	.LCFI13:
 517              		.cfi_def_cfa_offset 16
 518 0308 00AF     		add	r7, sp, #0
 519              	.LCFI14:
 520              		.cfi_def_cfa_register 7
 521 030a 7860     		str	r0, [r7, #4]
 399:../stm32_lib/src/stm32f10x_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 400:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the I2S_Mode member */
 401:../stm32_lib/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 522              		.loc 1 401 0
 523 030c 7B68     		ldr	r3, [r7, #4]
 524 030e 4FF00002 		mov	r2, #0
 525 0312 1A80     		strh	r2, [r3, #0]	@ movhi
 402:../stm32_lib/src/stm32f10x_spi.c ****   
 403:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the I2S_Standard member */
 404:../stm32_lib/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 526              		.loc 1 404 0
 527 0314 7B68     		ldr	r3, [r7, #4]
 528 0316 4FF00002 		mov	r2, #0
 529 031a 5A80     		strh	r2, [r3, #2]	@ movhi
 405:../stm32_lib/src/stm32f10x_spi.c ****   
 406:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the I2S_DataFormat member */
 407:../stm32_lib/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 530              		.loc 1 407 0
 531 031c 7B68     		ldr	r3, [r7, #4]
 532 031e 4FF00002 		mov	r2, #0
 533 0322 9A80     		strh	r2, [r3, #4]	@ movhi
 408:../stm32_lib/src/stm32f10x_spi.c ****   
 409:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 410:../stm32_lib/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 534              		.loc 1 410 0
 535 0324 7B68     		ldr	r3, [r7, #4]
 536 0326 4FF00002 		mov	r2, #0
 537 032a DA80     		strh	r2, [r3, #6]	@ movhi
 411:../stm32_lib/src/stm32f10x_spi.c ****   
 412:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the I2S_AudioFreq member */
 413:../stm32_lib/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 538              		.loc 1 413 0
 539 032c 7B68     		ldr	r3, [r7, #4]
 540 032e 4FF00202 		mov	r2, #2
 541 0332 9A60     		str	r2, [r3, #8]
 414:../stm32_lib/src/stm32f10x_spi.c ****   
 415:../stm32_lib/src/stm32f10x_spi.c ****   /* Initialize the I2S_CPOL member */
 416:../stm32_lib/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 542              		.loc 1 416 0
 543 0334 7B68     		ldr	r3, [r7, #4]
 544 0336 4FF00002 		mov	r2, #0
 545 033a 9A81     		strh	r2, [r3, #12]	@ movhi
 417:../stm32_lib/src/stm32f10x_spi.c **** }
 546              		.loc 1 417 0
 547 033c 07F10C07 		add	r7, r7, #12
 548 0340 BD46     		mov	sp, r7
 549 0342 80BC     		pop	{r7}
 550 0344 7047     		bx	lr
 551              		.cfi_endproc
 552              	.LFE33:
 554 0346 00BF     		.align	2
 555              		.global	SPI_Cmd
 556              		.thumb
 557              		.thumb_func
 559              	SPI_Cmd:
 560              	.LFB34:
 418:../stm32_lib/src/stm32f10x_spi.c **** 
 419:../stm32_lib/src/stm32f10x_spi.c **** /**
 420:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 421:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 422:../stm32_lib/src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 423:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 424:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 425:../stm32_lib/src/stm32f10x_spi.c ****   */
 426:../stm32_lib/src/stm32f10x_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 427:../stm32_lib/src/stm32f10x_spi.c **** {
 561              		.loc 1 427 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0348 80B4     		push	{r7}
 567              	.LCFI15:
 568              		.cfi_def_cfa_offset 4
 569              		.cfi_offset 7, -4
 570 034a 83B0     		sub	sp, sp, #12
 571              	.LCFI16:
 572              		.cfi_def_cfa_offset 16
 573 034c 00AF     		add	r7, sp, #0
 574              	.LCFI17:
 575              		.cfi_def_cfa_register 7
 576 034e 7860     		str	r0, [r7, #4]
 577 0350 0B46     		mov	r3, r1
 578 0352 FB70     		strb	r3, [r7, #3]
 428:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 429:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 430:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 431:../stm32_lib/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 579              		.loc 1 431 0
 580 0354 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 581 0356 002B     		cmp	r3, #0
 582 0358 08D0     		beq	.L20
 432:../stm32_lib/src/stm32f10x_spi.c ****   {
 433:../stm32_lib/src/stm32f10x_spi.c ****     /* Enable the selected SPI peripheral */
 434:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR1 |= CR1_SPE_Set;
 583              		.loc 1 434 0
 584 035a 7B68     		ldr	r3, [r7, #4]
 585 035c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 586 035e 9BB2     		uxth	r3, r3
 587 0360 43F04003 		orr	r3, r3, #64
 588 0364 9AB2     		uxth	r2, r3
 589 0366 7B68     		ldr	r3, [r7, #4]
 590 0368 1A80     		strh	r2, [r3, #0]	@ movhi
 591 036a 07E0     		b	.L19
 592              	.L20:
 435:../stm32_lib/src/stm32f10x_spi.c ****   }
 436:../stm32_lib/src/stm32f10x_spi.c ****   else
 437:../stm32_lib/src/stm32f10x_spi.c ****   {
 438:../stm32_lib/src/stm32f10x_spi.c ****     /* Disable the selected SPI peripheral */
 439:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR1 &= CR1_SPE_Reset;
 593              		.loc 1 439 0
 594 036c 7B68     		ldr	r3, [r7, #4]
 595 036e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 596 0370 9BB2     		uxth	r3, r3
 597 0372 23F04003 		bic	r3, r3, #64
 598 0376 9AB2     		uxth	r2, r3
 599 0378 7B68     		ldr	r3, [r7, #4]
 600 037a 1A80     		strh	r2, [r3, #0]	@ movhi
 601              	.L19:
 440:../stm32_lib/src/stm32f10x_spi.c ****   }
 441:../stm32_lib/src/stm32f10x_spi.c **** }
 602              		.loc 1 441 0
 603 037c 07F10C07 		add	r7, r7, #12
 604 0380 BD46     		mov	sp, r7
 605 0382 80BC     		pop	{r7}
 606 0384 7047     		bx	lr
 607              		.cfi_endproc
 608              	.LFE34:
 610 0386 00BF     		.align	2
 611              		.global	I2S_Cmd
 612              		.thumb
 613              		.thumb_func
 615              	I2S_Cmd:
 616              	.LFB35:
 442:../stm32_lib/src/stm32f10x_spi.c **** 
 443:../stm32_lib/src/stm32f10x_spi.c **** /**
 444:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 445:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral.
 446:../stm32_lib/src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 447:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 448:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 449:../stm32_lib/src/stm32f10x_spi.c ****   */
 450:../stm32_lib/src/stm32f10x_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 451:../stm32_lib/src/stm32f10x_spi.c **** {
 617              		.loc 1 451 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 8
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 622 0388 80B4     		push	{r7}
 623              	.LCFI18:
 624              		.cfi_def_cfa_offset 4
 625              		.cfi_offset 7, -4
 626 038a 83B0     		sub	sp, sp, #12
 627              	.LCFI19:
 628              		.cfi_def_cfa_offset 16
 629 038c 00AF     		add	r7, sp, #0
 630              	.LCFI20:
 631              		.cfi_def_cfa_register 7
 632 038e 7860     		str	r0, [r7, #4]
 633 0390 0B46     		mov	r3, r1
 634 0392 FB70     		strb	r3, [r7, #3]
 452:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 453:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 454:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 455:../stm32_lib/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 635              		.loc 1 455 0
 636 0394 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 637 0396 002B     		cmp	r3, #0
 638 0398 08D0     		beq	.L23
 456:../stm32_lib/src/stm32f10x_spi.c ****   {
 457:../stm32_lib/src/stm32f10x_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 458:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 639              		.loc 1 458 0
 640 039a 7B68     		ldr	r3, [r7, #4]
 641 039c 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 642 039e 9BB2     		uxth	r3, r3
 643 03a0 43F48063 		orr	r3, r3, #1024
 644 03a4 9AB2     		uxth	r2, r3
 645 03a6 7B68     		ldr	r3, [r7, #4]
 646 03a8 9A83     		strh	r2, [r3, #28]	@ movhi
 647 03aa 07E0     		b	.L22
 648              	.L23:
 459:../stm32_lib/src/stm32f10x_spi.c ****   }
 460:../stm32_lib/src/stm32f10x_spi.c ****   else
 461:../stm32_lib/src/stm32f10x_spi.c ****   {
 462:../stm32_lib/src/stm32f10x_spi.c ****     /* Disable the selected SPI peripheral (in I2S mode) */
 463:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
 649              		.loc 1 463 0
 650 03ac 7B68     		ldr	r3, [r7, #4]
 651 03ae 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 652 03b0 9BB2     		uxth	r3, r3
 653 03b2 23F48063 		bic	r3, r3, #1024
 654 03b6 9AB2     		uxth	r2, r3
 655 03b8 7B68     		ldr	r3, [r7, #4]
 656 03ba 9A83     		strh	r2, [r3, #28]	@ movhi
 657              	.L22:
 464:../stm32_lib/src/stm32f10x_spi.c ****   }
 465:../stm32_lib/src/stm32f10x_spi.c **** }
 658              		.loc 1 465 0
 659 03bc 07F10C07 		add	r7, r7, #12
 660 03c0 BD46     		mov	sp, r7
 661 03c2 80BC     		pop	{r7}
 662 03c4 7047     		bx	lr
 663              		.cfi_endproc
 664              	.LFE35:
 666 03c6 00BF     		.align	2
 667              		.global	SPI_I2S_ITConfig
 668              		.thumb
 669              		.thumb_func
 671              	SPI_I2S_ITConfig:
 672              	.LFB36:
 466:../stm32_lib/src/stm32f10x_spi.c **** 
 467:../stm32_lib/src/stm32f10x_spi.c **** /**
 468:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
 469:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 470:../stm32_lib/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 471:../stm32_lib/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 472:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI/I2S interrupt source to be enabled or disabled. 
 473:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 474:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
 475:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
 476:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_ERR: Error interrupt mask
 477:../stm32_lib/src/stm32f10x_spi.c ****   * @param  NewState: new state of the specified SPI/I2S interrupt.
 478:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 479:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 480:../stm32_lib/src/stm32f10x_spi.c ****   */
 481:../stm32_lib/src/stm32f10x_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
 482:../stm32_lib/src/stm32f10x_spi.c **** {
 673              		.loc 1 482 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 16
 676              		@ frame_needed = 1, uses_anonymous_args = 0
 677              		@ link register save eliminated.
 678 03c8 80B4     		push	{r7}
 679              	.LCFI21:
 680              		.cfi_def_cfa_offset 4
 681              		.cfi_offset 7, -4
 682 03ca 85B0     		sub	sp, sp, #20
 683              	.LCFI22:
 684              		.cfi_def_cfa_offset 24
 685 03cc 00AF     		add	r7, sp, #0
 686              	.LCFI23:
 687              		.cfi_def_cfa_register 7
 688 03ce 7860     		str	r0, [r7, #4]
 689 03d0 1346     		mov	r3, r2
 690 03d2 0A46     		mov	r2, r1
 691 03d4 FA70     		strb	r2, [r7, #3]
 692 03d6 BB70     		strb	r3, [r7, #2]
 483:../stm32_lib/src/stm32f10x_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 693              		.loc 1 483 0
 694 03d8 4FF00003 		mov	r3, #0
 695 03dc FB81     		strh	r3, [r7, #14]	@ movhi
 696 03de 4FF00003 		mov	r3, #0
 697 03e2 BB81     		strh	r3, [r7, #12]	@ movhi
 484:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 485:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 486:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 487:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
 488:../stm32_lib/src/stm32f10x_spi.c **** 
 489:../stm32_lib/src/stm32f10x_spi.c ****   /* Get the SPI/I2S IT index */
 490:../stm32_lib/src/stm32f10x_spi.c ****   itpos = SPI_I2S_IT >> 4;
 698              		.loc 1 490 0
 699 03e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 700 03e6 4FEA1313 		lsr	r3, r3, #4
 701 03ea DBB2     		uxtb	r3, r3
 702 03ec FB81     		strh	r3, [r7, #14]	@ movhi
 491:../stm32_lib/src/stm32f10x_spi.c **** 
 492:../stm32_lib/src/stm32f10x_spi.c ****   /* Set the IT mask */
 493:../stm32_lib/src/stm32f10x_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 703              		.loc 1 493 0
 704 03ee FB89     		ldrh	r3, [r7, #14]
 705 03f0 4FF00102 		mov	r2, #1
 706 03f4 02FA03F3 		lsl	r3, r2, r3
 707 03f8 BB81     		strh	r3, [r7, #12]	@ movhi
 494:../stm32_lib/src/stm32f10x_spi.c **** 
 495:../stm32_lib/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 708              		.loc 1 495 0
 709 03fa BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 710 03fc 002B     		cmp	r3, #0
 711 03fe 08D0     		beq	.L26
 496:../stm32_lib/src/stm32f10x_spi.c ****   {
 497:../stm32_lib/src/stm32f10x_spi.c ****     /* Enable the selected SPI/I2S interrupt */
 498:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR2 |= itmask;
 712              		.loc 1 498 0
 713 0400 7B68     		ldr	r3, [r7, #4]
 714 0402 9B88     		ldrh	r3, [r3, #4]	@ movhi
 715 0404 9AB2     		uxth	r2, r3
 716 0406 BB89     		ldrh	r3, [r7, #12]	@ movhi
 717 0408 1343     		orrs	r3, r3, r2
 718 040a 9AB2     		uxth	r2, r3
 719 040c 7B68     		ldr	r3, [r7, #4]
 720 040e 9A80     		strh	r2, [r3, #4]	@ movhi
 721 0410 0AE0     		b	.L25
 722              	.L26:
 499:../stm32_lib/src/stm32f10x_spi.c ****   }
 500:../stm32_lib/src/stm32f10x_spi.c ****   else
 501:../stm32_lib/src/stm32f10x_spi.c ****   {
 502:../stm32_lib/src/stm32f10x_spi.c ****     /* Disable the selected SPI/I2S interrupt */
 503:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 723              		.loc 1 503 0
 724 0412 7B68     		ldr	r3, [r7, #4]
 725 0414 9B88     		ldrh	r3, [r3, #4]	@ movhi
 726 0416 9AB2     		uxth	r2, r3
 727 0418 BB89     		ldrh	r3, [r7, #12]	@ movhi
 728 041a 6FEA0303 		mvn	r3, r3
 729 041e 9BB2     		uxth	r3, r3
 730 0420 1340     		ands	r3, r3, r2
 731 0422 9AB2     		uxth	r2, r3
 732 0424 7B68     		ldr	r3, [r7, #4]
 733 0426 9A80     		strh	r2, [r3, #4]	@ movhi
 734              	.L25:
 504:../stm32_lib/src/stm32f10x_spi.c ****   }
 505:../stm32_lib/src/stm32f10x_spi.c **** }
 735              		.loc 1 505 0
 736 0428 07F11407 		add	r7, r7, #20
 737 042c BD46     		mov	sp, r7
 738 042e 80BC     		pop	{r7}
 739 0430 7047     		bx	lr
 740              		.cfi_endproc
 741              	.LFE36:
 743 0432 00BF     		.align	2
 744              		.global	SPI_I2S_DMACmd
 745              		.thumb
 746              		.thumb_func
 748              	SPI_I2S_DMACmd:
 749              	.LFB37:
 506:../stm32_lib/src/stm32f10x_spi.c **** 
 507:../stm32_lib/src/stm32f10x_spi.c **** /**
 508:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 509:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 510:../stm32_lib/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 511:../stm32_lib/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 512:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI/I2S DMA transfer request to be enabled or disabled. 
 513:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be any combination of the following values:
 514:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 515:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 516:../stm32_lib/src/stm32f10x_spi.c ****   * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
 517:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 518:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 519:../stm32_lib/src/stm32f10x_spi.c ****   */
 520:../stm32_lib/src/stm32f10x_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 521:../stm32_lib/src/stm32f10x_spi.c **** {
 750              		.loc 1 521 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 8
 753              		@ frame_needed = 1, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755 0434 80B4     		push	{r7}
 756              	.LCFI24:
 757              		.cfi_def_cfa_offset 4
 758              		.cfi_offset 7, -4
 759 0436 83B0     		sub	sp, sp, #12
 760              	.LCFI25:
 761              		.cfi_def_cfa_offset 16
 762 0438 00AF     		add	r7, sp, #0
 763              	.LCFI26:
 764              		.cfi_def_cfa_register 7
 765 043a 7860     		str	r0, [r7, #4]
 766 043c 1346     		mov	r3, r2
 767 043e 0A46     		mov	r2, r1	@ movhi
 768 0440 7A80     		strh	r2, [r7, #2]	@ movhi
 769 0442 7B70     		strb	r3, [r7, #1]
 522:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 523:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 524:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 525:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 526:../stm32_lib/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 770              		.loc 1 526 0
 771 0444 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 772 0446 002B     		cmp	r3, #0
 773 0448 08D0     		beq	.L29
 527:../stm32_lib/src/stm32f10x_spi.c ****   {
 528:../stm32_lib/src/stm32f10x_spi.c ****     /* Enable the selected SPI/I2S DMA requests */
 529:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 774              		.loc 1 529 0
 775 044a 7B68     		ldr	r3, [r7, #4]
 776 044c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 777 044e 9AB2     		uxth	r2, r3
 778 0450 7B88     		ldrh	r3, [r7, #2]	@ movhi
 779 0452 1343     		orrs	r3, r3, r2
 780 0454 9AB2     		uxth	r2, r3
 781 0456 7B68     		ldr	r3, [r7, #4]
 782 0458 9A80     		strh	r2, [r3, #4]	@ movhi
 783 045a 0AE0     		b	.L28
 784              	.L29:
 530:../stm32_lib/src/stm32f10x_spi.c ****   }
 531:../stm32_lib/src/stm32f10x_spi.c ****   else
 532:../stm32_lib/src/stm32f10x_spi.c ****   {
 533:../stm32_lib/src/stm32f10x_spi.c ****     /* Disable the selected SPI/I2S DMA requests */
 534:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 785              		.loc 1 534 0
 786 045c 7B68     		ldr	r3, [r7, #4]
 787 045e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 788 0460 9AB2     		uxth	r2, r3
 789 0462 7B88     		ldrh	r3, [r7, #2]	@ movhi
 790 0464 6FEA0303 		mvn	r3, r3
 791 0468 9BB2     		uxth	r3, r3
 792 046a 1340     		ands	r3, r3, r2
 793 046c 9AB2     		uxth	r2, r3
 794 046e 7B68     		ldr	r3, [r7, #4]
 795 0470 9A80     		strh	r2, [r3, #4]	@ movhi
 796              	.L28:
 535:../stm32_lib/src/stm32f10x_spi.c ****   }
 536:../stm32_lib/src/stm32f10x_spi.c **** }
 797              		.loc 1 536 0
 798 0472 07F10C07 		add	r7, r7, #12
 799 0476 BD46     		mov	sp, r7
 800 0478 80BC     		pop	{r7}
 801 047a 7047     		bx	lr
 802              		.cfi_endproc
 803              	.LFE37:
 805              		.align	2
 806              		.global	SPI_I2S_SendData
 807              		.thumb
 808              		.thumb_func
 810              	SPI_I2S_SendData:
 811              	.LFB38:
 537:../stm32_lib/src/stm32f10x_spi.c **** 
 538:../stm32_lib/src/stm32f10x_spi.c **** /**
 539:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 540:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 541:../stm32_lib/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 542:../stm32_lib/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 543:../stm32_lib/src/stm32f10x_spi.c ****   * @param  Data : Data to be transmitted.
 544:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 545:../stm32_lib/src/stm32f10x_spi.c ****   */
 546:../stm32_lib/src/stm32f10x_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 547:../stm32_lib/src/stm32f10x_spi.c **** {
 812              		.loc 1 547 0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 8
 815              		@ frame_needed = 1, uses_anonymous_args = 0
 816              		@ link register save eliminated.
 817 047c 80B4     		push	{r7}
 818              	.LCFI27:
 819              		.cfi_def_cfa_offset 4
 820              		.cfi_offset 7, -4
 821 047e 83B0     		sub	sp, sp, #12
 822              	.LCFI28:
 823              		.cfi_def_cfa_offset 16
 824 0480 00AF     		add	r7, sp, #0
 825              	.LCFI29:
 826              		.cfi_def_cfa_register 7
 827 0482 7860     		str	r0, [r7, #4]
 828 0484 0B46     		mov	r3, r1
 829 0486 7B80     		strh	r3, [r7, #2]	@ movhi
 548:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 549:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 550:../stm32_lib/src/stm32f10x_spi.c ****   
 551:../stm32_lib/src/stm32f10x_spi.c ****   /* Write in the DR register the data to be sent */
 552:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->DR = Data;
 830              		.loc 1 552 0
 831 0488 7B68     		ldr	r3, [r7, #4]
 832 048a 7A88     		ldrh	r2, [r7, #2]	@ movhi
 833 048c 9A81     		strh	r2, [r3, #12]	@ movhi
 553:../stm32_lib/src/stm32f10x_spi.c **** }
 834              		.loc 1 553 0
 835 048e 07F10C07 		add	r7, r7, #12
 836 0492 BD46     		mov	sp, r7
 837 0494 80BC     		pop	{r7}
 838 0496 7047     		bx	lr
 839              		.cfi_endproc
 840              	.LFE38:
 842              		.align	2
 843              		.global	SPI_I2S_ReceiveData
 844              		.thumb
 845              		.thumb_func
 847              	SPI_I2S_ReceiveData:
 848              	.LFB39:
 554:../stm32_lib/src/stm32f10x_spi.c **** 
 555:../stm32_lib/src/stm32f10x_spi.c **** /**
 556:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 557:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 558:../stm32_lib/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 559:../stm32_lib/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 560:../stm32_lib/src/stm32f10x_spi.c ****   * @retval The value of the received data.
 561:../stm32_lib/src/stm32f10x_spi.c ****   */
 562:../stm32_lib/src/stm32f10x_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 563:../stm32_lib/src/stm32f10x_spi.c **** {
 849              		.loc 1 563 0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 8
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853              		@ link register save eliminated.
 854 0498 80B4     		push	{r7}
 855              	.LCFI30:
 856              		.cfi_def_cfa_offset 4
 857              		.cfi_offset 7, -4
 858 049a 83B0     		sub	sp, sp, #12
 859              	.LCFI31:
 860              		.cfi_def_cfa_offset 16
 861 049c 00AF     		add	r7, sp, #0
 862              	.LCFI32:
 863              		.cfi_def_cfa_register 7
 864 049e 7860     		str	r0, [r7, #4]
 564:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 565:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 566:../stm32_lib/src/stm32f10x_spi.c ****   
 567:../stm32_lib/src/stm32f10x_spi.c ****   /* Return the data in the DR register */
 568:../stm32_lib/src/stm32f10x_spi.c ****   return SPIx->DR;
 865              		.loc 1 568 0
 866 04a0 7B68     		ldr	r3, [r7, #4]
 867 04a2 9B89     		ldrh	r3, [r3, #12]	@ movhi
 868 04a4 9BB2     		uxth	r3, r3
 569:../stm32_lib/src/stm32f10x_spi.c **** }
 869              		.loc 1 569 0
 870 04a6 1846     		mov	r0, r3
 871 04a8 07F10C07 		add	r7, r7, #12
 872 04ac BD46     		mov	sp, r7
 873 04ae 80BC     		pop	{r7}
 874 04b0 7047     		bx	lr
 875              		.cfi_endproc
 876              	.LFE39:
 878 04b2 00BF     		.align	2
 879              		.global	SPI_NSSInternalSoftwareConfig
 880              		.thumb
 881              		.thumb_func
 883              	SPI_NSSInternalSoftwareConfig:
 884              	.LFB40:
 570:../stm32_lib/src/stm32f10x_spi.c **** 
 571:../stm32_lib/src/stm32f10x_spi.c **** /**
 572:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 573:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 574:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 575:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 576:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 577:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 578:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 579:../stm32_lib/src/stm32f10x_spi.c ****   */
 580:../stm32_lib/src/stm32f10x_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 581:../stm32_lib/src/stm32f10x_spi.c **** {
 885              		.loc 1 581 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 8
 888              		@ frame_needed = 1, uses_anonymous_args = 0
 889              		@ link register save eliminated.
 890 04b4 80B4     		push	{r7}
 891              	.LCFI33:
 892              		.cfi_def_cfa_offset 4
 893              		.cfi_offset 7, -4
 894 04b6 83B0     		sub	sp, sp, #12
 895              	.LCFI34:
 896              		.cfi_def_cfa_offset 16
 897 04b8 00AF     		add	r7, sp, #0
 898              	.LCFI35:
 899              		.cfi_def_cfa_register 7
 900 04ba 7860     		str	r0, [r7, #4]
 901 04bc 0B46     		mov	r3, r1
 902 04be 7B80     		strh	r3, [r7, #2]	@ movhi
 582:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 583:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 584:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 585:../stm32_lib/src/stm32f10x_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 903              		.loc 1 585 0
 904 04c0 7A88     		ldrh	r2, [r7, #2]
 905 04c2 4FF6FF63 		movw	r3, #65279
 906 04c6 9A42     		cmp	r2, r3
 907 04c8 08D0     		beq	.L34
 586:../stm32_lib/src/stm32f10x_spi.c ****   {
 587:../stm32_lib/src/stm32f10x_spi.c ****     /* Set NSS pin internally by software */
 588:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 908              		.loc 1 588 0
 909 04ca 7B68     		ldr	r3, [r7, #4]
 910 04cc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 911 04ce 9BB2     		uxth	r3, r3
 912 04d0 43F48073 		orr	r3, r3, #256
 913 04d4 9AB2     		uxth	r2, r3
 914 04d6 7B68     		ldr	r3, [r7, #4]
 915 04d8 1A80     		strh	r2, [r3, #0]	@ movhi
 916 04da 07E0     		b	.L33
 917              	.L34:
 589:../stm32_lib/src/stm32f10x_spi.c ****   }
 590:../stm32_lib/src/stm32f10x_spi.c ****   else
 591:../stm32_lib/src/stm32f10x_spi.c ****   {
 592:../stm32_lib/src/stm32f10x_spi.c ****     /* Reset NSS pin internally by software */
 593:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 918              		.loc 1 593 0
 919 04dc 7B68     		ldr	r3, [r7, #4]
 920 04de 1B88     		ldrh	r3, [r3, #0]	@ movhi
 921 04e0 9BB2     		uxth	r3, r3
 922 04e2 23F48073 		bic	r3, r3, #256
 923 04e6 9AB2     		uxth	r2, r3
 924 04e8 7B68     		ldr	r3, [r7, #4]
 925 04ea 1A80     		strh	r2, [r3, #0]	@ movhi
 926              	.L33:
 594:../stm32_lib/src/stm32f10x_spi.c ****   }
 595:../stm32_lib/src/stm32f10x_spi.c **** }
 927              		.loc 1 595 0
 928 04ec 07F10C07 		add	r7, r7, #12
 929 04f0 BD46     		mov	sp, r7
 930 04f2 80BC     		pop	{r7}
 931 04f4 7047     		bx	lr
 932              		.cfi_endproc
 933              	.LFE40:
 935 04f6 00BF     		.align	2
 936              		.global	SPI_SSOutputCmd
 937              		.thumb
 938              		.thumb_func
 940              	SPI_SSOutputCmd:
 941              	.LFB41:
 596:../stm32_lib/src/stm32f10x_spi.c **** 
 597:../stm32_lib/src/stm32f10x_spi.c **** /**
 598:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 599:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 600:../stm32_lib/src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 601:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 602:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 603:../stm32_lib/src/stm32f10x_spi.c ****   */
 604:../stm32_lib/src/stm32f10x_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 605:../stm32_lib/src/stm32f10x_spi.c **** {
 942              		.loc 1 605 0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 8
 945              		@ frame_needed = 1, uses_anonymous_args = 0
 946              		@ link register save eliminated.
 947 04f8 80B4     		push	{r7}
 948              	.LCFI36:
 949              		.cfi_def_cfa_offset 4
 950              		.cfi_offset 7, -4
 951 04fa 83B0     		sub	sp, sp, #12
 952              	.LCFI37:
 953              		.cfi_def_cfa_offset 16
 954 04fc 00AF     		add	r7, sp, #0
 955              	.LCFI38:
 956              		.cfi_def_cfa_register 7
 957 04fe 7860     		str	r0, [r7, #4]
 958 0500 0B46     		mov	r3, r1
 959 0502 FB70     		strb	r3, [r7, #3]
 606:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 607:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 608:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 609:../stm32_lib/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 960              		.loc 1 609 0
 961 0504 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 962 0506 002B     		cmp	r3, #0
 963 0508 08D0     		beq	.L37
 610:../stm32_lib/src/stm32f10x_spi.c ****   {
 611:../stm32_lib/src/stm32f10x_spi.c ****     /* Enable the selected SPI SS output */
 612:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR2 |= CR2_SSOE_Set;
 964              		.loc 1 612 0
 965 050a 7B68     		ldr	r3, [r7, #4]
 966 050c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 967 050e 9BB2     		uxth	r3, r3
 968 0510 43F00403 		orr	r3, r3, #4
 969 0514 9AB2     		uxth	r2, r3
 970 0516 7B68     		ldr	r3, [r7, #4]
 971 0518 9A80     		strh	r2, [r3, #4]	@ movhi
 972 051a 07E0     		b	.L36
 973              	.L37:
 613:../stm32_lib/src/stm32f10x_spi.c ****   }
 614:../stm32_lib/src/stm32f10x_spi.c ****   else
 615:../stm32_lib/src/stm32f10x_spi.c ****   {
 616:../stm32_lib/src/stm32f10x_spi.c ****     /* Disable the selected SPI SS output */
 617:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR2 &= CR2_SSOE_Reset;
 974              		.loc 1 617 0
 975 051c 7B68     		ldr	r3, [r7, #4]
 976 051e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 977 0520 9BB2     		uxth	r3, r3
 978 0522 23F00403 		bic	r3, r3, #4
 979 0526 9AB2     		uxth	r2, r3
 980 0528 7B68     		ldr	r3, [r7, #4]
 981 052a 9A80     		strh	r2, [r3, #4]	@ movhi
 982              	.L36:
 618:../stm32_lib/src/stm32f10x_spi.c ****   }
 619:../stm32_lib/src/stm32f10x_spi.c **** }
 983              		.loc 1 619 0
 984 052c 07F10C07 		add	r7, r7, #12
 985 0530 BD46     		mov	sp, r7
 986 0532 80BC     		pop	{r7}
 987 0534 7047     		bx	lr
 988              		.cfi_endproc
 989              	.LFE41:
 991 0536 00BF     		.align	2
 992              		.global	SPI_DataSizeConfig
 993              		.thumb
 994              		.thumb_func
 996              	SPI_DataSizeConfig:
 997              	.LFB42:
 620:../stm32_lib/src/stm32f10x_spi.c **** 
 621:../stm32_lib/src/stm32f10x_spi.c **** /**
 622:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Configures the data size for the selected SPI.
 623:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 624:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 625:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 626:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_DataSize_16b: Set data frame format to 16bit
 627:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_DataSize_8b: Set data frame format to 8bit
 628:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 629:../stm32_lib/src/stm32f10x_spi.c ****   */
 630:../stm32_lib/src/stm32f10x_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 631:../stm32_lib/src/stm32f10x_spi.c **** {
 998              		.loc 1 631 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 8
 1001              		@ frame_needed = 1, uses_anonymous_args = 0
 1002              		@ link register save eliminated.
 1003 0538 80B4     		push	{r7}
 1004              	.LCFI39:
 1005              		.cfi_def_cfa_offset 4
 1006              		.cfi_offset 7, -4
 1007 053a 83B0     		sub	sp, sp, #12
 1008              	.LCFI40:
 1009              		.cfi_def_cfa_offset 16
 1010 053c 00AF     		add	r7, sp, #0
 1011              	.LCFI41:
 1012              		.cfi_def_cfa_register 7
 1013 053e 7860     		str	r0, [r7, #4]
 1014 0540 0B46     		mov	r3, r1
 1015 0542 7B80     		strh	r3, [r7, #2]	@ movhi
 632:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 633:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 634:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 635:../stm32_lib/src/stm32f10x_spi.c ****   /* Clear DFF bit */
 636:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 1016              		.loc 1 636 0
 1017 0544 7B68     		ldr	r3, [r7, #4]
 1018 0546 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1019 0548 9BB2     		uxth	r3, r3
 1020 054a 23F40063 		bic	r3, r3, #2048
 1021 054e 9AB2     		uxth	r2, r3
 1022 0550 7B68     		ldr	r3, [r7, #4]
 1023 0552 1A80     		strh	r2, [r3, #0]	@ movhi
 637:../stm32_lib/src/stm32f10x_spi.c ****   /* Set new DFF bit value */
 638:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 1024              		.loc 1 638 0
 1025 0554 7B68     		ldr	r3, [r7, #4]
 1026 0556 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1027 0558 9AB2     		uxth	r2, r3
 1028 055a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1029 055c 1343     		orrs	r3, r3, r2
 1030 055e 9AB2     		uxth	r2, r3
 1031 0560 7B68     		ldr	r3, [r7, #4]
 1032 0562 1A80     		strh	r2, [r3, #0]	@ movhi
 639:../stm32_lib/src/stm32f10x_spi.c **** }
 1033              		.loc 1 639 0
 1034 0564 07F10C07 		add	r7, r7, #12
 1035 0568 BD46     		mov	sp, r7
 1036 056a 80BC     		pop	{r7}
 1037 056c 7047     		bx	lr
 1038              		.cfi_endproc
 1039              	.LFE42:
 1041 056e 00BF     		.align	2
 1042              		.global	SPI_TransmitCRC
 1043              		.thumb
 1044              		.thumb_func
 1046              	SPI_TransmitCRC:
 1047              	.LFB43:
 640:../stm32_lib/src/stm32f10x_spi.c **** 
 641:../stm32_lib/src/stm32f10x_spi.c **** /**
 642:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Transmit the SPIx CRC value.
 643:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 644:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 645:../stm32_lib/src/stm32f10x_spi.c ****   */
 646:../stm32_lib/src/stm32f10x_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 647:../stm32_lib/src/stm32f10x_spi.c **** {
 1048              		.loc 1 647 0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 8
 1051              		@ frame_needed = 1, uses_anonymous_args = 0
 1052              		@ link register save eliminated.
 1053 0570 80B4     		push	{r7}
 1054              	.LCFI42:
 1055              		.cfi_def_cfa_offset 4
 1056              		.cfi_offset 7, -4
 1057 0572 83B0     		sub	sp, sp, #12
 1058              	.LCFI43:
 1059              		.cfi_def_cfa_offset 16
 1060 0574 00AF     		add	r7, sp, #0
 1061              	.LCFI44:
 1062              		.cfi_def_cfa_register 7
 1063 0576 7860     		str	r0, [r7, #4]
 648:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 649:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 650:../stm32_lib/src/stm32f10x_spi.c ****   
 651:../stm32_lib/src/stm32f10x_spi.c ****   /* Enable the selected SPI CRC transmission */
 652:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->CR1 |= CR1_CRCNext_Set;
 1064              		.loc 1 652 0
 1065 0578 7B68     		ldr	r3, [r7, #4]
 1066 057a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1067 057c 9BB2     		uxth	r3, r3
 1068 057e 43F48053 		orr	r3, r3, #4096
 1069 0582 9AB2     		uxth	r2, r3
 1070 0584 7B68     		ldr	r3, [r7, #4]
 1071 0586 1A80     		strh	r2, [r3, #0]	@ movhi
 653:../stm32_lib/src/stm32f10x_spi.c **** }
 1072              		.loc 1 653 0
 1073 0588 07F10C07 		add	r7, r7, #12
 1074 058c BD46     		mov	sp, r7
 1075 058e 80BC     		pop	{r7}
 1076 0590 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE43:
 1080 0592 00BF     		.align	2
 1081              		.global	SPI_CalculateCRC
 1082              		.thumb
 1083              		.thumb_func
 1085              	SPI_CalculateCRC:
 1086              	.LFB44:
 654:../stm32_lib/src/stm32f10x_spi.c **** 
 655:../stm32_lib/src/stm32f10x_spi.c **** /**
 656:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transfered bytes.
 657:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 658:../stm32_lib/src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 659:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 660:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 661:../stm32_lib/src/stm32f10x_spi.c ****   */
 662:../stm32_lib/src/stm32f10x_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 663:../stm32_lib/src/stm32f10x_spi.c **** {
 1087              		.loc 1 663 0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 8
 1090              		@ frame_needed = 1, uses_anonymous_args = 0
 1091              		@ link register save eliminated.
 1092 0594 80B4     		push	{r7}
 1093              	.LCFI45:
 1094              		.cfi_def_cfa_offset 4
 1095              		.cfi_offset 7, -4
 1096 0596 83B0     		sub	sp, sp, #12
 1097              	.LCFI46:
 1098              		.cfi_def_cfa_offset 16
 1099 0598 00AF     		add	r7, sp, #0
 1100              	.LCFI47:
 1101              		.cfi_def_cfa_register 7
 1102 059a 7860     		str	r0, [r7, #4]
 1103 059c 0B46     		mov	r3, r1
 1104 059e FB70     		strb	r3, [r7, #3]
 664:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 665:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 666:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 667:../stm32_lib/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 1105              		.loc 1 667 0
 1106 05a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1107 05a2 002B     		cmp	r3, #0
 1108 05a4 08D0     		beq	.L42
 668:../stm32_lib/src/stm32f10x_spi.c ****   {
 669:../stm32_lib/src/stm32f10x_spi.c ****     /* Enable the selected SPI CRC calculation */
 670:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR1 |= CR1_CRCEN_Set;
 1109              		.loc 1 670 0
 1110 05a6 7B68     		ldr	r3, [r7, #4]
 1111 05a8 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1112 05aa 9BB2     		uxth	r3, r3
 1113 05ac 43F40053 		orr	r3, r3, #8192
 1114 05b0 9AB2     		uxth	r2, r3
 1115 05b2 7B68     		ldr	r3, [r7, #4]
 1116 05b4 1A80     		strh	r2, [r3, #0]	@ movhi
 1117 05b6 07E0     		b	.L41
 1118              	.L42:
 671:../stm32_lib/src/stm32f10x_spi.c ****   }
 672:../stm32_lib/src/stm32f10x_spi.c ****   else
 673:../stm32_lib/src/stm32f10x_spi.c ****   {
 674:../stm32_lib/src/stm32f10x_spi.c ****     /* Disable the selected SPI CRC calculation */
 675:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR1 &= CR1_CRCEN_Reset;
 1119              		.loc 1 675 0
 1120 05b8 7B68     		ldr	r3, [r7, #4]
 1121 05ba 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1122 05bc 9BB2     		uxth	r3, r3
 1123 05be 23F40053 		bic	r3, r3, #8192
 1124 05c2 9AB2     		uxth	r2, r3
 1125 05c4 7B68     		ldr	r3, [r7, #4]
 1126 05c6 1A80     		strh	r2, [r3, #0]	@ movhi
 1127              	.L41:
 676:../stm32_lib/src/stm32f10x_spi.c ****   }
 677:../stm32_lib/src/stm32f10x_spi.c **** }
 1128              		.loc 1 677 0
 1129 05c8 07F10C07 		add	r7, r7, #12
 1130 05cc BD46     		mov	sp, r7
 1131 05ce 80BC     		pop	{r7}
 1132 05d0 7047     		bx	lr
 1133              		.cfi_endproc
 1134              	.LFE44:
 1136 05d2 00BF     		.align	2
 1137              		.global	SPI_GetCRC
 1138              		.thumb
 1139              		.thumb_func
 1141              	SPI_GetCRC:
 1142              	.LFB45:
 678:../stm32_lib/src/stm32f10x_spi.c **** 
 679:../stm32_lib/src/stm32f10x_spi.c **** /**
 680:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 681:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 682:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 683:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 684:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_CRC_Tx: Selects Tx CRC register
 685:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_CRC_Rx: Selects Rx CRC register
 686:../stm32_lib/src/stm32f10x_spi.c ****   * @retval The selected CRC register value..
 687:../stm32_lib/src/stm32f10x_spi.c ****   */
 688:../stm32_lib/src/stm32f10x_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 689:../stm32_lib/src/stm32f10x_spi.c **** {
 1143              		.loc 1 689 0
 1144              		.cfi_startproc
 1145              		@ args = 0, pretend = 0, frame = 16
 1146              		@ frame_needed = 1, uses_anonymous_args = 0
 1147              		@ link register save eliminated.
 1148 05d4 80B4     		push	{r7}
 1149              	.LCFI48:
 1150              		.cfi_def_cfa_offset 4
 1151              		.cfi_offset 7, -4
 1152 05d6 85B0     		sub	sp, sp, #20
 1153              	.LCFI49:
 1154              		.cfi_def_cfa_offset 24
 1155 05d8 00AF     		add	r7, sp, #0
 1156              	.LCFI50:
 1157              		.cfi_def_cfa_register 7
 1158 05da 7860     		str	r0, [r7, #4]
 1159 05dc 0B46     		mov	r3, r1
 1160 05de FB70     		strb	r3, [r7, #3]
 690:../stm32_lib/src/stm32f10x_spi.c ****   uint16_t crcreg = 0;
 1161              		.loc 1 690 0
 1162 05e0 4FF00003 		mov	r3, #0
 1163 05e4 FB81     		strh	r3, [r7, #14]	@ movhi
 691:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 692:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 693:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 694:../stm32_lib/src/stm32f10x_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1164              		.loc 1 694 0
 1165 05e6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1166 05e8 012B     		cmp	r3, #1
 1167 05ea 03D0     		beq	.L45
 695:../stm32_lib/src/stm32f10x_spi.c ****   {
 696:../stm32_lib/src/stm32f10x_spi.c ****     /* Get the Tx CRC register */
 697:../stm32_lib/src/stm32f10x_spi.c ****     crcreg = SPIx->TXCRCR;
 1168              		.loc 1 697 0
 1169 05ec 7B68     		ldr	r3, [r7, #4]
 1170 05ee 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1171 05f0 FB81     		strh	r3, [r7, #14]	@ movhi
 1172 05f2 02E0     		b	.L46
 1173              	.L45:
 698:../stm32_lib/src/stm32f10x_spi.c ****   }
 699:../stm32_lib/src/stm32f10x_spi.c ****   else
 700:../stm32_lib/src/stm32f10x_spi.c ****   {
 701:../stm32_lib/src/stm32f10x_spi.c ****     /* Get the Rx CRC register */
 702:../stm32_lib/src/stm32f10x_spi.c ****     crcreg = SPIx->RXCRCR;
 1174              		.loc 1 702 0
 1175 05f4 7B68     		ldr	r3, [r7, #4]
 1176 05f6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1177 05f8 FB81     		strh	r3, [r7, #14]	@ movhi
 1178              	.L46:
 703:../stm32_lib/src/stm32f10x_spi.c ****   }
 704:../stm32_lib/src/stm32f10x_spi.c ****   /* Return the selected CRC register */
 705:../stm32_lib/src/stm32f10x_spi.c ****   return crcreg;
 1179              		.loc 1 705 0
 1180 05fa FB89     		ldrh	r3, [r7, #14]
 706:../stm32_lib/src/stm32f10x_spi.c **** }
 1181              		.loc 1 706 0
 1182 05fc 1846     		mov	r0, r3
 1183 05fe 07F11407 		add	r7, r7, #20
 1184 0602 BD46     		mov	sp, r7
 1185 0604 80BC     		pop	{r7}
 1186 0606 7047     		bx	lr
 1187              		.cfi_endproc
 1188              	.LFE45:
 1190              		.align	2
 1191              		.global	SPI_GetCRCPolynomial
 1192              		.thumb
 1193              		.thumb_func
 1195              	SPI_GetCRCPolynomial:
 1196              	.LFB46:
 707:../stm32_lib/src/stm32f10x_spi.c **** 
 708:../stm32_lib/src/stm32f10x_spi.c **** /**
 709:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 710:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 711:../stm32_lib/src/stm32f10x_spi.c ****   * @retval The CRC Polynomial register value.
 712:../stm32_lib/src/stm32f10x_spi.c ****   */
 713:../stm32_lib/src/stm32f10x_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 714:../stm32_lib/src/stm32f10x_spi.c **** {
 1197              		.loc 1 714 0
 1198              		.cfi_startproc
 1199              		@ args = 0, pretend = 0, frame = 8
 1200              		@ frame_needed = 1, uses_anonymous_args = 0
 1201              		@ link register save eliminated.
 1202 0608 80B4     		push	{r7}
 1203              	.LCFI51:
 1204              		.cfi_def_cfa_offset 4
 1205              		.cfi_offset 7, -4
 1206 060a 83B0     		sub	sp, sp, #12
 1207              	.LCFI52:
 1208              		.cfi_def_cfa_offset 16
 1209 060c 00AF     		add	r7, sp, #0
 1210              	.LCFI53:
 1211              		.cfi_def_cfa_register 7
 1212 060e 7860     		str	r0, [r7, #4]
 715:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 716:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 717:../stm32_lib/src/stm32f10x_spi.c ****   
 718:../stm32_lib/src/stm32f10x_spi.c ****   /* Return the CRC polynomial register */
 719:../stm32_lib/src/stm32f10x_spi.c ****   return SPIx->CRCPR;
 1213              		.loc 1 719 0
 1214 0610 7B68     		ldr	r3, [r7, #4]
 1215 0612 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1216 0614 9BB2     		uxth	r3, r3
 720:../stm32_lib/src/stm32f10x_spi.c **** }
 1217              		.loc 1 720 0
 1218 0616 1846     		mov	r0, r3
 1219 0618 07F10C07 		add	r7, r7, #12
 1220 061c BD46     		mov	sp, r7
 1221 061e 80BC     		pop	{r7}
 1222 0620 7047     		bx	lr
 1223              		.cfi_endproc
 1224              	.LFE46:
 1226 0622 00BF     		.align	2
 1227              		.global	SPI_BiDirectionalLineConfig
 1228              		.thumb
 1229              		.thumb_func
 1231              	SPI_BiDirectionalLineConfig:
 1232              	.LFB47:
 721:../stm32_lib/src/stm32f10x_spi.c **** 
 722:../stm32_lib/src/stm32f10x_spi.c **** /**
 723:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Selects the data transfer direction in bi-directional mode for the specified SPI.
 724:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 725:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bi-directional mode. 
 726:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 727:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_Direction_Tx: Selects Tx transmission direction
 728:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_Direction_Rx: Selects Rx receive direction
 729:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 730:../stm32_lib/src/stm32f10x_spi.c ****   */
 731:../stm32_lib/src/stm32f10x_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 732:../stm32_lib/src/stm32f10x_spi.c **** {
 1233              		.loc 1 732 0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 8
 1236              		@ frame_needed = 1, uses_anonymous_args = 0
 1237              		@ link register save eliminated.
 1238 0624 80B4     		push	{r7}
 1239              	.LCFI54:
 1240              		.cfi_def_cfa_offset 4
 1241              		.cfi_offset 7, -4
 1242 0626 83B0     		sub	sp, sp, #12
 1243              	.LCFI55:
 1244              		.cfi_def_cfa_offset 16
 1245 0628 00AF     		add	r7, sp, #0
 1246              	.LCFI56:
 1247              		.cfi_def_cfa_register 7
 1248 062a 7860     		str	r0, [r7, #4]
 1249 062c 0B46     		mov	r3, r1
 1250 062e 7B80     		strh	r3, [r7, #2]	@ movhi
 733:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 734:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 735:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 736:../stm32_lib/src/stm32f10x_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 1251              		.loc 1 736 0
 1252 0630 7B88     		ldrh	r3, [r7, #2]
 1253 0632 B3F5804F 		cmp	r3, #16384
 1254 0636 08D1     		bne	.L49
 737:../stm32_lib/src/stm32f10x_spi.c ****   {
 738:../stm32_lib/src/stm32f10x_spi.c ****     /* Set the Tx only mode */
 739:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 1255              		.loc 1 739 0
 1256 0638 7B68     		ldr	r3, [r7, #4]
 1257 063a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1258 063c 9BB2     		uxth	r3, r3
 1259 063e 43F48043 		orr	r3, r3, #16384
 1260 0642 9AB2     		uxth	r2, r3
 1261 0644 7B68     		ldr	r3, [r7, #4]
 1262 0646 1A80     		strh	r2, [r3, #0]	@ movhi
 1263 0648 07E0     		b	.L48
 1264              	.L49:
 740:../stm32_lib/src/stm32f10x_spi.c ****   }
 741:../stm32_lib/src/stm32f10x_spi.c ****   else
 742:../stm32_lib/src/stm32f10x_spi.c ****   {
 743:../stm32_lib/src/stm32f10x_spi.c ****     /* Set the Rx only mode */
 744:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 1265              		.loc 1 744 0
 1266 064a 7B68     		ldr	r3, [r7, #4]
 1267 064c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1268 064e 9BB2     		uxth	r3, r3
 1269 0650 23F48043 		bic	r3, r3, #16384
 1270 0654 9AB2     		uxth	r2, r3
 1271 0656 7B68     		ldr	r3, [r7, #4]
 1272 0658 1A80     		strh	r2, [r3, #0]	@ movhi
 1273              	.L48:
 745:../stm32_lib/src/stm32f10x_spi.c ****   }
 746:../stm32_lib/src/stm32f10x_spi.c **** }
 1274              		.loc 1 746 0
 1275 065a 07F10C07 		add	r7, r7, #12
 1276 065e BD46     		mov	sp, r7
 1277 0660 80BC     		pop	{r7}
 1278 0662 7047     		bx	lr
 1279              		.cfi_endproc
 1280              	.LFE47:
 1282              		.align	2
 1283              		.global	SPI_I2S_GetFlagStatus
 1284              		.thumb
 1285              		.thumb_func
 1287              	SPI_I2S_GetFlagStatus:
 1288              	.LFB48:
 747:../stm32_lib/src/stm32f10x_spi.c **** 
 748:../stm32_lib/src/stm32f10x_spi.c **** /**
 749:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Checks whether the specified SPI/I2S flag is set or not.
 750:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 751:../stm32_lib/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 752:../stm32_lib/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 753:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI/I2S flag to check. 
 754:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 755:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
 756:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
 757:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_BSY: Busy flag.
 758:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_OVR: Overrun flag.
 759:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_FLAG_MODF: Mode Fault flag.
 760:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_FLAG_CRCERR: CRC Error flag.
 761:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg I2S_FLAG_UDR: Underrun Error flag.
 762:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
 763:../stm32_lib/src/stm32f10x_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
 764:../stm32_lib/src/stm32f10x_spi.c ****   */
 765:../stm32_lib/src/stm32f10x_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
 766:../stm32_lib/src/stm32f10x_spi.c **** {
 1289              		.loc 1 766 0
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 16
 1292              		@ frame_needed = 1, uses_anonymous_args = 0
 1293              		@ link register save eliminated.
 1294 0664 80B4     		push	{r7}
 1295              	.LCFI57:
 1296              		.cfi_def_cfa_offset 4
 1297              		.cfi_offset 7, -4
 1298 0666 85B0     		sub	sp, sp, #20
 1299              	.LCFI58:
 1300              		.cfi_def_cfa_offset 24
 1301 0668 00AF     		add	r7, sp, #0
 1302              	.LCFI59:
 1303              		.cfi_def_cfa_register 7
 1304 066a 7860     		str	r0, [r7, #4]
 1305 066c 0B46     		mov	r3, r1
 1306 066e 7B80     		strh	r3, [r7, #2]	@ movhi
 767:../stm32_lib/src/stm32f10x_spi.c ****   FlagStatus bitstatus = RESET;
 1307              		.loc 1 767 0
 1308 0670 4FF00003 		mov	r3, #0
 1309 0674 FB73     		strb	r3, [r7, #15]
 768:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 769:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 770:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 771:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the status of the specified SPI/I2S flag */
 772:../stm32_lib/src/stm32f10x_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1310              		.loc 1 772 0
 1311 0676 7B68     		ldr	r3, [r7, #4]
 1312 0678 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1313 067a 9AB2     		uxth	r2, r3
 1314 067c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1315 067e 1340     		ands	r3, r3, r2
 1316 0680 9BB2     		uxth	r3, r3
 1317 0682 002B     		cmp	r3, #0
 1318 0684 03D0     		beq	.L52
 773:../stm32_lib/src/stm32f10x_spi.c ****   {
 774:../stm32_lib/src/stm32f10x_spi.c ****     /* SPI_I2S_FLAG is set */
 775:../stm32_lib/src/stm32f10x_spi.c ****     bitstatus = SET;
 1319              		.loc 1 775 0
 1320 0686 4FF00103 		mov	r3, #1
 1321 068a FB73     		strb	r3, [r7, #15]
 1322 068c 02E0     		b	.L53
 1323              	.L52:
 776:../stm32_lib/src/stm32f10x_spi.c ****   }
 777:../stm32_lib/src/stm32f10x_spi.c ****   else
 778:../stm32_lib/src/stm32f10x_spi.c ****   {
 779:../stm32_lib/src/stm32f10x_spi.c ****     /* SPI_I2S_FLAG is reset */
 780:../stm32_lib/src/stm32f10x_spi.c ****     bitstatus = RESET;
 1324              		.loc 1 780 0
 1325 068e 4FF00003 		mov	r3, #0
 1326 0692 FB73     		strb	r3, [r7, #15]
 1327              	.L53:
 781:../stm32_lib/src/stm32f10x_spi.c ****   }
 782:../stm32_lib/src/stm32f10x_spi.c ****   /* Return the SPI_I2S_FLAG status */
 783:../stm32_lib/src/stm32f10x_spi.c ****   return  bitstatus;
 1328              		.loc 1 783 0
 1329 0694 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 784:../stm32_lib/src/stm32f10x_spi.c **** }
 1330              		.loc 1 784 0
 1331 0696 1846     		mov	r0, r3
 1332 0698 07F11407 		add	r7, r7, #20
 1333 069c BD46     		mov	sp, r7
 1334 069e 80BC     		pop	{r7}
 1335 06a0 7047     		bx	lr
 1336              		.cfi_endproc
 1337              	.LFE48:
 1339 06a2 00BF     		.align	2
 1340              		.global	SPI_I2S_ClearFlag
 1341              		.thumb
 1342              		.thumb_func
 1344              	SPI_I2S_ClearFlag:
 1345              	.LFB49:
 785:../stm32_lib/src/stm32f10x_spi.c **** 
 786:../stm32_lib/src/stm32f10x_spi.c **** /**
 787:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
 788:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 789:../stm32_lib/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 790:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
 791:../stm32_lib/src/stm32f10x_spi.c ****   *   This function clears only CRCERR flag.
 792:../stm32_lib/src/stm32f10x_spi.c ****   * @note
 793:../stm32_lib/src/stm32f10x_spi.c ****   *   - OVR (OverRun error) flag is cleared by software sequence: a read 
 794:../stm32_lib/src/stm32f10x_spi.c ****   *     operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
 795:../stm32_lib/src/stm32f10x_spi.c ****   *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
 796:../stm32_lib/src/stm32f10x_spi.c ****   *   - UDR (UnderRun error) flag is cleared by a read operation to 
 797:../stm32_lib/src/stm32f10x_spi.c ****   *     SPI_SR register (SPI_I2S_GetFlagStatus()).
 798:../stm32_lib/src/stm32f10x_spi.c ****   *   - MODF (Mode Fault) flag is cleared by software sequence: a read/write 
 799:../stm32_lib/src/stm32f10x_spi.c ****   *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
 800:../stm32_lib/src/stm32f10x_spi.c ****   *     write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
 801:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 802:../stm32_lib/src/stm32f10x_spi.c ****   */
 803:../stm32_lib/src/stm32f10x_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
 804:../stm32_lib/src/stm32f10x_spi.c **** {
 1346              		.loc 1 804 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 8
 1349              		@ frame_needed = 1, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
 1351 06a4 80B4     		push	{r7}
 1352              	.LCFI60:
 1353              		.cfi_def_cfa_offset 4
 1354              		.cfi_offset 7, -4
 1355 06a6 83B0     		sub	sp, sp, #12
 1356              	.LCFI61:
 1357              		.cfi_def_cfa_offset 16
 1358 06a8 00AF     		add	r7, sp, #0
 1359              	.LCFI62:
 1360              		.cfi_def_cfa_register 7
 1361 06aa 7860     		str	r0, [r7, #4]
 1362 06ac 0B46     		mov	r3, r1
 1363 06ae 7B80     		strh	r3, [r7, #2]	@ movhi
 805:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 806:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 807:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 808:../stm32_lib/src/stm32f10x_spi.c ****     
 809:../stm32_lib/src/stm32f10x_spi.c ****     /* Clear the selected SPI CRC Error (CRCERR) flag */
 810:../stm32_lib/src/stm32f10x_spi.c ****     SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1364              		.loc 1 810 0
 1365 06b0 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1366 06b2 6FEA0303 		mvn	r3, r3
 1367 06b6 9AB2     		uxth	r2, r3
 1368 06b8 7B68     		ldr	r3, [r7, #4]
 1369 06ba 1A81     		strh	r2, [r3, #8]	@ movhi
 811:../stm32_lib/src/stm32f10x_spi.c **** }
 1370              		.loc 1 811 0
 1371 06bc 07F10C07 		add	r7, r7, #12
 1372 06c0 BD46     		mov	sp, r7
 1373 06c2 80BC     		pop	{r7}
 1374 06c4 7047     		bx	lr
 1375              		.cfi_endproc
 1376              	.LFE49:
 1378 06c6 00BF     		.align	2
 1379              		.global	SPI_I2S_GetITStatus
 1380              		.thumb
 1381              		.thumb_func
 1383              	SPI_I2S_GetITStatus:
 1384              	.LFB50:
 812:../stm32_lib/src/stm32f10x_spi.c **** 
 813:../stm32_lib/src/stm32f10x_spi.c **** /**
 814:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Checks whether the specified SPI/I2S interrupt has occurred or not.
 815:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 816:../stm32_lib/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 817:../stm32_lib/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 818:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI/I2S interrupt source to check. 
 819:../stm32_lib/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 820:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
 821:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
 822:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_OVR: Overrun interrupt.
 823:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_IT_MODF: Mode Fault interrupt.
 824:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg SPI_IT_CRCERR: CRC Error interrupt.
 825:../stm32_lib/src/stm32f10x_spi.c ****   *     @arg I2S_IT_UDR: Underrun Error interrupt.
 826:../stm32_lib/src/stm32f10x_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
 827:../stm32_lib/src/stm32f10x_spi.c ****   */
 828:../stm32_lib/src/stm32f10x_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 829:../stm32_lib/src/stm32f10x_spi.c **** {
 1385              		.loc 1 829 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 16
 1388              		@ frame_needed = 1, uses_anonymous_args = 0
 1389              		@ link register save eliminated.
 1390 06c8 80B4     		push	{r7}
 1391              	.LCFI63:
 1392              		.cfi_def_cfa_offset 4
 1393              		.cfi_offset 7, -4
 1394 06ca 85B0     		sub	sp, sp, #20
 1395              	.LCFI64:
 1396              		.cfi_def_cfa_offset 24
 1397 06cc 00AF     		add	r7, sp, #0
 1398              	.LCFI65:
 1399              		.cfi_def_cfa_register 7
 1400 06ce 7860     		str	r0, [r7, #4]
 1401 06d0 0B46     		mov	r3, r1
 1402 06d2 FB70     		strb	r3, [r7, #3]
 830:../stm32_lib/src/stm32f10x_spi.c ****   ITStatus bitstatus = RESET;
 1403              		.loc 1 830 0
 1404 06d4 4FF00003 		mov	r3, #0
 1405 06d8 FB73     		strb	r3, [r7, #15]
 831:../stm32_lib/src/stm32f10x_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 1406              		.loc 1 831 0
 1407 06da 4FF00003 		mov	r3, #0
 1408 06de BB81     		strh	r3, [r7, #12]	@ movhi
 1409 06e0 4FF00003 		mov	r3, #0
 1410 06e4 7B81     		strh	r3, [r7, #10]	@ movhi
 1411 06e6 4FF00003 		mov	r3, #0
 1412 06ea 3B81     		strh	r3, [r7, #8]	@ movhi
 832:../stm32_lib/src/stm32f10x_spi.c **** 
 833:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 834:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 835:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
 836:../stm32_lib/src/stm32f10x_spi.c **** 
 837:../stm32_lib/src/stm32f10x_spi.c ****   /* Get the SPI/I2S IT index */
 838:../stm32_lib/src/stm32f10x_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1413              		.loc 1 838 0
 1414 06ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1415 06ee 03F00F03 		and	r3, r3, #15
 1416 06f2 4FF00102 		mov	r2, #1
 1417 06f6 02FA03F3 		lsl	r3, r2, r3
 1418 06fa BB81     		strh	r3, [r7, #12]	@ movhi
 839:../stm32_lib/src/stm32f10x_spi.c **** 
 840:../stm32_lib/src/stm32f10x_spi.c ****   /* Get the SPI/I2S IT mask */
 841:../stm32_lib/src/stm32f10x_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1419              		.loc 1 841 0
 1420 06fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1421 06fe 4FEA1313 		lsr	r3, r3, #4
 1422 0702 DBB2     		uxtb	r3, r3
 1423 0704 7B81     		strh	r3, [r7, #10]	@ movhi
 842:../stm32_lib/src/stm32f10x_spi.c **** 
 843:../stm32_lib/src/stm32f10x_spi.c ****   /* Set the IT mask */
 844:../stm32_lib/src/stm32f10x_spi.c ****   itmask = 0x01 << itmask;
 1424              		.loc 1 844 0
 1425 0706 7B89     		ldrh	r3, [r7, #10]
 1426 0708 4FF00102 		mov	r2, #1
 1427 070c 02FA03F3 		lsl	r3, r2, r3
 1428 0710 7B81     		strh	r3, [r7, #10]	@ movhi
 845:../stm32_lib/src/stm32f10x_spi.c **** 
 846:../stm32_lib/src/stm32f10x_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
 847:../stm32_lib/src/stm32f10x_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1429              		.loc 1 847 0
 1430 0712 7B68     		ldr	r3, [r7, #4]
 1431 0714 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1432 0716 9AB2     		uxth	r2, r3
 1433 0718 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1434 071a 1340     		ands	r3, r3, r2
 1435 071c 3B81     		strh	r3, [r7, #8]	@ movhi
 848:../stm32_lib/src/stm32f10x_spi.c **** 
 849:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the status of the specified SPI/I2S interrupt */
 850:../stm32_lib/src/stm32f10x_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1436              		.loc 1 850 0
 1437 071e 7B68     		ldr	r3, [r7, #4]
 1438 0720 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1439 0722 9AB2     		uxth	r2, r3
 1440 0724 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1441 0726 1340     		ands	r3, r3, r2
 1442 0728 9BB2     		uxth	r3, r3
 1443 072a 002B     		cmp	r3, #0
 1444 072c 06D0     		beq	.L56
 1445              		.loc 1 850 0 is_stmt 0 discriminator 1
 1446 072e 3B89     		ldrh	r3, [r7, #8]
 1447 0730 002B     		cmp	r3, #0
 1448 0732 03D0     		beq	.L56
 851:../stm32_lib/src/stm32f10x_spi.c ****   {
 852:../stm32_lib/src/stm32f10x_spi.c ****     /* SPI_I2S_IT is set */
 853:../stm32_lib/src/stm32f10x_spi.c ****     bitstatus = SET;
 1449              		.loc 1 853 0 is_stmt 1
 1450 0734 4FF00103 		mov	r3, #1
 1451 0738 FB73     		strb	r3, [r7, #15]
 1452 073a 02E0     		b	.L57
 1453              	.L56:
 854:../stm32_lib/src/stm32f10x_spi.c ****   }
 855:../stm32_lib/src/stm32f10x_spi.c ****   else
 856:../stm32_lib/src/stm32f10x_spi.c ****   {
 857:../stm32_lib/src/stm32f10x_spi.c ****     /* SPI_I2S_IT is reset */
 858:../stm32_lib/src/stm32f10x_spi.c ****     bitstatus = RESET;
 1454              		.loc 1 858 0
 1455 073c 4FF00003 		mov	r3, #0
 1456 0740 FB73     		strb	r3, [r7, #15]
 1457              	.L57:
 859:../stm32_lib/src/stm32f10x_spi.c ****   }
 860:../stm32_lib/src/stm32f10x_spi.c ****   /* Return the SPI_I2S_IT status */
 861:../stm32_lib/src/stm32f10x_spi.c ****   return bitstatus;
 1458              		.loc 1 861 0
 1459 0742 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:../stm32_lib/src/stm32f10x_spi.c **** }
 1460              		.loc 1 862 0
 1461 0744 1846     		mov	r0, r3
 1462 0746 07F11407 		add	r7, r7, #20
 1463 074a BD46     		mov	sp, r7
 1464 074c 80BC     		pop	{r7}
 1465 074e 7047     		bx	lr
 1466              		.cfi_endproc
 1467              	.LFE50:
 1469              		.align	2
 1470              		.global	SPI_I2S_ClearITPendingBit
 1471              		.thumb
 1472              		.thumb_func
 1474              	SPI_I2S_ClearITPendingBit:
 1475              	.LFB51:
 863:../stm32_lib/src/stm32f10x_spi.c **** 
 864:../stm32_lib/src/stm32f10x_spi.c **** /**
 865:../stm32_lib/src/stm32f10x_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
 866:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 867:../stm32_lib/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 868:../stm32_lib/src/stm32f10x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
 869:../stm32_lib/src/stm32f10x_spi.c ****   *   This function clears only CRCERR intetrrupt pending bit.   
 870:../stm32_lib/src/stm32f10x_spi.c ****   * @note
 871:../stm32_lib/src/stm32f10x_spi.c ****   *   - OVR (OverRun Error) interrupt pending bit is cleared by software 
 872:../stm32_lib/src/stm32f10x_spi.c ****   *     sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
 873:../stm32_lib/src/stm32f10x_spi.c ****   *     followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
 874:../stm32_lib/src/stm32f10x_spi.c ****   *   - UDR (UnderRun Error) interrupt pending bit is cleared by a read 
 875:../stm32_lib/src/stm32f10x_spi.c ****   *     operation to SPI_SR register (SPI_I2S_GetITStatus()).
 876:../stm32_lib/src/stm32f10x_spi.c ****   *   - MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
 877:../stm32_lib/src/stm32f10x_spi.c ****   *     a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
 878:../stm32_lib/src/stm32f10x_spi.c ****   *     followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
 879:../stm32_lib/src/stm32f10x_spi.c ****   *     the SPI).
 880:../stm32_lib/src/stm32f10x_spi.c ****   * @retval None
 881:../stm32_lib/src/stm32f10x_spi.c ****   */
 882:../stm32_lib/src/stm32f10x_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 883:../stm32_lib/src/stm32f10x_spi.c **** {
 1476              		.loc 1 883 0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 16
 1479              		@ frame_needed = 1, uses_anonymous_args = 0
 1480              		@ link register save eliminated.
 1481 0750 80B4     		push	{r7}
 1482              	.LCFI66:
 1483              		.cfi_def_cfa_offset 4
 1484              		.cfi_offset 7, -4
 1485 0752 85B0     		sub	sp, sp, #20
 1486              	.LCFI67:
 1487              		.cfi_def_cfa_offset 24
 1488 0754 00AF     		add	r7, sp, #0
 1489              	.LCFI68:
 1490              		.cfi_def_cfa_register 7
 1491 0756 7860     		str	r0, [r7, #4]
 1492 0758 0B46     		mov	r3, r1
 1493 075a FB70     		strb	r3, [r7, #3]
 884:../stm32_lib/src/stm32f10x_spi.c ****   uint16_t itpos = 0;
 1494              		.loc 1 884 0
 1495 075c 4FF00003 		mov	r3, #0
 1496 0760 FB81     		strh	r3, [r7, #14]	@ movhi
 885:../stm32_lib/src/stm32f10x_spi.c ****   /* Check the parameters */
 886:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 887:../stm32_lib/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
 888:../stm32_lib/src/stm32f10x_spi.c **** 
 889:../stm32_lib/src/stm32f10x_spi.c ****   /* Get the SPI IT index */
 890:../stm32_lib/src/stm32f10x_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1497              		.loc 1 890 0
 1498 0762 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1499 0764 03F00F03 		and	r3, r3, #15
 1500 0768 4FF00102 		mov	r2, #1
 1501 076c 02FA03F3 		lsl	r3, r2, r3
 1502 0770 FB81     		strh	r3, [r7, #14]	@ movhi
 891:../stm32_lib/src/stm32f10x_spi.c **** 
 892:../stm32_lib/src/stm32f10x_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
 893:../stm32_lib/src/stm32f10x_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1503              		.loc 1 893 0
 1504 0772 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1505 0774 6FEA0303 		mvn	r3, r3
 1506 0778 9AB2     		uxth	r2, r3
 1507 077a 7B68     		ldr	r3, [r7, #4]
 1508 077c 1A81     		strh	r2, [r3, #8]	@ movhi
 894:../stm32_lib/src/stm32f10x_spi.c **** }
 1509              		.loc 1 894 0
 1510 077e 07F11407 		add	r7, r7, #20
 1511 0782 BD46     		mov	sp, r7
 1512 0784 80BC     		pop	{r7}
 1513 0786 7047     		bx	lr
 1514              		.cfi_endproc
 1515              	.LFE51:
 1517              	.Letext0:
 1518              		.file 2 "/opt/CodeSourcery/arm-2011.09/bin/../lib/gcc/arm-none-eabi/4.6.1/../../../../arm-none-eab
 1519              		.file 3 "/home/simon/Workspace/stm32vl/stm32_lib/inc/stm32f10x.h"
 1520              		.file 4 "/home/simon/Workspace/stm32vl/stm32_lib/inc/stm32f10x_rcc.h"
 1521              		.file 5 "/home/simon/Workspace/stm32vl/stm32_lib/inc/stm32f10x_spi.h"
 1522              		.file 6 "/home/simon/Workspace/stm32vl/stm32_lib/inc/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_spi.c
     /tmp/ccrjETFM.s:18     .text:00000000 $t
     /tmp/ccrjETFM.s:23     .text:00000000 SPI_I2S_DeInit
     /tmp/ccrjETFM.s:101    .text:00000088 SPI_Init
     /tmp/ccrjETFM.s:207    .text:00000110 I2S_Init
     /tmp/ccrjETFM.s:437    .text:000002a8 SPI_StructInit
     /tmp/ccrjETFM.s:504    .text:00000304 I2S_StructInit
     /tmp/ccrjETFM.s:559    .text:00000348 SPI_Cmd
     /tmp/ccrjETFM.s:615    .text:00000388 I2S_Cmd
     /tmp/ccrjETFM.s:671    .text:000003c8 SPI_I2S_ITConfig
     /tmp/ccrjETFM.s:748    .text:00000434 SPI_I2S_DMACmd
     /tmp/ccrjETFM.s:810    .text:0000047c SPI_I2S_SendData
     /tmp/ccrjETFM.s:847    .text:00000498 SPI_I2S_ReceiveData
     /tmp/ccrjETFM.s:883    .text:000004b4 SPI_NSSInternalSoftwareConfig
     /tmp/ccrjETFM.s:940    .text:000004f8 SPI_SSOutputCmd
     /tmp/ccrjETFM.s:996    .text:00000538 SPI_DataSizeConfig
     /tmp/ccrjETFM.s:1046   .text:00000570 SPI_TransmitCRC
     /tmp/ccrjETFM.s:1085   .text:00000594 SPI_CalculateCRC
     /tmp/ccrjETFM.s:1141   .text:000005d4 SPI_GetCRC
     /tmp/ccrjETFM.s:1195   .text:00000608 SPI_GetCRCPolynomial
     /tmp/ccrjETFM.s:1231   .text:00000624 SPI_BiDirectionalLineConfig
     /tmp/ccrjETFM.s:1287   .text:00000664 SPI_I2S_GetFlagStatus
     /tmp/ccrjETFM.s:1344   .text:000006a4 SPI_I2S_ClearFlag
     /tmp/ccrjETFM.s:1383   .text:000006c8 SPI_I2S_GetITStatus
     /tmp/ccrjETFM.s:1474   .text:00000750 SPI_I2S_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
