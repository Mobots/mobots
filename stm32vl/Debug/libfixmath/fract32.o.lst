   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"fract32.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	fract32_create
  20              		.thumb
  21              		.thumb_func
  23              	fract32_create:
  24              	.LFB0:
  25              		.file 1 "../libfixmath/fract32.c"
   1:../libfixmath/fract32.c **** #include "fract32.h"
   2:../libfixmath/fract32.c **** 
   3:../libfixmath/fract32.c **** 
   4:../libfixmath/fract32.c **** 
   5:../libfixmath/fract32.c **** fract32_t fract32_create(uint32_t inNumerator, uint32_t inDenominator) {
  26              		.loc 1 5 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 85B0     		sub	sp, sp, #20
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 24
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  42 0008 3960     		str	r1, [r7, #0]
   6:../libfixmath/fract32.c **** 	if(inDenominator <= inNumerator)
  43              		.loc 1 6 0
  44 000a 3A68     		ldr	r2, [r7, #0]
  45 000c 7B68     		ldr	r3, [r7, #4]
  46 000e 9A42     		cmp	r2, r3
  47 0010 02D8     		bhi	.L2
   7:../libfixmath/fract32.c **** 		return 0xFFFFFFFF;
  48              		.loc 1 7 0
  49 0012 4FF0FF33 		mov	r3, #-1
  50 0016 14E0     		b	.L3
  51              	.L2:
   8:../libfixmath/fract32.c **** 	uint32_t tempMod = (inNumerator % inDenominator);
  52              		.loc 1 8 0
  53 0018 7B68     		ldr	r3, [r7, #4]
  54 001a 3A68     		ldr	r2, [r7, #0]
  55 001c B3FBF2F2 		udiv	r2, r3, r2
  56 0020 3968     		ldr	r1, [r7, #0]
  57 0022 01FB02F2 		mul	r2, r1, r2
  58 0026 9B1A     		subs	r3, r3, r2
  59 0028 FB60     		str	r3, [r7, #12]
   9:../libfixmath/fract32.c **** 	uint32_t tempDiv = (0xFFFFFFFF / (inDenominator - 1));
  60              		.loc 1 9 0
  61 002a 3B68     		ldr	r3, [r7, #0]
  62 002c 03F1FF33 		add	r3, r3, #-1
  63 0030 4FF0FF32 		mov	r2, #-1
  64 0034 B2FBF3F3 		udiv	r3, r2, r3
  65 0038 BB60     		str	r3, [r7, #8]
  10:../libfixmath/fract32.c **** 	return (tempMod * tempDiv);
  66              		.loc 1 10 0
  67 003a FB68     		ldr	r3, [r7, #12]
  68 003c BA68     		ldr	r2, [r7, #8]
  69 003e 02FB03F3 		mul	r3, r2, r3
  70              	.L3:
  11:../libfixmath/fract32.c **** }
  71              		.loc 1 11 0
  72 0042 1846     		mov	r0, r3
  73 0044 07F11407 		add	r7, r7, #20
  74 0048 BD46     		mov	sp, r7
  75 004a 80BC     		pop	{r7}
  76 004c 7047     		bx	lr
  77              		.cfi_endproc
  78              	.LFE0:
  80 004e 00BF     		.align	2
  81              		.global	fract32_invert
  82              		.thumb
  83              		.thumb_func
  85              	fract32_invert:
  86              	.LFB1:
  12:../libfixmath/fract32.c **** 
  13:../libfixmath/fract32.c **** fract32_t fract32_invert(fract32_t inFract) {
  87              		.loc 1 13 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 8
  90              		@ frame_needed = 1, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92 0050 80B4     		push	{r7}
  93              	.LCFI3:
  94              		.cfi_def_cfa_offset 4
  95              		.cfi_offset 7, -4
  96 0052 83B0     		sub	sp, sp, #12
  97              	.LCFI4:
  98              		.cfi_def_cfa_offset 16
  99 0054 00AF     		add	r7, sp, #0
 100              	.LCFI5:
 101              		.cfi_def_cfa_register 7
 102 0056 7860     		str	r0, [r7, #4]
  14:../libfixmath/fract32.c **** 	return (0xFFFFFFFF - inFract);
 103              		.loc 1 14 0
 104 0058 7B68     		ldr	r3, [r7, #4]
 105 005a 6FEA0303 		mvn	r3, r3
  15:../libfixmath/fract32.c **** }
 106              		.loc 1 15 0
 107 005e 1846     		mov	r0, r3
 108 0060 07F10C07 		add	r7, r7, #12
 109 0064 BD46     		mov	sp, r7
 110 0066 80BC     		pop	{r7}
 111 0068 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE1:
 115 006a 00BF     		.align	2
 116              		.global	fract32_usmul
 117              		.thumb
 118              		.thumb_func
 120              	fract32_usmul:
 121              	.LFB2:
  16:../libfixmath/fract32.c **** 
  17:../libfixmath/fract32.c **** #ifndef FIXMATH_NO_64BIT
  18:../libfixmath/fract32.c **** uint32_t fract32_usmul(uint32_t inVal, fract32_t inFract) {
 122              		.loc 1 18 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127 006c 2DE9B003 		push	{r4, r5, r7, r8, r9}
 128              	.LCFI6:
 129              		.cfi_def_cfa_offset 20
 130              		.cfi_offset 9, -4
 131              		.cfi_offset 8, -8
 132              		.cfi_offset 7, -12
 133              		.cfi_offset 5, -16
 134              		.cfi_offset 4, -20
 135 0070 83B0     		sub	sp, sp, #12
 136              	.LCFI7:
 137              		.cfi_def_cfa_offset 32
 138 0072 00AF     		add	r7, sp, #0
 139              	.LCFI8:
 140              		.cfi_def_cfa_register 7
 141 0074 7860     		str	r0, [r7, #4]
 142 0076 3960     		str	r1, [r7, #0]
  19:../libfixmath/fract32.c **** 	return (uint32_t)(((uint64_t)inVal * (uint64_t)inFract) >> 32);
 143              		.loc 1 19 0
 144 0078 7B68     		ldr	r3, [r7, #4]
 145 007a 1846     		mov	r0, r3
 146 007c 4FF00001 		mov	r1, #0
 147 0080 3C68     		ldr	r4, [r7, #0]
 148 0082 2246     		mov	r2, r4
 149 0084 4FF00003 		mov	r3, #0
 150 0088 02FB01F5 		mul	r5, r2, r1
 151 008c 00FB03F4 		mul	r4, r0, r3
 152 0090 2C19     		adds	r4, r5, r4
 153 0092 A0FB0223 		umull	r2, r3, r0, r2
 154 0096 E118     		adds	r1, r4, r3
 155 0098 0B46     		mov	r3, r1
 156 009a 9846     		mov	r8, r3
 157 009c 4FF00009 		mov	r9, #0
 158 00a0 4346     		mov	r3, r8
  20:../libfixmath/fract32.c **** }
 159              		.loc 1 20 0
 160 00a2 1846     		mov	r0, r3
 161 00a4 07F10C07 		add	r7, r7, #12
 162 00a8 BD46     		mov	sp, r7
 163 00aa BDE8B003 		pop	{r4, r5, r7, r8, r9}
 164 00ae 7047     		bx	lr
 165              		.cfi_endproc
 166              	.LFE2:
 168              		.align	2
 169              		.global	fract32_smul
 170              		.thumb
 171              		.thumb_func
 173              	fract32_smul:
 174              	.LFB3:
  21:../libfixmath/fract32.c **** 
  22:../libfixmath/fract32.c **** int32_t fract32_smul(int32_t inVal, fract32_t inFract) {
 175              		.loc 1 22 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 8
 178              		@ frame_needed = 1, uses_anonymous_args = 0
 179 00b0 80B5     		push	{r7, lr}
 180              	.LCFI9:
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 14, -4
 183              		.cfi_offset 7, -8
 184 00b2 82B0     		sub	sp, sp, #8
 185              	.LCFI10:
 186              		.cfi_def_cfa_offset 16
 187 00b4 00AF     		add	r7, sp, #0
 188              	.LCFI11:
 189              		.cfi_def_cfa_register 7
 190 00b6 7860     		str	r0, [r7, #4]
 191 00b8 3960     		str	r1, [r7, #0]
  23:../libfixmath/fract32.c **** 	if(inVal < 0)
 192              		.loc 1 23 0
 193 00ba 7B68     		ldr	r3, [r7, #4]
 194 00bc 002B     		cmp	r3, #0
 195 00be 0ADA     		bge	.L7
  24:../libfixmath/fract32.c **** 		return -fract32_usmul(-inVal, inFract);
 196              		.loc 1 24 0
 197 00c0 7B68     		ldr	r3, [r7, #4]
 198 00c2 C3F10003 		rsb	r3, r3, #0
 199 00c6 1846     		mov	r0, r3
 200 00c8 3968     		ldr	r1, [r7, #0]
 201 00ca FFF7FEFF 		bl	fract32_usmul
 202 00ce 0346     		mov	r3, r0
 203 00d0 C3F10003 		rsb	r3, r3, #0
 204 00d4 05E0     		b	.L8
 205              	.L7:
  25:../libfixmath/fract32.c **** 	return fract32_usmul(inVal, inFract);
 206              		.loc 1 25 0
 207 00d6 7B68     		ldr	r3, [r7, #4]
 208 00d8 1846     		mov	r0, r3
 209 00da 3968     		ldr	r1, [r7, #0]
 210 00dc FFF7FEFF 		bl	fract32_usmul
 211 00e0 0346     		mov	r3, r0
 212              	.L8:
  26:../libfixmath/fract32.c **** }
 213              		.loc 1 26 0
 214 00e2 1846     		mov	r0, r3
 215 00e4 07F10807 		add	r7, r7, #8
 216 00e8 BD46     		mov	sp, r7
 217 00ea 80BD     		pop	{r7, pc}
 218              		.cfi_endproc
 219              	.LFE3:
 221              	.Letext0:
 222              		.file 2 "/opt/CodeSourcery/arm-2011.09/bin/../lib/gcc/arm-none-eabi/4.6.1/../../../../arm-none-eab
 223              		.file 3 "../libfixmath/fract32.h"
DEFINED SYMBOLS
                            *ABS*:00000000 fract32.c
     /tmp/ccZjHUVv.s:18     .text:00000000 $t
     /tmp/ccZjHUVv.s:23     .text:00000000 fract32_create
     /tmp/ccZjHUVv.s:85     .text:00000050 fract32_invert
     /tmp/ccZjHUVv.s:120    .text:0000006c fract32_usmul
     /tmp/ccZjHUVv.s:173    .text:000000b0 fract32_smul
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
