   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"movement.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  22              	FOUR_DIV_PI:
  23 0000 F3450100 		.word	83443
  24              		.align	2
  27              	_FOUR_DIV_PI2:
  28 0004 4098FFFF 		.word	-26560
  29              		.align	2
  32              	X4_CORRECTION_COMPONENT:
  33 0008 9A390000 		.word	14746
  34              		.align	2
  37              	PI_DIV_4:
  38 000c 0FC90000 		.word	51471
  39              		.align	2
  42              	THREE_PI_DIV_4:
  43 0010 2F5B0200 		.word	154415
  44              		.align	2
  47              	fix16_max:
  48 0014 FFFFFF7F 		.word	2147483647
  49              		.align	2
  52              	fix16_min:
  53 0018 00000080 		.word	-2147483648
  54              		.align	2
  57              	fix16_overflow:
  58 001c 00000080 		.word	-2147483648
  59              		.align	2
  62              	fix16_pi:
  63 0020 3F240300 		.word	205887
  64              		.align	2
  67              	fix16_e:
  68 0024 E1B70200 		.word	178145
  69              		.align	2
  72              	fix16_one:
  73 0028 00000100 		.word	65536
  74              		.global	__aeabi_i2f
  75              		.global	__aeabi_fmul
  76              		.global	__aeabi_fcmpge
  77              		.global	__aeabi_fadd
  78              		.global	__aeabi_f2iz
  79              		.text
  80              		.align	2
  81              		.thumb
  82              		.thumb_func
  84              	fix16_from_float:
  85              	.LFB21:
  86              		.file 1 "/home/simon/Workspace/stm32vl/libfixmath/fix16.h"
   1:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #ifndef __libfixmath_fix16_h__
   2:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #define __libfixmath_fix16_h__
   3:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
   4:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #ifdef __cplusplus
   5:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** extern "C"
   6:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** {
   7:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #endif
   8:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
   9:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** /* These options may let the optimizer to remove some calls to the functions.
  10:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****  * Refer to http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html
  11:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****  */
  12:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #ifndef FIXMATH_FUNC_ATTRS
  13:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** # ifdef __GNUC__
  14:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #   define FIXMATH_FUNC_ATTRS __attribute__((leaf, nothrow, pure))
  15:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** # else
  16:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #   define FIXMATH_FUNC_ATTRS
  17:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** # endif
  18:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #endif
  19:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
  20:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #include <stdint.h>
  21:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
  22:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** typedef int32_t fix16_t;
  23:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
  24:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t FOUR_DIV_PI  = 0x145F3;            /*!< Fix16 value of 4/PI */
  25:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t _FOUR_DIV_PI2 = 0xFFFF9840;        /*!< Fix16 value of -4/PIÂ² */
  26:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t X4_CORRECTION_COMPONENT = 0x399A; 	/*!< Fix16 value of 0.225 */
  27:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t PI_DIV_4 = 0x0000C90F;             /*!< Fix16 value of PI/4 */
  28:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t THREE_PI_DIV_4 = 0x00025B2F;       /*!< Fix16 value of 3PI/4 */
  29:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
  30:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t fix16_max = 0x7FFFFFFF; /*!< the maximum value of fix16_t */
  31:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t fix16_min = 0x80000000; /*!< the minimum value of fix16_t */
  32:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t fix16_overflow = 0x80000000; /*!< the value used to indicate overflows when FI
  33:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
  34:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t fix16_pi  = 205887;     /*!< fix16_t value of pi */
  35:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t fix16_e   = 178145;     /*!< fix16_t value of e */
  36:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static const fix16_t fix16_one = 0x00010000; /*!< fix16_t value of 1 */
  37:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
  38:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** /* Conversion functions between fix16_t and float/integer.
  39:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****  * These are inlined to allow compiler to optimize away constant numbers
  40:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****  */
  41:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static inline fix16_t fix16_from_int(int a) { return a * fix16_one; }
  42:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static inline float fix16_to_float(fix16_t a) { return (float)a / fix16_one; }
  43:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static inline double fix16_to_dbl(fix16_t a) { return (double)a / fix16_one; }
  44:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
  45:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static inline int fix16_to_int(fix16_t a)
  46:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** {
  47:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #ifdef FIXMATH_NO_ROUNDING
  48:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****     return a >> 16;
  49:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #else
  50:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****     if (a >= 0)
  51:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****         return (a + fix16_one / 2) / fix16_one;
  52:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****     else
  53:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****         return (a - fix16_one / 2) / fix16_one;
  54:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #endif
  55:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** }
  56:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** 
  57:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** static inline fix16_t fix16_from_float(float a)
  58:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** {
  87              		.loc 1 58 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 16
  90              		@ frame_needed = 1, uses_anonymous_args = 0
  91 0000 90B5     		push	{r4, r7, lr}
  92              	.LCFI0:
  93              		.cfi_def_cfa_offset 12
  94              		.cfi_offset 14, -4
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 4, -12
  97 0002 85B0     		sub	sp, sp, #20
  98              	.LCFI1:
  99              		.cfi_def_cfa_offset 32
 100 0004 00AF     		add	r7, sp, #0
 101              	.LCFI2:
 102              		.cfi_def_cfa_register 7
 103 0006 7860     		str	r0, [r7, #4]	@ float
  59:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****     float temp = a * fix16_one;
 104              		.loc 1 59 0
 105 0008 40F20003 		movw	r3, #:lower16:fix16_one
 106 000c C0F20003 		movt	r3, #:upper16:fix16_one
 107 0010 1B68     		ldr	r3, [r3, #0]
 108 0012 1846     		mov	r0, r3
 109 0014 FFF7FEFF 		bl	__aeabi_i2f
 110 0018 0346     		mov	r3, r0
 111 001a 1846     		mov	r0, r3
 112 001c 7968     		ldr	r1, [r7, #4]	@ float
 113 001e FFF7FEFF 		bl	__aeabi_fmul
 114 0022 0346     		mov	r3, r0
 115 0024 FB60     		str	r3, [r7, #12]	@ float
  60:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #ifndef FIXMATH_NO_ROUNDING
  61:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****     temp += (temp >= 0) ? 0.5f : -0.5f;
 116              		.loc 1 61 0
 117 0026 4FF00103 		mov	r3, #1
 118 002a 1C46     		mov	r4, r3
 119 002c F868     		ldr	r0, [r7, #12]	@ float
 120 002e 0F49     		ldr	r1, .L5	@ float
 121 0030 FFF7FEFF 		bl	__aeabi_fcmpge
 122 0034 0346     		mov	r3, r0
 123 0036 002B     		cmp	r3, #0
 124 0038 02D1     		bne	.L2
 125 003a 4FF00003 		mov	r3, #0
 126 003e 1C46     		mov	r4, r3
 127              	.L2:
 128 0040 E3B2     		uxtb	r3, r4
 129 0042 002B     		cmp	r3, #0
 130 0044 01D0     		beq	.L3
 131              		.loc 1 61 0 is_stmt 0 discriminator 1
 132 0046 0A4B     		ldr	r3, .L5+4	@ float
 133 0048 00E0     		b	.L4
 134              	.L3:
 135              		.loc 1 61 0 discriminator 2
 136 004a 0A4B     		ldr	r3, .L5+8	@ float
 137              	.L4:
 138              		.loc 1 61 0 discriminator 3
 139 004c F868     		ldr	r0, [r7, #12]	@ float
 140 004e 1946     		mov	r1, r3
 141 0050 FFF7FEFF 		bl	__aeabi_fadd
 142 0054 0346     		mov	r3, r0
 143 0056 FB60     		str	r3, [r7, #12]	@ float
  62:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** #endif
  63:/home/simon/Workspace/stm32vl/libfixmath/fix16.h ****     return (fix16_t)temp;
 144              		.loc 1 63 0 is_stmt 1 discriminator 3
 145 0058 F868     		ldr	r0, [r7, #12]	@ float
 146 005a FFF7FEFF 		bl	__aeabi_f2iz
 147 005e 0346     		mov	r3, r0
  64:/home/simon/Workspace/stm32vl/libfixmath/fix16.h **** }
 148              		.loc 1 64 0 discriminator 3
 149 0060 1846     		mov	r0, r3
 150 0062 07F11407 		add	r7, r7, #20
 151 0066 BD46     		mov	sp, r7
 152 0068 90BD     		pop	{r4, r7, pc}
 153              	.L6:
 154 006a 00BF     		.align	2
 155              	.L5:
 156 006c 00000000 		.word	0
 157 0070 0000003F 		.word	1056964608
 158 0074 000000BF 		.word	-1090519040
 159              		.cfi_endproc
 160              	.LFE21:
 162              		.align	2
 163              		.global	sollWertLogik
 164              		.thumb
 165              		.thumb_func
 167              	sollWertLogik:
 168              	.LFB23:
 169              		.file 2 "../movement.c"
   1:../movement.c **** /*
   2:../movement.c ****  * movement.c
   3:../movement.c ****  *
   4:../movement.c ****  *  Created on: 20.07.2012
   5:../movement.c ****  *      Author: simon
   6:../movement.c ****  */
   7:../movement.c **** 
   8:../movement.c **** #include "fixmath.h"
   9:../movement.c **** 
  10:../movement.c **** 
  11:../movement.c **** 
  12:../movement.c **** 
  13:../movement.c **** #define V_MAX 100000 //TODO 1000*100
  14:../movement.c **** 
  15:../movement.c **** 
  16:../movement.c **** void sollWertLogik(int Vx, int Vy, int omega) { //Erwartungswerte 0-1000. Omega <=200. Betrag(Vx,Vy
 170              		.loc 2 16 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 48
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174 0078 80B5     		push	{r7, lr}
 175              	.LCFI3:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 14, -4
 178              		.cfi_offset 7, -8
 179 007a 8CB0     		sub	sp, sp, #48
 180              	.LCFI4:
 181              		.cfi_def_cfa_offset 56
 182 007c 00AF     		add	r7, sp, #0
 183              	.LCFI5:
 184              		.cfi_def_cfa_register 7
 185 007e F860     		str	r0, [r7, #12]
 186 0080 B960     		str	r1, [r7, #8]
 187 0082 7A60     		str	r2, [r7, #4]
  17:../movement.c **** 
  18:../movement.c **** 	fix16_t i = fix16_from_float(23.1324);
 188              		.loc 2 18 0
 189 0084 A148     		ldr	r0, .L16	@ float
 190 0086 FFF7BBFF 		bl	fix16_from_float
 191 008a 3862     		str	r0, [r7, #32]
  19:../movement.c **** 
  20:../movement.c **** 	i = fix16_sin(i);
 192              		.loc 2 20 0
 193 008c 386A     		ldr	r0, [r7, #32]
 194 008e FFF7FEFF 		bl	fix16_sin
 195 0092 3862     		str	r0, [r7, #32]
  21:../movement.c **** 
  22:../movement.c **** 
  23:../movement.c **** 	int v0, v1, v2, a0, a1, a2, a;
  24:../movement.c **** 
  25:../movement.c **** 	v0 = (Vx - omega) * 100;
 196              		.loc 2 25 0
 197 0094 FA68     		ldr	r2, [r7, #12]
 198 0096 7B68     		ldr	r3, [r7, #4]
 199 0098 D31A     		subs	r3, r2, r3
 200 009a 4FF06402 		mov	r2, #100
 201 009e 02FB03F3 		mul	r3, r2, r3
 202 00a2 FB61     		str	r3, [r7, #28]
  26:../movement.c **** 	v1 = -50 * Vx + 86 * Vy - omega * 100;
 203              		.loc 2 26 0
 204 00a4 FB68     		ldr	r3, [r7, #12]
 205 00a6 6FF03102 		mvn	r2, #49
 206 00aa 02FB03F2 		mul	r2, r2, r3
 207 00ae BB68     		ldr	r3, [r7, #8]
 208 00b0 4FF05601 		mov	r1, #86
 209 00b4 01FB03F3 		mul	r3, r1, r3
 210 00b8 D218     		adds	r2, r2, r3
 211 00ba 7B68     		ldr	r3, [r7, #4]
 212 00bc 6FF06301 		mvn	r1, #99
 213 00c0 01FB03F3 		mul	r3, r1, r3
 214 00c4 D318     		adds	r3, r2, r3
 215 00c6 BB61     		str	r3, [r7, #24]
  27:../movement.c **** 	v2 = -50 * Vx - 86 * Vy - omega * 100;
 216              		.loc 2 27 0
 217 00c8 FB68     		ldr	r3, [r7, #12]
 218 00ca 6FF03102 		mvn	r2, #49
 219 00ce 02FB03F2 		mul	r2, r2, r3
 220 00d2 BB68     		ldr	r3, [r7, #8]
 221 00d4 6FF05501 		mvn	r1, #85
 222 00d8 01FB03F3 		mul	r3, r1, r3
 223 00dc D218     		adds	r2, r2, r3
 224 00de 7B68     		ldr	r3, [r7, #4]
 225 00e0 6FF06301 		mvn	r1, #99
 226 00e4 01FB03F3 		mul	r3, r1, r3
 227 00e8 D318     		adds	r3, r2, r3
 228 00ea 7B61     		str	r3, [r7, #20]
  28:../movement.c **** 
  29:../movement.c **** 	if (v0 > V_MAX) {
 229              		.loc 2 29 0
 230 00ec FA69     		ldr	r2, [r7, #28]
 231 00ee 48F2A063 		movw	r3, #34464
 232 00f2 C0F20103 		movt	r3, 1
 233 00f6 9A42     		cmp	r2, r3
 234 00f8 10DD     		ble	.L8
  30:../movement.c **** 		a0 = (V_MAX + 100*omega)/(100*Vx);
 235              		.loc 2 30 0
 236 00fa 7B68     		ldr	r3, [r7, #4]
 237 00fc 4FF06402 		mov	r2, #100
 238 0100 02FB03F3 		mul	r3, r2, r3
 239 0104 03F5C233 		add	r3, r3, #99328
 240 0108 03F52873 		add	r3, r3, #672
 241 010c FA68     		ldr	r2, [r7, #12]
 242 010e 4FF06401 		mov	r1, #100
 243 0112 01FB02F2 		mul	r2, r1, r2
 244 0116 93FBF2F3 		sdiv	r3, r3, r2
 245 011a FB62     		str	r3, [r7, #44]
 246              	.L8:
  31:../movement.c **** 	}
  32:../movement.c **** 
  33:../movement.c **** 	if (v0 < (- V_MAX)) {
 247              		.loc 2 33 0
 248 011c FA69     		ldr	r2, [r7, #28]
 249 011e 47F66013 		movw	r3, #31072
 250 0122 CFF6FE73 		movt	r3, 65534
 251 0126 9A42     		cmp	r2, r3
 252 0128 10DA     		bge	.L9
  34:../movement.c **** 		a0 = (-V_MAX + 100*omega)/(100*Vx);
 253              		.loc 2 34 0
 254 012a 7B68     		ldr	r3, [r7, #4]
 255 012c 4FF06402 		mov	r2, #100
 256 0130 02FB03F3 		mul	r3, r2, r3
 257 0134 A3F5C233 		sub	r3, r3, #99328
 258 0138 A3F52873 		sub	r3, r3, #672
 259 013c FA68     		ldr	r2, [r7, #12]
 260 013e 4FF06401 		mov	r1, #100
 261 0142 01FB02F2 		mul	r2, r1, r2
 262 0146 93FBF2F3 		sdiv	r3, r3, r2
 263 014a FB62     		str	r3, [r7, #44]
 264              	.L9:
  35:../movement.c **** 	}
  36:../movement.c **** 	if (v1 > V_MAX) {
 265              		.loc 2 36 0
 266 014c BA69     		ldr	r2, [r7, #24]
 267 014e 48F2A063 		movw	r3, #34464
 268 0152 C0F20103 		movt	r3, 1
 269 0156 9A42     		cmp	r2, r3
 270 0158 16DD     		ble	.L10
  37:../movement.c **** 		a1 = (V_MAX + 100*omega)/(-50*Vx + 86 *Vy);
 271              		.loc 2 37 0
 272 015a 7B68     		ldr	r3, [r7, #4]
 273 015c 4FF06402 		mov	r2, #100
 274 0160 02FB03F3 		mul	r3, r2, r3
 275 0164 03F5C233 		add	r3, r3, #99328
 276 0168 03F52873 		add	r3, r3, #672
 277 016c FA68     		ldr	r2, [r7, #12]
 278 016e 6FF03101 		mvn	r1, #49
 279 0172 01FB02F1 		mul	r1, r1, r2
 280 0176 BA68     		ldr	r2, [r7, #8]
 281 0178 4FF05600 		mov	r0, #86
 282 017c 00FB02F2 		mul	r2, r0, r2
 283 0180 8A18     		adds	r2, r1, r2
 284 0182 93FBF2F3 		sdiv	r3, r3, r2
 285 0186 BB62     		str	r3, [r7, #40]
 286              	.L10:
  38:../movement.c **** 	}
  39:../movement.c **** 
  40:../movement.c **** 	if (v1 < (- V_MAX)) {
 287              		.loc 2 40 0
 288 0188 BA69     		ldr	r2, [r7, #24]
 289 018a 47F66013 		movw	r3, #31072
 290 018e CFF6FE73 		movt	r3, 65534
 291 0192 9A42     		cmp	r2, r3
 292 0194 16DA     		bge	.L11
  41:../movement.c **** 		a1 = (-V_MAX + 100*omega)/(-50*Vx + 86 *Vy);
 293              		.loc 2 41 0
 294 0196 7B68     		ldr	r3, [r7, #4]
 295 0198 4FF06402 		mov	r2, #100
 296 019c 02FB03F3 		mul	r3, r2, r3
 297 01a0 A3F5C233 		sub	r3, r3, #99328
 298 01a4 A3F52873 		sub	r3, r3, #672
 299 01a8 FA68     		ldr	r2, [r7, #12]
 300 01aa 6FF03101 		mvn	r1, #49
 301 01ae 01FB02F1 		mul	r1, r1, r2
 302 01b2 BA68     		ldr	r2, [r7, #8]
 303 01b4 4FF05600 		mov	r0, #86
 304 01b8 00FB02F2 		mul	r2, r0, r2
 305 01bc 8A18     		adds	r2, r1, r2
 306 01be 93FBF2F3 		sdiv	r3, r3, r2
 307 01c2 BB62     		str	r3, [r7, #40]
 308              	.L11:
  42:../movement.c **** 	}
  43:../movement.c **** 	if (v2 > V_MAX) {
 309              		.loc 2 43 0
 310 01c4 7A69     		ldr	r2, [r7, #20]
 311 01c6 48F2A063 		movw	r3, #34464
 312 01ca C0F20103 		movt	r3, 1
 313 01ce 9A42     		cmp	r2, r3
 314 01d0 16DD     		ble	.L12
  44:../movement.c **** 		a2 = (V_MAX + 100*omega)/(-50*Vx - 86 *Vy);
 315              		.loc 2 44 0
 316 01d2 7B68     		ldr	r3, [r7, #4]
 317 01d4 4FF06402 		mov	r2, #100
 318 01d8 02FB03F3 		mul	r3, r2, r3
 319 01dc 03F5C233 		add	r3, r3, #99328
 320 01e0 03F52873 		add	r3, r3, #672
 321 01e4 FA68     		ldr	r2, [r7, #12]
 322 01e6 6FF03101 		mvn	r1, #49
 323 01ea 01FB02F1 		mul	r1, r1, r2
 324 01ee BA68     		ldr	r2, [r7, #8]
 325 01f0 6FF05500 		mvn	r0, #85
 326 01f4 00FB02F2 		mul	r2, r0, r2
 327 01f8 8A18     		adds	r2, r1, r2
 328 01fa 93FBF2F3 		sdiv	r3, r3, r2
 329 01fe 7B62     		str	r3, [r7, #36]
 330              	.L12:
  45:../movement.c **** 	}
  46:../movement.c **** 
  47:../movement.c **** 	if (v2 < (- V_MAX)) {
 331              		.loc 2 47 0
 332 0200 7A69     		ldr	r2, [r7, #20]
 333 0202 47F66013 		movw	r3, #31072
 334 0206 CFF6FE73 		movt	r3, 65534
 335 020a 9A42     		cmp	r2, r3
 336 020c 16DA     		bge	.L13
  48:../movement.c **** 		a2 = (-V_MAX + 100*omega)/(-50*Vx - 86 *Vy);
 337              		.loc 2 48 0
 338 020e 7B68     		ldr	r3, [r7, #4]
 339 0210 4FF06402 		mov	r2, #100
 340 0214 02FB03F3 		mul	r3, r2, r3
 341 0218 A3F5C233 		sub	r3, r3, #99328
 342 021c A3F52873 		sub	r3, r3, #672
 343 0220 FA68     		ldr	r2, [r7, #12]
 344 0222 6FF03101 		mvn	r1, #49
 345 0226 01FB02F1 		mul	r1, r1, r2
 346 022a BA68     		ldr	r2, [r7, #8]
 347 022c 6FF05500 		mvn	r0, #85
 348 0230 00FB02F2 		mul	r2, r0, r2
 349 0234 8A18     		adds	r2, r1, r2
 350 0236 93FBF2F3 		sdiv	r3, r3, r2
 351 023a 7B62     		str	r3, [r7, #36]
 352              	.L13:
  49:../movement.c **** 	}
  50:../movement.c **** 
  51:../movement.c **** 	a=100;					//Minimum PrÃ¼fung des Skalierungswert
 353              		.loc 2 51 0
 354 023c 4FF06403 		mov	r3, #100
 355 0240 3B61     		str	r3, [r7, #16]
  52:../movement.c **** 	a = (a0<a) ? a0 : a;
 356              		.loc 2 52 0
 357 0242 3A69     		ldr	r2, [r7, #16]
 358 0244 FB6A     		ldr	r3, [r7, #44]
 359 0246 9A42     		cmp	r2, r3
 360 0248 B8BF     		it	lt
 361 024a 1346     		movlt	r3, r2
 362 024c 3B61     		str	r3, [r7, #16]
  53:../movement.c **** 	a = (a1<a) ? a0 : a;
 363              		.loc 2 53 0
 364 024e BA6A     		ldr	r2, [r7, #40]
 365 0250 3B69     		ldr	r3, [r7, #16]
 366 0252 9A42     		cmp	r2, r3
 367 0254 01DA     		bge	.L14
 368              		.loc 2 53 0 is_stmt 0 discriminator 1
 369 0256 FB6A     		ldr	r3, [r7, #44]
 370 0258 00E0     		b	.L15
 371              	.L14:
 372              		.loc 2 53 0 discriminator 2
 373 025a 3B69     		ldr	r3, [r7, #16]
 374              	.L15:
 375              		.loc 2 53 0 discriminator 3
 376 025c 3B61     		str	r3, [r7, #16]
  54:../movement.c **** 	a = (a2<a) ? a2 : a;
 377              		.loc 2 54 0 is_stmt 1 discriminator 3
 378 025e 3A69     		ldr	r2, [r7, #16]
 379 0260 7B6A     		ldr	r3, [r7, #36]
 380 0262 9A42     		cmp	r2, r3
 381 0264 B8BF     		it	lt
 382 0266 1346     		movlt	r3, r2
 383 0268 3B61     		str	r3, [r7, #16]
  55:../movement.c **** 
  56:../movement.c **** 	Vx=Vx*a/100;
 384              		.loc 2 56 0 discriminator 3
 385 026a FB68     		ldr	r3, [r7, #12]
 386 026c 3A69     		ldr	r2, [r7, #16]
 387 026e 02FB03F2 		mul	r2, r2, r3
 388 0272 48F21F53 		movw	r3, #34079
 389 0276 C5F2EB13 		movt	r3, 20971
 390 027a 83FB0213 		smull	r1, r3, r3, r2
 391 027e 4FEA6311 		asr	r1, r3, #5
 392 0282 4FEAE273 		asr	r3, r2, #31
 393 0286 CB1A     		subs	r3, r1, r3
 394 0288 FB60     		str	r3, [r7, #12]
  57:../movement.c **** 	Vy=Vy*a/100;
 395              		.loc 2 57 0 discriminator 3
 396 028a BB68     		ldr	r3, [r7, #8]
 397 028c 3A69     		ldr	r2, [r7, #16]
 398 028e 02FB03F2 		mul	r2, r2, r3
 399 0292 48F21F53 		movw	r3, #34079
 400 0296 C5F2EB13 		movt	r3, 20971
 401 029a 83FB0213 		smull	r1, r3, r3, r2
 402 029e 4FEA6311 		asr	r1, r3, #5
 403 02a2 4FEAE273 		asr	r3, r2, #31
 404 02a6 CB1A     		subs	r3, r1, r3
 405 02a8 BB60     		str	r3, [r7, #8]
  58:../movement.c **** 
  59:../movement.c **** 	v0 = (Vx - omega) * 100;
 406              		.loc 2 59 0 discriminator 3
 407 02aa FA68     		ldr	r2, [r7, #12]
 408 02ac 7B68     		ldr	r3, [r7, #4]
 409 02ae D31A     		subs	r3, r2, r3
 410 02b0 4FF06402 		mov	r2, #100
 411 02b4 02FB03F3 		mul	r3, r2, r3
 412 02b8 FB61     		str	r3, [r7, #28]
  60:../movement.c **** 	v1 = -50 * Vx + 86 * Vy - omega * 100;
 413              		.loc 2 60 0 discriminator 3
 414 02ba FB68     		ldr	r3, [r7, #12]
 415 02bc 6FF03102 		mvn	r2, #49
 416 02c0 02FB03F2 		mul	r2, r2, r3
 417 02c4 BB68     		ldr	r3, [r7, #8]
 418 02c6 4FF05601 		mov	r1, #86
 419 02ca 01FB03F3 		mul	r3, r1, r3
 420 02ce D218     		adds	r2, r2, r3
 421 02d0 7B68     		ldr	r3, [r7, #4]
 422 02d2 6FF06301 		mvn	r1, #99
 423 02d6 01FB03F3 		mul	r3, r1, r3
 424 02da D318     		adds	r3, r2, r3
 425 02dc BB61     		str	r3, [r7, #24]
  61:../movement.c **** 	v2 = -50 * Vx - 86 * Vy - omega * 100;
 426              		.loc 2 61 0 discriminator 3
 427 02de FB68     		ldr	r3, [r7, #12]
 428 02e0 6FF03102 		mvn	r2, #49
 429 02e4 02FB03F2 		mul	r2, r2, r3
 430 02e8 BB68     		ldr	r3, [r7, #8]
 431 02ea 6FF05501 		mvn	r1, #85
 432 02ee 01FB03F3 		mul	r3, r1, r3
 433 02f2 D218     		adds	r2, r2, r3
 434 02f4 7B68     		ldr	r3, [r7, #4]
 435 02f6 6FF06301 		mvn	r1, #99
 436 02fa 01FB03F3 		mul	r3, r1, r3
 437 02fe D318     		adds	r3, r2, r3
 438 0300 7B61     		str	r3, [r7, #20]
  62:../movement.c **** 
  63:../movement.c **** 
  64:../movement.c **** 
  65:../movement.c **** }
 439              		.loc 2 65 0 discriminator 3
 440 0302 07F13007 		add	r7, r7, #48
 441 0306 BD46     		mov	sp, r7
 442 0308 80BD     		pop	{r7, pc}
 443              	.L17:
 444 030a 00BF     		.align	2
 445              	.L16:
 446 030c 280FB941 		.word	1102647080
 447              		.cfi_endproc
 448              	.LFE23:
 450              	.Letext0:
 451              		.file 3 "/opt/CodeSourcery/arm-2011.09/bin/../lib/gcc/arm-none-eabi/4.6.1/../../../../arm-none-eab
DEFINED SYMBOLS
                            *ABS*:00000000 movement.c
     /tmp/ccnWFAHo.s:19     .rodata:00000000 $d
     /tmp/ccnWFAHo.s:22     .rodata:00000000 FOUR_DIV_PI
     /tmp/ccnWFAHo.s:27     .rodata:00000004 _FOUR_DIV_PI2
     /tmp/ccnWFAHo.s:32     .rodata:00000008 X4_CORRECTION_COMPONENT
     /tmp/ccnWFAHo.s:37     .rodata:0000000c PI_DIV_4
     /tmp/ccnWFAHo.s:42     .rodata:00000010 THREE_PI_DIV_4
     /tmp/ccnWFAHo.s:47     .rodata:00000014 fix16_max
     /tmp/ccnWFAHo.s:52     .rodata:00000018 fix16_min
     /tmp/ccnWFAHo.s:57     .rodata:0000001c fix16_overflow
     /tmp/ccnWFAHo.s:62     .rodata:00000020 fix16_pi
     /tmp/ccnWFAHo.s:67     .rodata:00000024 fix16_e
     /tmp/ccnWFAHo.s:72     .rodata:00000028 fix16_one
     /tmp/ccnWFAHo.s:80     .text:00000000 $t
     /tmp/ccnWFAHo.s:84     .text:00000000 fix16_from_float
     /tmp/ccnWFAHo.s:156    .text:0000006c $d
     /tmp/ccnWFAHo.s:162    .text:00000078 $t
     /tmp/ccnWFAHo.s:167    .text:00000078 sollWertLogik
     /tmp/ccnWFAHo.s:446    .text:0000030c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fmul
__aeabi_fcmpge
__aeabi_fadd
__aeabi_f2iz
fix16_sin
