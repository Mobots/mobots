Index: trunk/treeoptimizer3_iteration.cpp
===================================================================
--- trunk/treeoptimizer3_iteration.cpp	(revision 23)
+++ trunk/treeoptimizer3_iteration.cpp	(working copy)
@@ -87,7 +87,7 @@
 
 
 void TreeOptimizer3::computePreconditioner(){
-  for (uint i=0; i<M.size(); i++){
+  for (unsigned int i=0; i<M.size(); i++){
     M[i][0]=0;
     M[i][1]=0;
   }
@@ -107,7 +107,7 @@
     for (int dir=0; dir<2; dir++){
       Vertex* n = (dir==0)? e->v1 : e->v2;
       while (n!=top){
-	uint i=n->id;
+	unsigned int i=n->id;
 	double rW=min3(W[0][0], W[1][1], W[2][2]);
 	double tW=min3(W[3][3], W[4][4], W[5][5]);
 	M[i][0]+=rW;
@@ -121,7 +121,7 @@
   }
   
   if (verboseLevel>1){
-    for (uint i=0; i<M.size(); i++){
+    for (unsigned int i=0; i<M.size(); i++){
       cerr << "M[" << i << "]=" << M[i][0] << " " << M[i][1] << endl;
     }
   }
Index: trunk/posegraph2.cpp
===================================================================
--- trunk/posegraph2.cpp	(revision 23)
+++ trunk/posegraph2.cpp	(working copy)
@@ -109,7 +109,7 @@
   if (!is)
     return false;
   EdgeList suppressed;
-  uint equivCount=0;
+  unsigned int equivCount=0;
   while (is){
     char buf[LINESIZE];
     is.getline(buf, LINESIZE);
Index: trunk/posegraph3.cpp
===================================================================
--- trunk/posegraph3.cpp	(revision 23)
+++ trunk/posegraph3.cpp	(working copy)
@@ -154,7 +154,7 @@
   if (!is)
     return false;
   EdgeList suppressed;
-  uint equivCount=0;
+  unsigned int equivCount=0;
   while (is){
     char buf[LINESIZE];
     is.getline(buf, LINESIZE);
Index: trunk/toro.cpp
===================================================================
--- trunk/toro.cpp	(revision 23)
+++ trunk/toro.cpp	(working copy)
@@ -35,6 +35,7 @@
  **********************************************************************/
 
 #include <sys/time.h>
+#include <cstdio>
 #include <iostream>
 #include "treeoptimizer2.hh"
 #include <sys/time.h>
Index: trunk/treeoptimizer2.cpp
===================================================================
--- trunk/treeoptimizer2.cpp	(revision 23)
+++ trunk/treeoptimizer2.cpp	(working copy)
@@ -106,7 +106,7 @@
 void TreeOptimizer2::computePreconditioner(){
   gamma[0] = gamma[1] =  gamma[2] = numeric_limits<double>::max();
 
-  for (uint i=0; i<M.size(); i++)
+  for (unsigned int i=0; i<M.size(); i++)
     M[i]=Pose(0.,0.,0.);
 
   int edgeCount=0;
@@ -138,7 +138,7 @@
     for (int dir=0; dir<2; dir++){
       Vertex* n = (dir==0)? e->v1 : e->v2;
       while (n!=top){
-	uint i=n->id;
+	unsigned int i=n->id;
 	M[i].values[0]+=W.values[0][0];
 	M[i].values[1]+=W.values[1][1];
 	M[i].values[2]+=W.values[2][2];
@@ -151,7 +151,7 @@
   }
   
   if (verboseLevel>1){
-    for (uint i=0; i<M.size(); i++){
+    for (unsigned int i=0; i<M.size(); i++){
       cerr << "M[" << i << "]=" << M[i].x() << " " << M[i].y() << " " << M[i].theta() <<endl;
     }
   }
@@ -224,7 +224,7 @@
       for (int dir=0; dir<2; dir++) {
 	Vertex* n = (dir==0)? v1 : v2;
 	while (n!=top){
-	  uint i=n->id;
+	  unsigned int i=n->id;
 	  tw[0]+=1./M[i].values[0];
 	  tw[1]+=1./M[i].values[1];
 	  tw[2]+=1./M[i].values[2];
@@ -244,7 +244,7 @@
 	Vertex* n = (dir==0)? v1 : v2;
 	double sign=(dir==0)? -1. : 1.;
 	while (n!=top){
-	  uint i=n->id;
+	  unsigned int i=n->id;
 	  assert(M[i].values[0]>0);
 	  assert(M[i].values[1]>0);
 	  assert(M[i].values[2]>0);
Index: trunk/treeoptimizer3.cpp
===================================================================
--- trunk/treeoptimizer3.cpp	(revision 23)
+++ trunk/treeoptimizer3.cpp	(working copy)
@@ -95,7 +95,7 @@
     maxRotationalErrors.push_back(mre);
     int interval=3;
     if ((int)maxRotationalErrors.size()>=interval){
-      uint s=maxRotationalErrors.size();
+      unsigned int s=maxRotationalErrors.size();
       double re0 = maxRotationalErrors[s-interval];
       double re1 = maxRotationalErrors[s-1];
 
Index: trunk/Makefile
===================================================================
--- trunk/Makefile	(revision 23)
+++ trunk/Makefile	(working copy)
@@ -31,7 +31,7 @@
 CXXFLAGS += -DCYGWIN
 endif
 
-CXXFLAGS += -O3 -ffast-math -Wall -W 
+CXXFLAGS += -O3 -ffast-math -Wall -W  -fPIC
 IFLAGS =
 LFLAGS =
 
