   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"fix16_exp.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  22              	FOUR_DIV_PI:
  23 0000 F3450100 		.word	83443
  24              		.align	2
  27              	_FOUR_DIV_PI2:
  28 0004 4098FFFF 		.word	-26560
  29              		.align	2
  32              	X4_CORRECTION_COMPONENT:
  33 0008 9A390000 		.word	14746
  34              		.align	2
  37              	PI_DIV_4:
  38 000c 0FC90000 		.word	51471
  39              		.align	2
  42              	THREE_PI_DIV_4:
  43 0010 2F5B0200 		.word	154415
  44              		.align	2
  47              	fix16_max:
  48 0014 FFFFFF7F 		.word	2147483647
  49              		.align	2
  52              	fix16_min:
  53 0018 00000080 		.word	-2147483648
  54              		.align	2
  57              	fix16_overflow:
  58 001c 00000080 		.word	-2147483648
  59              		.align	2
  62              	fix16_pi:
  63 0020 3F240300 		.word	205887
  64              		.align	2
  67              	fix16_e:
  68 0024 E1B70200 		.word	178145
  69              		.align	2
  72              	fix16_one:
  73 0028 00000100 		.word	65536
  74              		.text
  75              		.align	2
  76              		.thumb
  77              		.thumb_func
  79              	int64_from_int32:
  80              	.LFB7:
  81              		.file 1 "../libfixmath/int64.h"
   1:../libfixmath/int64.h **** #ifndef __libfixmath_int64_h__
   2:../libfixmath/int64.h **** #define __libfixmath_int64_h__
   3:../libfixmath/int64.h **** 
   4:../libfixmath/int64.h **** #ifdef __cplusplus
   5:../libfixmath/int64.h **** extern "C"
   6:../libfixmath/int64.h **** {
   7:../libfixmath/int64.h **** #endif
   8:../libfixmath/int64.h **** 
   9:../libfixmath/int64.h **** #ifndef FIXMATH_NO_64BIT
  10:../libfixmath/int64.h **** static inline  int64_t int64_const(int32_t hi, uint32_t lo) { return (((int64_t)hi << 32) | lo); }
  11:../libfixmath/int64.h **** static inline  int64_t int64_from_int32(int32_t x) { return (int64_t)x; }
  82              		.loc 1 11 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 8
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87 0000 80B4     		push	{r7}
  88              	.LCFI0:
  89              		.cfi_def_cfa_offset 4
  90              		.cfi_offset 7, -4
  91 0002 83B0     		sub	sp, sp, #12
  92              	.LCFI1:
  93              		.cfi_def_cfa_offset 16
  94 0004 00AF     		add	r7, sp, #0
  95              	.LCFI2:
  96              		.cfi_def_cfa_register 7
  97 0006 7860     		str	r0, [r7, #4]
  98              		.loc 1 11 0
  99 0008 7968     		ldr	r1, [r7, #4]
 100 000a 0A46     		mov	r2, r1
 101 000c 4FEAE273 		asr	r3, r2, #31
 102 0010 1046     		mov	r0, r2
 103 0012 1946     		mov	r1, r3
 104 0014 07F10C07 		add	r7, r7, #12
 105 0018 BD46     		mov	sp, r7
 106 001a 80BC     		pop	{r7}
 107 001c 7047     		bx	lr
 108              		.cfi_endproc
 109              	.LFE7:
 111 001e 00BF     		.align	2
 112              		.thumb
 113              		.thumb_func
 115              	int64_lo:
 116              	.LFB9:
  12:../libfixmath/int64.h **** static inline  int32_t int64_hi(int64_t x) { return (x >> 32); }
  13:../libfixmath/int64.h **** static inline uint32_t int64_lo(int64_t x) { return (x & ((1ULL << 32) - 1)); }
 117              		.loc 1 13 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122 0020 80B4     		push	{r7}
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 4
 125              		.cfi_offset 7, -4
 126 0022 83B0     		sub	sp, sp, #12
 127              	.LCFI4:
 128              		.cfi_def_cfa_offset 16
 129 0024 00AF     		add	r7, sp, #0
 130              	.LCFI5:
 131              		.cfi_def_cfa_register 7
 132 0026 C7E90001 		strd	r0, [r7]
 133              		.loc 1 13 0
 134 002a 3B68     		ldr	r3, [r7, #0]
 135 002c 1846     		mov	r0, r3
 136 002e 07F10C07 		add	r7, r7, #12
 137 0032 BD46     		mov	sp, r7
 138 0034 80BC     		pop	{r7}
 139 0036 7047     		bx	lr
 140              		.cfi_endproc
 141              	.LFE9:
 143              		.align	2
 144              		.thumb
 145              		.thumb_func
 147              	int64_add:
 148              	.LFB10:
  14:../libfixmath/int64.h **** 
  15:../libfixmath/int64.h **** static inline int64_t int64_add(int64_t x, int64_t y)   { return (x + y);  }
 149              		.loc 1 15 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 16
 152              		@ frame_needed = 1, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154 0038 80B4     		push	{r7}
 155              	.LCFI6:
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 7, -4
 158 003a 85B0     		sub	sp, sp, #20
 159              	.LCFI7:
 160              		.cfi_def_cfa_offset 24
 161 003c 00AF     		add	r7, sp, #0
 162              	.LCFI8:
 163              		.cfi_def_cfa_register 7
 164 003e C7E90201 		strd	r0, [r7, #8]
 165 0042 C7E90023 		strd	r2, [r7]
 166              		.loc 1 15 0
 167 0046 D7E90201 		ldrd	r0, [r7, #8]
 168 004a D7E90023 		ldrd	r2, [r7]
 169 004e 1218     		adds	r2, r2, r0
 170 0050 43EB0103 		adc	r3, r3, r1
 171 0054 1046     		mov	r0, r2
 172 0056 1946     		mov	r1, r3
 173 0058 07F11407 		add	r7, r7, #20
 174 005c BD46     		mov	sp, r7
 175 005e 80BC     		pop	{r7}
 176 0060 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE10:
 180 0062 00BF     		.align	2
 181              		.thumb
 182              		.thumb_func
 184              	int64_shift:
 185              	.LFB13:
  16:../libfixmath/int64.h **** static inline int64_t int64_neg(int64_t x)              { return (-x);     }
  17:../libfixmath/int64.h **** static inline int64_t int64_sub(int64_t x, int64_t y)   { return (x - y);  }
  18:../libfixmath/int64.h **** static inline int64_t int64_shift(int64_t x, int8_t y)  { return (y < 0 ? (x >> -y) : (x << y)); }
 186              		.loc 1 18 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 16
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 0064 F0B4     		push	{r4, r5, r6, r7}
 192              	.LCFI9:
 193              		.cfi_def_cfa_offset 16
 194              		.cfi_offset 7, -4
 195              		.cfi_offset 6, -8
 196              		.cfi_offset 5, -12
 197              		.cfi_offset 4, -16
 198 0066 84B0     		sub	sp, sp, #16
 199              	.LCFI10:
 200              		.cfi_def_cfa_offset 32
 201 0068 00AF     		add	r7, sp, #0
 202              	.LCFI11:
 203              		.cfi_def_cfa_register 7
 204 006a C7E90201 		strd	r0, [r7, #8]
 205 006e 1346     		mov	r3, r2
 206 0070 FB71     		strb	r3, [r7, #7]
 207              		.loc 1 18 0
 208 0072 97F90730 		ldrsb	r3, [r7, #7]
 209 0076 002B     		cmp	r3, #0
 210 0078 18DA     		bge	.L5
 211              		.loc 1 18 0 is_stmt 0 discriminator 1
 212 007a 97F90730 		ldrsb	r3, [r7, #7]
 213 007e C3F10003 		rsb	r3, r3, #0
 214 0082 A3F12002 		sub	r2, r3, #32
 215 0086 F968     		ldr	r1, [r7, #12]
 216 0088 41FA02F1 		asr	r1, r1, r2
 217 008c C3F12000 		rsb	r0, r3, #32
 218 0090 FE68     		ldr	r6, [r7, #12]
 219 0092 06FA00F0 		lsl	r0, r6, r0
 220 0096 BE68     		ldr	r6, [r7, #8]
 221 0098 26FA03F4 		lsr	r4, r6, r3
 222 009c 0443     		orrs	r4, r4, r0
 223 009e 002A     		cmp	r2, #0
 224 00a0 A8BF     		it	ge
 225 00a2 0C46     		movge	r4, r1
 226 00a4 FA68     		ldr	r2, [r7, #12]
 227 00a6 42FA03F5 		asr	r5, r2, r3
 228 00aa 15E0     		b	.L6
 229              	.L5:
 230              		.loc 1 18 0 discriminator 2
 231 00ac 97F90730 		ldrsb	r3, [r7, #7]
 232 00b0 A3F12002 		sub	r2, r3, #32
 233 00b4 B968     		ldr	r1, [r7, #8]
 234 00b6 01FA02F1 		lsl	r1, r1, r2
 235 00ba C3F12000 		rsb	r0, r3, #32
 236 00be BE68     		ldr	r6, [r7, #8]
 237 00c0 26FA00F0 		lsr	r0, r6, r0
 238 00c4 FE68     		ldr	r6, [r7, #12]
 239 00c6 06FA03F5 		lsl	r5, r6, r3
 240 00ca 0543     		orrs	r5, r5, r0
 241 00cc 002A     		cmp	r2, #0
 242 00ce A8BF     		it	ge
 243 00d0 0D46     		movge	r5, r1
 244 00d2 BA68     		ldr	r2, [r7, #8]
 245 00d4 02FA03F4 		lsl	r4, r2, r3
 246              	.L6:
 247              		.loc 1 18 0 discriminator 3
 248 00d8 2246     		mov	r2, r4
 249 00da 2B46     		mov	r3, r5
 250 00dc 1046     		mov	r0, r2
 251 00de 1946     		mov	r1, r3
 252 00e0 07F11007 		add	r7, r7, #16
 253 00e4 BD46     		mov	sp, r7
 254 00e6 F0BC     		pop	{r4, r5, r6, r7}
 255 00e8 7047     		bx	lr
 256              		.cfi_endproc
 257              	.LFE13:
 259 00ea 00BF     		.align	2
 260              		.thumb
 261              		.thumb_func
 263              	int64_mul_i64_i32:
 264              	.LFB15:
  19:../libfixmath/int64.h **** 
  20:../libfixmath/int64.h **** static inline int64_t int64_mul_i32_i32(int32_t x, int32_t y) { return (x * y);  }
  21:../libfixmath/int64.h **** static inline int64_t int64_mul_i64_i32(int64_t x, int32_t y) { return (x * y);  }
 265              		.loc 1 21 0 is_stmt 1
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 16
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269              		@ link register save eliminated.
 270 00ec 80B4     		push	{r7}
 271              	.LCFI12:
 272              		.cfi_def_cfa_offset 4
 273              		.cfi_offset 7, -4
 274 00ee 85B0     		sub	sp, sp, #20
 275              	.LCFI13:
 276              		.cfi_def_cfa_offset 24
 277 00f0 00AF     		add	r7, sp, #0
 278              	.LCFI14:
 279              		.cfi_def_cfa_register 7
 280 00f2 C7E90201 		strd	r0, [r7, #8]
 281 00f6 7A60     		str	r2, [r7, #4]
 282              		.loc 1 21 0
 283 00f8 7968     		ldr	r1, [r7, #4]
 284 00fa 0A46     		mov	r2, r1
 285 00fc 4FEAE273 		asr	r3, r2, #31
 286 0100 B968     		ldr	r1, [r7, #8]
 287 0102 03FB01F0 		mul	r0, r3, r1
 288 0106 F968     		ldr	r1, [r7, #12]
 289 0108 02FB01F1 		mul	r1, r2, r1
 290 010c 4118     		adds	r1, r0, r1
 291 010e B868     		ldr	r0, [r7, #8]
 292 0110 A0FB0223 		umull	r2, r3, r0, r2
 293 0114 C918     		adds	r1, r1, r3
 294 0116 0B46     		mov	r3, r1
 295 0118 1046     		mov	r0, r2
 296 011a 1946     		mov	r1, r3
 297 011c 07F11407 		add	r7, r7, #20
 298 0120 BD46     		mov	sp, r7
 299 0122 80BC     		pop	{r7}
 300 0124 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE15:
 304              		.global	__aeabi_ldivmod
 305 0126 00BF     		.align	2
 306              		.thumb
 307              		.thumb_func
 309              	int64_div_i64_i32:
 310              	.LFB16:
  22:../libfixmath/int64.h **** 
  23:../libfixmath/int64.h **** static inline int64_t int64_div_i64_i32(int64_t x, int32_t y) { return (x / y);  }
 311              		.loc 1 23 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 16
 314              		@ frame_needed = 1, uses_anonymous_args = 0
 315 0128 80B5     		push	{r7, lr}
 316              	.LCFI15:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 14, -4
 319              		.cfi_offset 7, -8
 320 012a 84B0     		sub	sp, sp, #16
 321              	.LCFI16:
 322              		.cfi_def_cfa_offset 24
 323 012c 00AF     		add	r7, sp, #0
 324              	.LCFI17:
 325              		.cfi_def_cfa_register 7
 326 012e C7E90201 		strd	r0, [r7, #8]
 327 0132 7A60     		str	r2, [r7, #4]
 328              		.loc 1 23 0
 329 0134 7968     		ldr	r1, [r7, #4]
 330 0136 0A46     		mov	r2, r1
 331 0138 4FEAE273 		asr	r3, r2, #31
 332 013c D7E90201 		ldrd	r0, [r7, #8]
 333 0140 FFF7FEFF 		bl	__aeabi_ldivmod
 334 0144 0246     		mov	r2, r0
 335 0146 0B46     		mov	r3, r1
 336 0148 1046     		mov	r0, r2
 337 014a 1946     		mov	r1, r3
 338 014c 07F11007 		add	r7, r7, #16
 339 0150 BD46     		mov	sp, r7
 340 0152 80BD     		pop	{r7, pc}
 341              		.cfi_endproc
 342              	.LFE16:
 344              		.bss
 345              		.align	2
 346              	_fix16_exp_cache_index:
 347 0000 00000000 		.space	16384
 347      00000000 
 347      00000000 
 347      00000000 
 347      00000000 
 348              		.align	2
 349              	_fix16_exp_cache_value:
 350 4000 00000000 		.space	16384
 350      00000000 
 350      00000000 
 350      00000000 
 350      00000000 
 351              		.text
 352              		.align	2
 353              		.global	fix16_exp
 354              		.thumb
 355              		.thumb_func
 357              	fix16_exp:
 358              	.LFB23:
 359              		.file 2 "../libfixmath/fix16_exp.c"
   1:../libfixmath/fix16_exp.c **** #include "fix16.h"
   2:../libfixmath/fix16_exp.c **** #include "int64.h"
   3:../libfixmath/fix16_exp.c **** 
   4:../libfixmath/fix16_exp.c **** 
   5:../libfixmath/fix16_exp.c **** 
   6:../libfixmath/fix16_exp.c **** #ifndef FIXMATH_NO_CACHE
   7:../libfixmath/fix16_exp.c **** static fix16_t _fix16_exp_cache_index[4096]  = { 0 };
   8:../libfixmath/fix16_exp.c **** static fix16_t _fix16_exp_cache_value[4096]  = { 0 };
   9:../libfixmath/fix16_exp.c **** #endif
  10:../libfixmath/fix16_exp.c **** 
  11:../libfixmath/fix16_exp.c **** 
  12:../libfixmath/fix16_exp.c **** 
  13:../libfixmath/fix16_exp.c **** fix16_t fix16_exp(fix16_t inValue) {
 360              		.loc 2 13 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 40
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364 0154 B0B5     		push	{r4, r5, r7, lr}
 365              	.LCFI18:
 366              		.cfi_def_cfa_offset 16
 367              		.cfi_offset 14, -4
 368              		.cfi_offset 7, -8
 369              		.cfi_offset 5, -12
 370              		.cfi_offset 4, -16
 371 0156 8AB0     		sub	sp, sp, #40
 372              	.LCFI19:
 373              		.cfi_def_cfa_offset 56
 374 0158 00AF     		add	r7, sp, #0
 375              	.LCFI20:
 376              		.cfi_def_cfa_register 7
 377 015a 7860     		str	r0, [r7, #4]
  14:../libfixmath/fix16_exp.c **** 	if(inValue == 0)
 378              		.loc 2 14 0
 379 015c 7B68     		ldr	r3, [r7, #4]
 380 015e 002B     		cmp	r3, #0
 381 0160 05D1     		bne	.L10
  15:../libfixmath/fix16_exp.c **** 		return fix16_one;
 382              		.loc 2 15 0
 383 0162 40F20003 		movw	r3, #:lower16:fix16_one
 384 0166 C0F20003 		movt	r3, #:upper16:fix16_one
 385 016a 1B68     		ldr	r3, [r3, #0]
 386 016c BCE0     		b	.L11
 387              	.L10:
  16:../libfixmath/fix16_exp.c **** 	if(inValue == fix16_one)
 388              		.loc 2 16 0
 389 016e 40F20003 		movw	r3, #:lower16:fix16_one
 390 0172 C0F20003 		movt	r3, #:upper16:fix16_one
 391 0176 1B68     		ldr	r3, [r3, #0]
 392 0178 7A68     		ldr	r2, [r7, #4]
 393 017a 9A42     		cmp	r2, r3
 394 017c 05D1     		bne	.L12
  17:../libfixmath/fix16_exp.c **** 		return fix16_e;
 395              		.loc 2 17 0
 396 017e 40F20003 		movw	r3, #:lower16:fix16_e
 397 0182 C0F20003 		movt	r3, #:upper16:fix16_e
 398 0186 1B68     		ldr	r3, [r3, #0]
 399 0188 AEE0     		b	.L11
 400              	.L12:
  18:../libfixmath/fix16_exp.c **** 	if(inValue > 681391)
 401              		.loc 2 18 0
 402 018a 7A68     		ldr	r2, [r7, #4]
 403 018c 46F2AF53 		movw	r3, #26031
 404 0190 C0F20A03 		movt	r3, 10
 405 0194 9A42     		cmp	r2, r3
 406 0196 05DD     		ble	.L13
  19:../libfixmath/fix16_exp.c **** 		return fix16_max;
 407              		.loc 2 19 0
 408 0198 40F20003 		movw	r3, #:lower16:fix16_max
 409 019c C0F20003 		movt	r3, #:upper16:fix16_max
 410 01a0 1B68     		ldr	r3, [r3, #0]
 411 01a2 A1E0     		b	.L11
 412              	.L13:
  20:../libfixmath/fix16_exp.c **** 	if(inValue < -726817)
 413              		.loc 2 20 0
 414 01a4 7A68     		ldr	r2, [r7, #4]
 415 01a6 4EF6DF03 		movw	r3, #59615
 416 01aa CFF6F473 		movt	r3, 65524
 417 01ae 9A42     		cmp	r2, r3
 418 01b0 02DA     		bge	.L14
  21:../libfixmath/fix16_exp.c **** 		return 0;
 419              		.loc 2 21 0
 420 01b2 4FF00003 		mov	r3, #0
 421 01b6 97E0     		b	.L11
 422              	.L14:
  22:../libfixmath/fix16_exp.c **** 
  23:../libfixmath/fix16_exp.c **** 	#ifndef FIXMATH_NO_CACHE
  24:../libfixmath/fix16_exp.c **** 	fix16_t tempIndex = (inValue ^ (inValue >> 16));
 423              		.loc 2 24 0
 424 01b8 7B68     		ldr	r3, [r7, #4]
 425 01ba 4FEA2342 		asr	r2, r3, #16
 426 01be 7B68     		ldr	r3, [r7, #4]
 427 01c0 5340     		eors	r3, r3, r2
 428 01c2 FB60     		str	r3, [r7, #12]
  25:../libfixmath/fix16_exp.c **** 	tempIndex = (inValue ^ (inValue >> 4)) & 0x0FFF;
 429              		.loc 2 25 0
 430 01c4 7B68     		ldr	r3, [r7, #4]
 431 01c6 4FEA2312 		asr	r2, r3, #4
 432 01ca 7B68     		ldr	r3, [r7, #4]
 433 01cc 5340     		eors	r3, r3, r2
 434 01ce 4FEA0353 		lsl	r3, r3, #20
 435 01d2 4FEA1353 		lsr	r3, r3, #20
 436 01d6 FB60     		str	r3, [r7, #12]
  26:../libfixmath/fix16_exp.c **** 	if(_fix16_exp_cache_index[tempIndex] == inValue)
 437              		.loc 2 26 0
 438 01d8 40F20003 		movw	r3, #:lower16:_fix16_exp_cache_index
 439 01dc C0F20003 		movt	r3, #:upper16:_fix16_exp_cache_index
 440 01e0 FA68     		ldr	r2, [r7, #12]
 441 01e2 53F82220 		ldr	r2, [r3, r2, lsl #2]
 442 01e6 7B68     		ldr	r3, [r7, #4]
 443 01e8 9A42     		cmp	r2, r3
 444 01ea 07D1     		bne	.L15
  27:../libfixmath/fix16_exp.c **** 		return _fix16_exp_cache_value[tempIndex];
 445              		.loc 2 27 0
 446 01ec 40F20003 		movw	r3, #:lower16:_fix16_exp_cache_value
 447 01f0 C0F20003 		movt	r3, #:upper16:_fix16_exp_cache_value
 448 01f4 FA68     		ldr	r2, [r7, #12]
 449 01f6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 450 01fa 75E0     		b	.L11
 451              	.L15:
  28:../libfixmath/fix16_exp.c **** 	#endif
  29:../libfixmath/fix16_exp.c **** 
  30:../libfixmath/fix16_exp.c **** 	int64_t tempOut = int64_add(int64_from_int32(fix16_one), int64_from_int32(inValue));
 452              		.loc 2 30 0
 453 01fc 40F20003 		movw	r3, #:lower16:fix16_one
 454 0200 C0F20003 		movt	r3, #:upper16:fix16_one
 455 0204 1B68     		ldr	r3, [r3, #0]
 456 0206 1846     		mov	r0, r3
 457 0208 FFF7FAFE 		bl	int64_from_int32
 458 020c 0446     		mov	r4, r0
 459 020e 0D46     		mov	r5, r1
 460 0210 7868     		ldr	r0, [r7, #4]
 461 0212 FFF7F5FE 		bl	int64_from_int32
 462 0216 0246     		mov	r2, r0
 463 0218 0B46     		mov	r3, r1
 464 021a 2046     		mov	r0, r4
 465 021c 2946     		mov	r1, r5
 466 021e FFF70BFF 		bl	int64_add
 467 0222 C7E90801 		strd	r0, [r7, #32]
  31:../libfixmath/fix16_exp.c **** 	int64_t tempValue = int64_from_int32(inValue);
 468              		.loc 2 31 0
 469 0226 7868     		ldr	r0, [r7, #4]
 470 0228 FFF7EAFE 		bl	int64_from_int32
 471 022c C7E90601 		strd	r0, [r7, #24]
  32:../libfixmath/fix16_exp.c **** 	uint32_t i, n;
  33:../libfixmath/fix16_exp.c **** 	for(i = 3, n = 2; i < 13; n *= i, i++) {
 472              		.loc 2 33 0
 473 0230 4FF00303 		mov	r3, #3
 474 0234 7B61     		str	r3, [r7, #20]
 475 0236 4FF00203 		mov	r3, #2
 476 023a 3B61     		str	r3, [r7, #16]
 477 023c 37E0     		b	.L16
 478              	.L17:
  34:../libfixmath/fix16_exp.c **** 		tempValue = int64_mul_i64_i32(tempValue, inValue);
 479              		.loc 2 34 0 discriminator 2
 480 023e D7E90601 		ldrd	r0, [r7, #24]
 481 0242 7A68     		ldr	r2, [r7, #4]
 482 0244 FFF752FF 		bl	int64_mul_i64_i32
 483 0248 C7E90601 		strd	r0, [r7, #24]
  35:../libfixmath/fix16_exp.c **** 		#ifndef FIXMATH_NO_ROUNDING
  36:../libfixmath/fix16_exp.c **** 		tempValue = int64_add(tempValue, int64_from_int32(fix16_one >> 1));
 484              		.loc 2 36 0 discriminator 2
 485 024c 40F20003 		movw	r3, #:lower16:fix16_one
 486 0250 C0F20003 		movt	r3, #:upper16:fix16_one
 487 0254 1B68     		ldr	r3, [r3, #0]
 488 0256 4FEA6303 		asr	r3, r3, #1
 489 025a 1846     		mov	r0, r3
 490 025c FFF7D0FE 		bl	int64_from_int32
 491 0260 0246     		mov	r2, r0
 492 0262 0B46     		mov	r3, r1
 493 0264 D7E90601 		ldrd	r0, [r7, #24]
 494 0268 FFF7E6FE 		bl	int64_add
 495 026c C7E90601 		strd	r0, [r7, #24]
  37:../libfixmath/fix16_exp.c **** 		#endif
  38:../libfixmath/fix16_exp.c **** 		tempValue = int64_shift(tempValue, -16);
 496              		.loc 2 38 0 discriminator 2
 497 0270 D7E90601 		ldrd	r0, [r7, #24]
 498 0274 6FF00F02 		mvn	r2, #15
 499 0278 FFF7F4FE 		bl	int64_shift
 500 027c C7E90601 		strd	r0, [r7, #24]
  39:../libfixmath/fix16_exp.c **** 		tempOut = int64_add(tempOut, int64_div_i64_i32(tempValue, n));
 501              		.loc 2 39 0 discriminator 2
 502 0280 3B69     		ldr	r3, [r7, #16]
 503 0282 D7E90601 		ldrd	r0, [r7, #24]
 504 0286 1A46     		mov	r2, r3
 505 0288 FFF74EFF 		bl	int64_div_i64_i32
 506 028c 0246     		mov	r2, r0
 507 028e 0B46     		mov	r3, r1
 508 0290 D7E90801 		ldrd	r0, [r7, #32]
 509 0294 FFF7D0FE 		bl	int64_add
 510 0298 C7E90801 		strd	r0, [r7, #32]
  33:../libfixmath/fix16_exp.c **** 	for(i = 3, n = 2; i < 13; n *= i, i++) {
 511              		.loc 2 33 0 discriminator 2
 512 029c 3B69     		ldr	r3, [r7, #16]
 513 029e 7A69     		ldr	r2, [r7, #20]
 514 02a0 02FB03F3 		mul	r3, r2, r3
 515 02a4 3B61     		str	r3, [r7, #16]
 516 02a6 7B69     		ldr	r3, [r7, #20]
 517 02a8 03F10103 		add	r3, r3, #1
 518 02ac 7B61     		str	r3, [r7, #20]
 519              	.L16:
  33:../libfixmath/fix16_exp.c **** 	for(i = 3, n = 2; i < 13; n *= i, i++) {
 520              		.loc 2 33 0 is_stmt 0 discriminator 1
 521 02ae 7B69     		ldr	r3, [r7, #20]
 522 02b0 0C2B     		cmp	r3, #12
 523 02b2 C4D9     		bls	.L17
  40:../libfixmath/fix16_exp.c **** 	}
  41:../libfixmath/fix16_exp.c **** 
  42:../libfixmath/fix16_exp.c **** 	#ifndef FIXMATH_NO_CACHE
  43:../libfixmath/fix16_exp.c **** 	_fix16_exp_cache_index[tempIndex] = inValue;
 524              		.loc 2 43 0 is_stmt 1
 525 02b4 40F20003 		movw	r3, #:lower16:_fix16_exp_cache_index
 526 02b8 C0F20003 		movt	r3, #:upper16:_fix16_exp_cache_index
 527 02bc FA68     		ldr	r2, [r7, #12]
 528 02be 7968     		ldr	r1, [r7, #4]
 529 02c0 43F82210 		str	r1, [r3, r2, lsl #2]
  44:../libfixmath/fix16_exp.c **** 	_fix16_exp_cache_value[tempIndex] = int64_lo(tempOut);
 530              		.loc 2 44 0
 531 02c4 D7E90801 		ldrd	r0, [r7, #32]
 532 02c8 FFF7AAFE 		bl	int64_lo
 533 02cc 0346     		mov	r3, r0
 534 02ce 1946     		mov	r1, r3
 535 02d0 40F20003 		movw	r3, #:lower16:_fix16_exp_cache_value
 536 02d4 C0F20003 		movt	r3, #:upper16:_fix16_exp_cache_value
 537 02d8 FA68     		ldr	r2, [r7, #12]
 538 02da 43F82210 		str	r1, [r3, r2, lsl #2]
  45:../libfixmath/fix16_exp.c **** 	#endif
  46:../libfixmath/fix16_exp.c **** 
  47:../libfixmath/fix16_exp.c **** 	return int64_lo(tempOut);
 539              		.loc 2 47 0
 540 02de D7E90801 		ldrd	r0, [r7, #32]
 541 02e2 FFF79DFE 		bl	int64_lo
 542 02e6 0346     		mov	r3, r0
 543              	.L11:
  48:../libfixmath/fix16_exp.c **** }
 544              		.loc 2 48 0
 545 02e8 1846     		mov	r0, r3
 546 02ea 07F12807 		add	r7, r7, #40
 547 02ee BD46     		mov	sp, r7
 548 02f0 B0BD     		pop	{r4, r5, r7, pc}
 549              		.cfi_endproc
 550              	.LFE23:
 552              	.Letext0:
 553              		.file 3 "/opt/CodeSourcery/arm-2011.09/bin/../lib/gcc/arm-none-eabi/4.6.1/../../../../arm-none-eab
 554              		.file 4 "../libfixmath/fix16.h"
DEFINED SYMBOLS
                            *ABS*:00000000 fix16_exp.c
     /tmp/ccZr9Vaf.s:19     .rodata:00000000 $d
     /tmp/ccZr9Vaf.s:22     .rodata:00000000 FOUR_DIV_PI
     /tmp/ccZr9Vaf.s:27     .rodata:00000004 _FOUR_DIV_PI2
     /tmp/ccZr9Vaf.s:32     .rodata:00000008 X4_CORRECTION_COMPONENT
     /tmp/ccZr9Vaf.s:37     .rodata:0000000c PI_DIV_4
     /tmp/ccZr9Vaf.s:42     .rodata:00000010 THREE_PI_DIV_4
     /tmp/ccZr9Vaf.s:47     .rodata:00000014 fix16_max
     /tmp/ccZr9Vaf.s:52     .rodata:00000018 fix16_min
     /tmp/ccZr9Vaf.s:57     .rodata:0000001c fix16_overflow
     /tmp/ccZr9Vaf.s:62     .rodata:00000020 fix16_pi
     /tmp/ccZr9Vaf.s:67     .rodata:00000024 fix16_e
     /tmp/ccZr9Vaf.s:72     .rodata:00000028 fix16_one
     /tmp/ccZr9Vaf.s:75     .text:00000000 $t
     /tmp/ccZr9Vaf.s:79     .text:00000000 int64_from_int32
     /tmp/ccZr9Vaf.s:115    .text:00000020 int64_lo
     /tmp/ccZr9Vaf.s:147    .text:00000038 int64_add
     /tmp/ccZr9Vaf.s:184    .text:00000064 int64_shift
     /tmp/ccZr9Vaf.s:263    .text:000000ec int64_mul_i64_i32
     /tmp/ccZr9Vaf.s:309    .text:00000128 int64_div_i64_i32
     /tmp/ccZr9Vaf.s:345    .bss:00000000 $d
     /tmp/ccZr9Vaf.s:346    .bss:00000000 _fix16_exp_cache_index
     /tmp/ccZr9Vaf.s:349    .bss:00004000 _fix16_exp_cache_value
     /tmp/ccZr9Vaf.s:357    .text:00000154 fix16_exp
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_ldivmod
