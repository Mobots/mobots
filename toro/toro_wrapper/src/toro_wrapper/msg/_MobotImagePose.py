"""autogenerated by genmsg_py from MobotImagePose.msg. Do not edit."""
import roslib.message
import struct

import toro_wrapper.msg
import std_msgs.msg

class MobotImagePose(roslib.message.Message):
  _md5sum = "125877225c2642460b2b1a4f77ae2256"
  _type = "toro_wrapper/MobotImagePose"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message contains a compressed image, pose, and mobotID

Header header		# Header timestamp should be acquisition time of image
					# Header frame_id should be optical frame of camera
					# origin of frame should be optical center of cameara
					# +x should point to the right in the image
					# +y should point down in the image
					# +z should point into to plane of the image

string format		# Specifies the format of the data
					#   Acceptable values:
					#     jpeg, png
uint8[] data		# Compressed image buffer

Pose2D pose2D		# Pose of the image
int8 mobotID		# ID of the Mobot which sent the image
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: toro_wrapper/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['header','format','data','pose2D','mobotID']
  _slot_types = ['Header','string','uint8[]','toro_wrapper/Pose2D','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,format,data,pose2D,mobotID
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(MobotImagePose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.format is None:
        self.format = ''
      if self.data is None:
        self.data = ''
      if self.pose2D is None:
        self.pose2D = toro_wrapper.msg.Pose2D()
      if self.mobotID is None:
        self.mobotID = 0
    else:
      self.header = std_msgs.msg._Header.Header()
      self.format = ''
      self.data = ''
      self.pose2D = toro_wrapper.msg.Pose2D()
      self.mobotID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.format
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3db.pack(_x.pose2D.x, _x.pose2D.y, _x.pose2D.theta, _x.mobotID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.pose2D is None:
        self.pose2D = toro_wrapper.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.pose2D.x, _x.pose2D.y, _x.pose2D.theta, _x.mobotID,) = _struct_3db.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.format
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3db.pack(_x.pose2D.x, _x.pose2D.y, _x.pose2D.theta, _x.mobotID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.pose2D is None:
        self.pose2D = toro_wrapper.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.pose2D.x, _x.pose2D.y, _x.pose2D.theta, _x.mobotID,) = _struct_3db.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3db = struct.Struct("<3db")
