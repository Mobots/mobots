   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"spi_1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	mouse_data,14,4
  19              		.comm	spi1_datastat,1,1
  20              		.comm	spi2_datastat,1,1
  21              		.comm	SPI1_Data,262,4
  22              		.align	2
  23              		.global	spi1_init
  24              		.thumb
  25              		.thumb_func
  27              	spi1_init:
  28              	.LFB29:
  29              		.file 1 "../spi_1.c"
   1:../spi_1.c    **** /*
   2:../spi_1.c    ****  * spi_1.c
   3:../spi_1.c    ****  *
   4:../spi_1.c    ****  *  Created on: 26.06.2012
   5:../spi_1.c    ****  *      Author: simon
   6:../spi_1.c    ****  */
   7:../spi_1.c    **** 
   8:../spi_1.c    **** #include "stm32f10x_spi.h"
   9:../spi_1.c    **** #include "stm32f10x_it.h"
  10:../spi_1.c    **** #include "mousesensor.h"
  11:../spi_1.c    **** 
  12:../spi_1.c    **** #define SPI_BUFFER_SIZE 256
  13:../spi_1.c    **** 
  14:../spi_1.c    **** 
  15:../spi_1.c    **** struct SPI_Data {
  16:../spi_1.c    **** 	u8 RxBuffer[SPI_BUFFER_SIZE];
  17:../spi_1.c    **** 	u16 RxWritePointer;
  18:../spi_1.c    **** 	u16 RxReadPointer;
  19:../spi_1.c    **** 
  20:../spi_1.c    **** 	u8 RxBufferFullError;
  21:../spi_1.c    **** };
  22:../spi_1.c    **** 
  23:../spi_1.c    **** volatile struct SPI_Data SPI1_Data;
  24:../spi_1.c    **** 
  25:../spi_1.c    **** void spi1_init(void) {
  30              		.loc 1 25 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 24
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 14, -4
  38              		.cfi_offset 7, -8
  39 0002 86B0     		sub	sp, sp, #24
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 32
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  26:../spi_1.c    **** 	RCC_APB2PeriphClockCmd(
  45              		.loc 1 26 0
  46 0006 41F20500 		movw	r0, #4101
  47 000a 4FF00101 		mov	r1, #1
  48 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  27:../spi_1.c    **** 			RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA | RCC_APB2Periph_SPI1,
  28:../spi_1.c    **** 			ENABLE);
  29:../spi_1.c    **** 	GPIO_InitTypeDef GPIO_InitStructure;
  30:../spi_1.c    **** 
  31:../spi_1.c    **** 	GPIO_StructInit(&GPIO_InitStructure);
  49              		.loc 1 31 0
  50 0012 07F11403 		add	r3, r7, #20
  51 0016 1846     		mov	r0, r3
  52 0018 FFF7FEFF 		bl	GPIO_StructInit
  32:../spi_1.c    **** 
  33:../spi_1.c    **** 	// A5 SCK, A6 MISO, A7 MOSI
  34:../spi_1.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
  53              		.loc 1 34 0
  54 001c 4FF0E003 		mov	r3, #224
  55 0020 BB82     		strh	r3, [r7, #20]	@ movhi
  35:../spi_1.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  56              		.loc 1 35 0
  57 0022 4FF00303 		mov	r3, #3
  58 0026 BB75     		strb	r3, [r7, #22]
  36:../spi_1.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  59              		.loc 1 36 0
  60 0028 4FF01803 		mov	r3, #24
  61 002c FB75     		strb	r3, [r7, #23]
  37:../spi_1.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
  62              		.loc 1 37 0
  63 002e 07F11403 		add	r3, r7, #20
  64 0032 4FF40060 		mov	r0, #2048
  65 0036 C4F20100 		movt	r0, 16385
  66 003a 1946     		mov	r1, r3
  67 003c FFF7FEFF 		bl	GPIO_Init
  38:../spi_1.c    **** 
  39:../spi_1.c    **** //	// A6 MISO IN FLOTING
  40:../spi_1.c    **** //	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
  41:../spi_1.c    **** //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  42:../spi_1.c    **** //	GPIO_Init(GPIOA, &GPIO_InitStructure);
  43:../spi_1.c    **** 
  44:../spi_1.c    **** //Pin A4 SS
  45:../spi_1.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
  68              		.loc 1 45 0
  69 0040 4FF01003 		mov	r3, #16
  70 0044 BB82     		strh	r3, [r7, #20]	@ movhi
  46:../spi_1.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  71              		.loc 1 46 0
  72 0046 4FF01003 		mov	r3, #16
  73 004a FB75     		strb	r3, [r7, #23]
  47:../spi_1.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
  74              		.loc 1 47 0
  75 004c 07F11403 		add	r3, r7, #20
  76 0050 4FF40060 		mov	r0, #2048
  77 0054 C4F20100 		movt	r0, 16385
  78 0058 1946     		mov	r1, r3
  79 005a FFF7FEFF 		bl	GPIO_Init
  48:../spi_1.c    **** 
  49:../spi_1.c    **** 	SPI1_Data.RxReadPointer = 0;
  80              		.loc 1 49 0
  81 005e 40F20003 		movw	r3, #:lower16:SPI1_Data
  82 0062 C0F20003 		movt	r3, #:upper16:SPI1_Data
  83 0066 4FF00002 		mov	r2, #0
  84 006a A3F80221 		strh	r2, [r3, #258]	@ movhi
  50:../spi_1.c    **** 	SPI1_Data.RxWritePointer = 0;
  85              		.loc 1 50 0
  86 006e 40F20003 		movw	r3, #:lower16:SPI1_Data
  87 0072 C0F20003 		movt	r3, #:upper16:SPI1_Data
  88 0076 4FF00002 		mov	r2, #0
  89 007a A3F80021 		strh	r2, [r3, #256]	@ movhi
  51:../spi_1.c    **** 
  52:../spi_1.c    **** //	NVIC_InitTypeDef NVIC_InitStructure;
  53:../spi_1.c    **** //	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
  54:../spi_1.c    **** //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  55:../spi_1.c    **** //	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  56:../spi_1.c    **** //	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  57:../spi_1.c    **** //	NVIC_Init(&NVIC_InitStructure);
  58:../spi_1.c    **** 
  59:../spi_1.c    **** 	SPI_InitTypeDef SPI_InitStructure;
  60:../spi_1.c    **** 	SPI_StructInit(&SPI_InitStructure);
  90              		.loc 1 60 0
  91 007e 3B46     		mov	r3, r7
  92 0080 1846     		mov	r0, r3
  93 0082 FFF7FEFF 		bl	SPI_StructInit
  61:../spi_1.c    **** 
  62:../spi_1.c    **** 	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  94              		.loc 1 62 0
  95 0086 4FF00003 		mov	r3, #0
  96 008a 3B80     		strh	r3, [r7, #0]	@ movhi
  63:../spi_1.c    **** 	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
  97              		.loc 1 63 0
  98 008c 4FF48273 		mov	r3, #260
  99 0090 7B80     		strh	r3, [r7, #2]	@ movhi
  64:../spi_1.c    **** 	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 100              		.loc 1 64 0
 101 0092 4FF00003 		mov	r3, #0
 102 0096 BB80     		strh	r3, [r7, #4]	@ movhi
  65:../spi_1.c    **** 	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 103              		.loc 1 65 0
 104 0098 4FF00203 		mov	r3, #2
 105 009c FB80     		strh	r3, [r7, #6]	@ movhi
  66:../spi_1.c    **** 	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 106              		.loc 1 66 0
 107 009e 4FF00103 		mov	r3, #1
 108 00a2 3B81     		strh	r3, [r7, #8]	@ movhi
  67:../spi_1.c    **** 	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 109              		.loc 1 67 0
 110 00a4 4FF40073 		mov	r3, #512
 111 00a8 7B81     		strh	r3, [r7, #10]	@ movhi
  68:../spi_1.c    **** 	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
 112              		.loc 1 68 0
 113 00aa 4FF02003 		mov	r3, #32
 114 00ae BB81     		strh	r3, [r7, #12]	@ movhi
  69:../spi_1.c    **** 	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 115              		.loc 1 69 0
 116 00b0 4FF00003 		mov	r3, #0
 117 00b4 FB81     		strh	r3, [r7, #14]	@ movhi
  70:../spi_1.c    **** 	SPI_InitStructure.SPI_CRCPolynomial = 7;
 118              		.loc 1 70 0
 119 00b6 4FF00703 		mov	r3, #7
 120 00ba 3B82     		strh	r3, [r7, #16]	@ movhi
  71:../spi_1.c    **** 	SPI_Init(SPI1, &SPI_InitStructure);
 121              		.loc 1 71 0
 122 00bc 3B46     		mov	r3, r7
 123 00be 4FF44050 		mov	r0, #12288
 124 00c2 C4F20100 		movt	r0, 16385
 125 00c6 1946     		mov	r1, r3
 126 00c8 FFF7FEFF 		bl	SPI_Init
  72:../spi_1.c    **** 
  73:../spi_1.c    **** 	//SPI_SSOutputCmd(SPI1, ENABLE);
  74:../spi_1.c    **** 	//SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
  75:../spi_1.c    **** 	SPI_Cmd(SPI1, ENABLE);
 127              		.loc 1 75 0
 128 00cc 4FF44050 		mov	r0, #12288
 129 00d0 C4F20100 		movt	r0, 16385
 130 00d4 4FF00101 		mov	r1, #1
 131 00d8 FFF7FEFF 		bl	SPI_Cmd
  76:../spi_1.c    **** 	GPIO_SetBits(GPIOA, GPIO_Pin_4);
 132              		.loc 1 76 0
 133 00dc 4FF40060 		mov	r0, #2048
 134 00e0 C4F20100 		movt	r0, 16385
 135 00e4 4FF01001 		mov	r1, #16
 136 00e8 FFF7FEFF 		bl	GPIO_SetBits
  77:../spi_1.c    **** }
 137              		.loc 1 77 0
 138 00ec 07F11807 		add	r7, r7, #24
 139 00f0 BD46     		mov	sp, r7
 140 00f2 80BD     		pop	{r7, pc}
 141              		.cfi_endproc
 142              	.LFE29:
 144              		.align	2
 145              		.global	spi1_SelectChip
 146              		.thumb
 147              		.thumb_func
 149              	spi1_SelectChip:
 150              	.LFB30:
  78:../spi_1.c    **** 
  79:../spi_1.c    **** void spi1_SelectChip() {
 151              		.loc 1 79 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155 00f4 80B5     		push	{r7, lr}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 14, -4
 159              		.cfi_offset 7, -8
 160 00f6 00AF     		add	r7, sp, #0
 161              	.LCFI4:
 162              		.cfi_def_cfa_register 7
  80:../spi_1.c    **** 	//enable clock by sending
  81:../spi_1.c    **** 	//pull down clock selcet
  82:../spi_1.c    **** 	GPIO_ResetBits(GPIOA, GPIO_Pin_4);
 163              		.loc 1 82 0
 164 00f8 4FF40060 		mov	r0, #2048
 165 00fc C4F20100 		movt	r0, 16385
 166 0100 4FF01001 		mov	r1, #16
 167 0104 FFF7FEFF 		bl	GPIO_ResetBits
  83:../spi_1.c    **** }
 168              		.loc 1 83 0
 169 0108 80BD     		pop	{r7, pc}
 170              		.cfi_endproc
 171              	.LFE30:
 173 010a 00BF     		.align	2
 174              		.global	spi1_DeselectChip
 175              		.thumb
 176              		.thumb_func
 178              	spi1_DeselectChip:
 179              	.LFB31:
  84:../spi_1.c    **** 
  85:../spi_1.c    **** void spi1_DeselectChip() {
 180              		.loc 1 85 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 1, uses_anonymous_args = 0
 184 010c 80B5     		push	{r7, lr}
 185              	.LCFI5:
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 14, -4
 188              		.cfi_offset 7, -8
 189 010e 00AF     		add	r7, sp, #0
 190              	.LCFI6:
 191              		.cfi_def_cfa_register 7
  86:../spi_1.c    **** 	// pull up clock select
  87:../spi_1.c    **** 	GPIO_SetBits(GPIOA, GPIO_Pin_4);
 192              		.loc 1 87 0
 193 0110 4FF40060 		mov	r0, #2048
 194 0114 C4F20100 		movt	r0, 16385
 195 0118 4FF01001 		mov	r1, #16
 196 011c FFF7FEFF 		bl	GPIO_SetBits
  88:../spi_1.c    **** }
 197              		.loc 1 88 0
 198 0120 80BD     		pop	{r7, pc}
 199              		.cfi_endproc
 200              	.LFE31:
 202 0122 00BF     		.align	2
 203              		.global	spi1_SendData
 204              		.thumb
 205              		.thumb_func
 207              	spi1_SendData:
 208              	.LFB32:
  89:../spi_1.c    **** 
  90:../spi_1.c    **** int spi1_SendData(const unsigned char *buffer, const unsigned int count) {
 209              		.loc 1 90 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 16
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213 0124 80B5     		push	{r7, lr}
 214              	.LCFI7:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 14, -4
 217              		.cfi_offset 7, -8
 218 0126 84B0     		sub	sp, sp, #16
 219              	.LCFI8:
 220              		.cfi_def_cfa_offset 24
 221 0128 00AF     		add	r7, sp, #0
 222              	.LCFI9:
 223              		.cfi_def_cfa_register 7
 224 012a 7860     		str	r0, [r7, #4]
 225 012c 3960     		str	r1, [r7, #0]
  91:../spi_1.c    **** 
  92:../spi_1.c    **** 	u32 pos = 0;
 226              		.loc 1 92 0
 227 012e 4FF00003 		mov	r3, #0
 228 0132 FB60     		str	r3, [r7, #12]
  93:../spi_1.c    **** 
  94:../spi_1.c    **** 	//write byte by byte in buffer
  95:../spi_1.c    **** 	for (pos = 0; pos < count; pos++) {
 229              		.loc 1 95 0
 230 0134 4FF00003 		mov	r3, #0
 231 0138 FB60     		str	r3, [r7, #12]
 232 013a 1EE0     		b	.L5
 233              	.L7:
  96:../spi_1.c    **** 
  97:../spi_1.c    **** 		SPI_I2S_SendData(SPI1, buffer[pos]);
 234              		.loc 1 97 0
 235 013c 7A68     		ldr	r2, [r7, #4]
 236 013e FB68     		ldr	r3, [r7, #12]
 237 0140 D318     		adds	r3, r2, r3
 238 0142 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 239 0144 4FF44050 		mov	r0, #12288
 240 0148 C4F20100 		movt	r0, 16385
 241 014c 1946     		mov	r1, r3
 242 014e FFF7FEFF 		bl	SPI_I2S_SendData
  98:../spi_1.c    **** 
  99:../spi_1.c    **** 		//Wait until data is send
 100:../spi_1.c    **** 		 while (!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 243              		.loc 1 100 0
 244 0152 00BF     		nop
 245              	.L6:
 246              		.loc 1 100 0 is_stmt 0 discriminator 1
 247 0154 4FF44050 		mov	r0, #12288
 248 0158 C4F20100 		movt	r0, 16385
 249 015c 4FF00201 		mov	r1, #2
 250 0160 FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 251 0164 0346     		mov	r3, r0
 252 0166 002B     		cmp	r3, #0
 253 0168 F4D0     		beq	.L6
 101:../spi_1.c    **** 		delay_us(1);
 254              		.loc 1 101 0 is_stmt 1
 255 016a 4FF00100 		mov	r0, #1
 256 016e FFF7FEFF 		bl	delay_us
  95:../spi_1.c    **** 	for (pos = 0; pos < count; pos++) {
 257              		.loc 1 95 0
 258 0172 FB68     		ldr	r3, [r7, #12]
 259 0174 03F10103 		add	r3, r3, #1
 260 0178 FB60     		str	r3, [r7, #12]
 261              	.L5:
  95:../spi_1.c    **** 	for (pos = 0; pos < count; pos++) {
 262              		.loc 1 95 0 is_stmt 0 discriminator 1
 263 017a FA68     		ldr	r2, [r7, #12]
 264 017c 3B68     		ldr	r3, [r7, #0]
 265 017e 9A42     		cmp	r2, r3
 266 0180 DCD3     		bcc	.L7
 102:../spi_1.c    **** 	}
 103:../spi_1.c    **** 
 104:../spi_1.c    **** 	return count;
 267              		.loc 1 104 0 is_stmt 1
 268 0182 3B68     		ldr	r3, [r7, #0]
 105:../spi_1.c    **** }
 269              		.loc 1 105 0
 270 0184 1846     		mov	r0, r3
 271 0186 07F11007 		add	r7, r7, #16
 272 018a BD46     		mov	sp, r7
 273 018c 80BD     		pop	{r7, pc}
 274              		.cfi_endproc
 275              	.LFE32:
 277 018e 00BF     		.align	2
 278              		.global	spi1_GetData
 279              		.thumb
 280              		.thumb_func
 282              	spi1_GetData:
 283              	.LFB33:
 106:../spi_1.c    **** 
 107:../spi_1.c    **** int spi1_GetData(unsigned char *buffer, const unsigned int buff_length){
 284              		.loc 1 107 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 16
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 0190 90B5     		push	{r4, r7, lr}
 289              	.LCFI10:
 290              		.cfi_def_cfa_offset 12
 291              		.cfi_offset 14, -4
 292              		.cfi_offset 7, -8
 293              		.cfi_offset 4, -12
 294 0192 85B0     		sub	sp, sp, #20
 295              	.LCFI11:
 296              		.cfi_def_cfa_offset 32
 297 0194 00AF     		add	r7, sp, #0
 298              	.LCFI12:
 299              		.cfi_def_cfa_register 7
 300 0196 7860     		str	r0, [r7, #4]
 301 0198 3960     		str	r1, [r7, #0]
 108:../spi_1.c    **** 
 109:../spi_1.c    **** 	u32 pos = 0;
 302              		.loc 1 109 0
 303 019a 4FF00003 		mov	r3, #0
 304 019e FB60     		str	r3, [r7, #12]
 110:../spi_1.c    **** 
 111:../spi_1.c    **** 	for (pos = 0 ; pos < buff_length; pos++) {
 305              		.loc 1 111 0
 306 01a0 4FF00003 		mov	r3, #0
 307 01a4 FB60     		str	r3, [r7, #12]
 308 01a6 23E0     		b	.L9
 309              	.L11:
 112:../spi_1.c    **** 	        SPI_I2S_SendData(SPI1, 0); //Write a 0 to generate clock
 310              		.loc 1 112 0
 311 01a8 4FF44050 		mov	r0, #12288
 312 01ac C4F20100 		movt	r0, 16385
 313 01b0 4FF00001 		mov	r1, #0
 314 01b4 FFF7FEFF 		bl	SPI_I2S_SendData
 113:../spi_1.c    **** 	        while (!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE)); //blocks until there is something
 315              		.loc 1 113 0
 316 01b8 00BF     		nop
 317              	.L10:
 318              		.loc 1 113 0 is_stmt 0 discriminator 1
 319 01ba 4FF44050 		mov	r0, #12288
 320 01be C4F20100 		movt	r0, 16385
 321 01c2 4FF00101 		mov	r1, #1
 322 01c6 FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 323 01ca 0346     		mov	r3, r0
 324 01cc 002B     		cmp	r3, #0
 325 01ce F4D0     		beq	.L10
 114:../spi_1.c    **** 	        buffer[pos]=SPI_I2S_ReceiveData(SPI1);
 326              		.loc 1 114 0 is_stmt 1
 327 01d0 7A68     		ldr	r2, [r7, #4]
 328 01d2 FB68     		ldr	r3, [r7, #12]
 329 01d4 D418     		adds	r4, r2, r3
 330 01d6 4FF44050 		mov	r0, #12288
 331 01da C4F20100 		movt	r0, 16385
 332 01de FFF7FEFF 		bl	SPI_I2S_ReceiveData
 333 01e2 0346     		mov	r3, r0
 334 01e4 DBB2     		uxtb	r3, r3
 335 01e6 2370     		strb	r3, [r4, #0]
 111:../spi_1.c    **** 	for (pos = 0 ; pos < buff_length; pos++) {
 336              		.loc 1 111 0
 337 01e8 FB68     		ldr	r3, [r7, #12]
 338 01ea 03F10103 		add	r3, r3, #1
 339 01ee FB60     		str	r3, [r7, #12]
 340              	.L9:
 111:../spi_1.c    **** 	for (pos = 0 ; pos < buff_length; pos++) {
 341              		.loc 1 111 0 is_stmt 0 discriminator 1
 342 01f0 FA68     		ldr	r2, [r7, #12]
 343 01f2 3B68     		ldr	r3, [r7, #0]
 344 01f4 9A42     		cmp	r2, r3
 345 01f6 D7D3     		bcc	.L11
 115:../spi_1.c    **** 	        //delay_us(0); //motion-burst -> no need to wait between bytes
 116:../spi_1.c    **** 	    }
 117:../spi_1.c    **** 
 118:../spi_1.c    **** 	return pos;
 346              		.loc 1 118 0 is_stmt 1
 347 01f8 FB68     		ldr	r3, [r7, #12]
 119:../spi_1.c    **** }
 348              		.loc 1 119 0
 349 01fa 1846     		mov	r0, r3
 350 01fc 07F11407 		add	r7, r7, #20
 351 0200 BD46     		mov	sp, r7
 352 0202 90BD     		pop	{r4, r7, pc}
 353              		.cfi_endproc
 354              	.LFE33:
 356              		.align	2
 357              		.global	spi1_WriteRegister
 358              		.thumb
 359              		.thumb_func
 361              	spi1_WriteRegister:
 362              	.LFB34:
 120:../spi_1.c    **** 
 121:../spi_1.c    **** 
 122:../spi_1.c    **** 
 123:../spi_1.c    **** unsigned char spi1_WriteRegister(unsigned char address, unsigned char data) {
 363              		.loc 1 123 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 8
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367 0204 80B5     		push	{r7, lr}
 368              	.LCFI13:
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 14, -4
 371              		.cfi_offset 7, -8
 372 0206 82B0     		sub	sp, sp, #8
 373              	.LCFI14:
 374              		.cfi_def_cfa_offset 16
 375 0208 00AF     		add	r7, sp, #0
 376              	.LCFI15:
 377              		.cfi_def_cfa_register 7
 378 020a 0246     		mov	r2, r0
 379 020c 0B46     		mov	r3, r1
 380 020e FA71     		strb	r2, [r7, #7]
 381 0210 BB71     		strb	r3, [r7, #6]
 124:../spi_1.c    **** 
 125:../spi_1.c    ****    // address |= (1 << 8);
 126:../spi_1.c    **** 	address |=  0x80;
 382              		.loc 1 126 0
 383 0212 FB79     		ldrb	r3, [r7, #7]
 384 0214 63F07F03 		orn	r3, r3, #127
 385 0218 FB71     		strb	r3, [r7, #7]
 127:../spi_1.c    ****     while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 386              		.loc 1 127 0
 387 021a 00BF     		nop
 388              	.L13:
 389              		.loc 1 127 0 is_stmt 0 discriminator 1
 390 021c 4FF44050 		mov	r0, #12288
 391 0220 C4F20100 		movt	r0, 16385
 392 0224 4FF00201 		mov	r1, #2
 393 0228 FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 394 022c 0346     		mov	r3, r0
 395 022e 002B     		cmp	r3, #0
 396 0230 F4D0     		beq	.L13
 128:../spi_1.c    **** 
 129:../spi_1.c    ****     spi1_SelectChip();
 397              		.loc 1 129 0 is_stmt 1
 398 0232 FFF7FEFF 		bl	spi1_SelectChip
 130:../spi_1.c    ****     delay_us(1); //delay tNCS-SCLK 120ns
 399              		.loc 1 130 0
 400 0236 4FF00100 		mov	r0, #1
 401 023a FFF7FEFF 		bl	delay_us
 131:../spi_1.c    **** 
 132:../spi_1.c    ****     // Send SPI1 data
 133:../spi_1.c    ****     SPI_I2S_SendData(SPI1, address);
 402              		.loc 1 133 0
 403 023e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 404 0240 9BB2     		uxth	r3, r3
 405 0242 4FF44050 		mov	r0, #12288
 406 0246 C4F20100 		movt	r0, 16385
 407 024a 1946     		mov	r1, r3
 408 024c FFF7FEFF 		bl	SPI_I2S_SendData
 134:../spi_1.c    ****     while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 409              		.loc 1 134 0
 410 0250 00BF     		nop
 411              	.L14:
 412              		.loc 1 134 0 is_stmt 0 discriminator 1
 413 0252 4FF44050 		mov	r0, #12288
 414 0256 C4F20100 		movt	r0, 16385
 415 025a 4FF00201 		mov	r1, #2
 416 025e FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 417 0262 0346     		mov	r3, r0
 418 0264 002B     		cmp	r3, #0
 419 0266 F4D0     		beq	.L14
 135:../spi_1.c    ****     SPI_I2S_SendData(SPI1, data);
 420              		.loc 1 135 0 is_stmt 1
 421 0268 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 422 026a 9BB2     		uxth	r3, r3
 423 026c 4FF44050 		mov	r0, #12288
 424 0270 C4F20100 		movt	r0, 16385
 425 0274 1946     		mov	r1, r3
 426 0276 FFF7FEFF 		bl	SPI_I2S_SendData
 136:../spi_1.c    **** 
 137:../spi_1.c    ****     while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 427              		.loc 1 137 0
 428 027a 00BF     		nop
 429              	.L15:
 430              		.loc 1 137 0 is_stmt 0 discriminator 1
 431 027c 4FF44050 		mov	r0, #12288
 432 0280 C4F20100 		movt	r0, 16385
 433 0284 4FF00201 		mov	r1, #2
 434 0288 FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 435 028c 0346     		mov	r3, r0
 436 028e 002B     		cmp	r3, #0
 437 0290 F4D0     		beq	.L15
 138:../spi_1.c    ****     delay_us(25);
 438              		.loc 1 138 0 is_stmt 1
 439 0292 4FF01900 		mov	r0, #25
 440 0296 FFF7FEFF 		bl	delay_us
 139:../spi_1.c    ****     spi1_DeselectChip();
 441              		.loc 1 139 0
 442 029a FFF7FEFF 		bl	spi1_DeselectChip
 140:../spi_1.c    ****     delay_us(140);
 443              		.loc 1 140 0
 444 029e 4FF08C00 		mov	r0, #140
 445 02a2 FFF7FEFF 		bl	delay_us
 141:../spi_1.c    ****     return data;
 446              		.loc 1 141 0
 447 02a6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 142:../spi_1.c    **** }
 448              		.loc 1 142 0
 449 02a8 1846     		mov	r0, r3
 450 02aa 07F10807 		add	r7, r7, #8
 451 02ae BD46     		mov	sp, r7
 452 02b0 80BD     		pop	{r7, pc}
 453              		.cfi_endproc
 454              	.LFE34:
 456 02b2 00BF     		.align	2
 457              		.global	spi1_ReadRegister
 458              		.thumb
 459              		.thumb_func
 461              	spi1_ReadRegister:
 462              	.LFB35:
 143:../spi_1.c    **** 
 144:../spi_1.c    **** unsigned char spi1_ReadRegister(unsigned char address) {
 463              		.loc 1 144 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 16
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467 02b4 80B5     		push	{r7, lr}
 468              	.LCFI16:
 469              		.cfi_def_cfa_offset 8
 470              		.cfi_offset 14, -4
 471              		.cfi_offset 7, -8
 472 02b6 84B0     		sub	sp, sp, #16
 473              	.LCFI17:
 474              		.cfi_def_cfa_offset 24
 475 02b8 00AF     		add	r7, sp, #0
 476              	.LCFI18:
 477              		.cfi_def_cfa_register 7
 478 02ba 0346     		mov	r3, r0
 479 02bc FB71     		strb	r3, [r7, #7]
 145:../spi_1.c    **** 
 146:../spi_1.c    **** 	//address &= ~(1 << 8);
 147:../spi_1.c    **** 	address &=  0x7f;
 480              		.loc 1 147 0
 481 02be FB79     		ldrb	r3, [r7, #7]
 482 02c0 03F07F03 		and	r3, r3, #127
 483 02c4 FB71     		strb	r3, [r7, #7]
 148:../spi_1.c    **** 
 149:../spi_1.c    **** 	while (!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE))
 484              		.loc 1 149 0
 485 02c6 00BF     		nop
 486              	.L17:
 487              		.loc 1 149 0 is_stmt 0 discriminator 1
 488 02c8 4FF44050 		mov	r0, #12288
 489 02cc C4F20100 		movt	r0, 16385
 490 02d0 4FF00201 		mov	r1, #2
 491 02d4 FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 492 02d8 0346     		mov	r3, r0
 493 02da 002B     		cmp	r3, #0
 494 02dc F4D0     		beq	.L17
 150:../spi_1.c    **** 		;
 151:../spi_1.c    **** 	spi1_SelectChip();
 495              		.loc 1 151 0 is_stmt 1
 496 02de FFF7FEFF 		bl	spi1_SelectChip
 152:../spi_1.c    **** 	delay_us(1);
 497              		.loc 1 152 0
 498 02e2 4FF00100 		mov	r0, #1
 499 02e6 FFF7FEFF 		bl	delay_us
 153:../spi_1.c    **** 	SPI_I2S_SendData(SPI1, address);
 500              		.loc 1 153 0
 501 02ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 502 02ec 9BB2     		uxth	r3, r3
 503 02ee 4FF44050 		mov	r0, #12288
 504 02f2 C4F20100 		movt	r0, 16385
 505 02f6 1946     		mov	r1, r3
 506 02f8 FFF7FEFF 		bl	SPI_I2S_SendData
 154:../spi_1.c    **** 	while (!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE))
 507              		.loc 1 154 0
 508 02fc 00BF     		nop
 509              	.L18:
 510              		.loc 1 154 0 is_stmt 0 discriminator 1
 511 02fe 4FF44050 		mov	r0, #12288
 512 0302 C4F20100 		movt	r0, 16385
 513 0306 4FF00201 		mov	r1, #2
 514 030a FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 515 030e 0346     		mov	r3, r0
 516 0310 002B     		cmp	r3, #0
 517 0312 F4D0     		beq	.L18
 155:../spi_1.c    **** 		;
 156:../spi_1.c    **** 	delay_us(120);
 518              		.loc 1 156 0 is_stmt 1
 519 0314 4FF07800 		mov	r0, #120
 520 0318 FFF7FEFF 		bl	delay_us
 157:../spi_1.c    **** 
 158:../spi_1.c    **** 	unsigned char data = 0;
 521              		.loc 1 158 0
 522 031c 4FF00003 		mov	r3, #0
 523 0320 FB73     		strb	r3, [r7, #15]
 159:../spi_1.c    **** 	data = SPI_I2S_ReceiveData(SPI1);
 524              		.loc 1 159 0
 525 0322 4FF44050 		mov	r0, #12288
 526 0326 C4F20100 		movt	r0, 16385
 527 032a FFF7FEFF 		bl	SPI_I2S_ReceiveData
 528 032e 0346     		mov	r3, r0
 529 0330 FB73     		strb	r3, [r7, #15]
 160:../spi_1.c    **** 	SPI_I2S_SendData(SPI1, 0);
 530              		.loc 1 160 0
 531 0332 4FF44050 		mov	r0, #12288
 532 0336 C4F20100 		movt	r0, 16385
 533 033a 4FF00001 		mov	r1, #0
 534 033e FFF7FEFF 		bl	SPI_I2S_SendData
 161:../spi_1.c    **** 	while (!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE))
 535              		.loc 1 161 0
 536 0342 00BF     		nop
 537              	.L19:
 538              		.loc 1 161 0 is_stmt 0 discriminator 1
 539 0344 4FF44050 		mov	r0, #12288
 540 0348 C4F20100 		movt	r0, 16385
 541 034c 4FF00101 		mov	r1, #1
 542 0350 FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 543 0354 0346     		mov	r3, r0
 544 0356 002B     		cmp	r3, #0
 545 0358 F4D0     		beq	.L19
 162:../spi_1.c    **** 		;
 163:../spi_1.c    **** 	data = SPI_I2S_ReceiveData(SPI1);
 546              		.loc 1 163 0 is_stmt 1
 547 035a 4FF44050 		mov	r0, #12288
 548 035e C4F20100 		movt	r0, 16385
 549 0362 FFF7FEFF 		bl	SPI_I2S_ReceiveData
 550 0366 0346     		mov	r3, r0
 551 0368 FB73     		strb	r3, [r7, #15]
 164:../spi_1.c    **** 	delay_us(25);
 552              		.loc 1 164 0
 553 036a 4FF01900 		mov	r0, #25
 554 036e FFF7FEFF 		bl	delay_us
 165:../spi_1.c    **** 	spi1_DeselectChip();
 555              		.loc 1 165 0
 556 0372 FFF7FEFF 		bl	spi1_DeselectChip
 166:../spi_1.c    **** 	delay_us(25);
 557              		.loc 1 166 0
 558 0376 4FF01900 		mov	r0, #25
 559 037a FFF7FEFF 		bl	delay_us
 167:../spi_1.c    **** 	return data;
 560              		.loc 1 167 0
 561 037e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 168:../spi_1.c    **** }
 562              		.loc 1 168 0
 563 0380 1846     		mov	r0, r3
 564 0382 07F11007 		add	r7, r7, #16
 565 0386 BD46     		mov	sp, r7
 566 0388 80BD     		pop	{r7, pc}
 567              		.cfi_endproc
 568              	.LFE35:
 570              	.Letext0:
 571              		.file 2 "/opt/CodeSourcery/arm-2011.09/bin/../lib/gcc/arm-none-eabi/4.6.1/../../../../arm-none-eab
 572              		.file 3 "/home/simon/Workspace/stm32vl/stm32_lib/inc/stm32f10x.h"
 573              		.file 4 "/home/simon/Workspace/stm32vl/stm32_lib/inc/stm32f10x_gpio.h"
 574              		.file 5 "/home/simon/Workspace/stm32vl/stm32_lib/inc/stm32f10x_spi.h"
 575              		.file 6 "../mousesensor.h"
 576              		.file 7 "/home/simon/Workspace/stm32vl/stm32_lib/inc/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 spi_1.c
                            *COM*:0000000e mouse_data
                            *COM*:00000001 spi1_datastat
                            *COM*:00000001 spi2_datastat
                            *COM*:00000106 SPI1_Data
     /tmp/cc4HvzFP.s:22     .text:00000000 $t
     /tmp/cc4HvzFP.s:27     .text:00000000 spi1_init
     /tmp/cc4HvzFP.s:149    .text:000000f4 spi1_SelectChip
     /tmp/cc4HvzFP.s:178    .text:0000010c spi1_DeselectChip
     /tmp/cc4HvzFP.s:207    .text:00000124 spi1_SendData
     /tmp/cc4HvzFP.s:282    .text:00000190 spi1_GetData
     /tmp/cc4HvzFP.s:361    .text:00000204 spi1_WriteRegister
     /tmp/cc4HvzFP.s:461    .text:000002b4 spi1_ReadRegister
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphClockCmd
GPIO_StructInit
GPIO_Init
SPI_StructInit
SPI_Init
SPI_Cmd
GPIO_SetBits
GPIO_ResetBits
SPI_I2S_SendData
SPI_I2S_GetFlagStatus
delay_us
SPI_I2S_ReceiveData
